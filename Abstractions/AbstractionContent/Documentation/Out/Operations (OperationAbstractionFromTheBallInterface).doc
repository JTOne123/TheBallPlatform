 
<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=utf-8">
<meta name=Generator content="Microsoft Word 14 (filtered)">

<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Cambria;
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
@font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
 /* Style Definitions */
 p.MsoNormalRed, li.MsoNormalRed, div.MsoNormalRed
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:10.0pt;
	margin-left:0cm;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";
	font-weight:bold;
	text-decoration:underline;
	color:Red;
	}
 p.MsoNormalBlue, li.MsoNormalBlue, div.MsoNormalBlue
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:10.0pt;
	margin-left:0cm;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";
	font-weight:bold;
	font-style:italic;
	color:Blue;
	}
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:10.0pt;
	margin-left:0cm;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";
	}
h1
	{mso-style-link:"Heading 1 Char";
	margin-top:24.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	line-height:115%;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"Cambria","serif";
	color:#365F91;}
h2
	{mso-style-link:"Heading 2 Char";
	margin-top:10.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	line-height:115%;
	page-break-after:avoid;
	font-size:13.0pt;
	font-family:"Cambria","serif";
	color:#4F81BD;}
h3
	{mso-style-link:"Heading 3 Char";
	margin-top:10.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	line-height:115%;
	page-break-after:avoid;
	font-size:11.0pt;
	font-family:"Cambria","serif";
	color:#4F81BD;}
p.MsoToc1, li.MsoToc1, div.MsoToc1
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:5.0pt;
	margin-left:0cm;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
p.MsoToc2, li.MsoToc2, div.MsoToc2
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:5.0pt;
	margin-left:11.0pt;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
p.MsoToc3, li.MsoToc3, div.MsoToc3
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:5.0pt;
	margin-left:22.0pt;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
p.MsoTitle, li.MsoTitle, div.MsoTitle
	{mso-style-link:"Title Char";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:15.0pt;
	margin-left:0cm;
	border:none;
	padding:0cm;
	font-size:26.0pt;
	font-family:"Cambria","serif";
	color:#17365D;
	letter-spacing:.25pt;}
p.MsoTitleCxSpFirst, li.MsoTitleCxSpFirst, div.MsoTitleCxSpFirst
	{mso-style-link:"Title Char";
	margin:0cm;
	margin-bottom:.0001pt;
	border:none;
	padding:0cm;
	font-size:26.0pt;
	font-family:"Cambria","serif";
	color:#17365D;
	letter-spacing:.25pt;}
p.MsoTitleCxSpMiddle, li.MsoTitleCxSpMiddle, div.MsoTitleCxSpMiddle
	{mso-style-link:"Title Char";
	margin:0cm;
	margin-bottom:.0001pt;
	border:none;
	padding:0cm;
	font-size:26.0pt;
	font-family:"Cambria","serif";
	color:#17365D;
	letter-spacing:.25pt;}
p.MsoTitleCxSpLast, li.MsoTitleCxSpLast, div.MsoTitleCxSpLast
	{mso-style-link:"Title Char";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:15.0pt;
	margin-left:0cm;
	border:none;
	padding:0cm;
	font-size:26.0pt;
	font-family:"Cambria","serif";
	color:#17365D;
	letter-spacing:.25pt;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;}
p.MsoAcetate, li.MsoAcetate, div.MsoAcetate
	{mso-style-link:"Balloon Text Char";
	margin:0cm;
	margin-bottom:.0001pt;
	font-size:8.0pt;
	font-family:"Tahoma","sans-serif";}
p.MsoTocHeading, li.MsoTocHeading, div.MsoTocHeading
	{margin-top:24.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	line-height:115%;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"Cambria","serif";
	color:#365F91;
	font-weight:bold;}
span.TitleChar
	{mso-style-name:"Title Char";
	mso-style-link:Title;
	font-family:"Cambria","serif";
	color:#17365D;
	letter-spacing:.25pt;}
span.Heading1Char
	{mso-style-name:"Heading 1 Char";
	mso-style-link:"Heading 1";
	font-family:"Cambria","serif";
	color:#365F91;
	font-weight:bold;}
span.Heading2Char
	{mso-style-name:"Heading 2 Char";
	mso-style-link:"Heading 2";
	font-family:"Cambria","serif";
	color:#4F81BD;
	font-weight:bold;}
span.Heading3Char
	{mso-style-name:"Heading 3 Char";
	mso-style-link:"Heading 3";
	font-family:"Cambria","serif";
	color:#4F81BD;
	font-weight:bold;}
span.BalloonTextChar
	{mso-style-name:"Balloon Text Char";
	mso-style-link:"Balloon Text";
	font-family:"Tahoma","sans-serif";}
.MsoChpDefault
	{font-family:"Calibri","sans-serif";}
.MsoPapDefault
	{margin-bottom:10.0pt;
	line-height:115%;}
@page WordSection1
	{size:595.3pt 841.9pt;
	margin:70.85pt 2.0cm 70.85pt 2.0cm;}
div.WordSection1
	{page:WordSection1;}
-->
</style>

</head>
		<body lang=EN link=blue vlink=purple>

<div class=WordSection1>

		
		<div style='border:none;border-bottom:solid #4F81BD 1.0pt;padding:0cm 0cm 4.0pt 0cm'>
<p class="MsoTitle">Operations (OperationAbstractionFromTheBallInterface)</p>
</div>
		<h1>CreateConnectionStructures (ConnectionID)</h1>
		<h2>Specifications</h2>
		<p>		<div class="MsoNormal" >
		
            Create receiving connection structures. Called by active part after connection is authorized.
          
		</div>
		</p><h2>Parameters</h2>
		<p><table border="1">
				<tr><th><div class=MsoNormal>Parameter</div></th><th><div class=MsoNormal>DataType</div></th><th><div class=MsoNormal>Description</div></th></tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		ConnectionID
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		string
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Connection communication data
		</div>
				</td>
				</tr>
		</table>
		</p><h2>Target Definition: Connection ( ConnectionID )</h2>
		<p>		<div class="MsoNormal" >
		This side connection entry
		</div>
		</p><h2>Target Definition: ProcessToListPackageContents ( Connection )</h2>
		<p>		<div class="MsoNormal" >
		Process to list package contents
		</div>
		</p><h2>Target Definition: ProcessToProcessReceivedData ( Connection )</h2>
		<p>		<div class="MsoNormal" >
		Process to process received data
		</div>
		</p><h2>Target Definition: ProcessToUpdateThisSideCategories ( Connection )</h2>
		<p>		<div class="MsoNormal" >
		Process to update this side categories
		</div>
		</p><h2>Method Call: SetConnectionProcesses ( Connection, ProcessToListPackageContents, ProcessToProcessReceivedData, ProcessToUpdateThisSideCategories )</h2>
		<p>		<div class="MsoNormal" >
		Set connection processes
		</div>
		</p><h2>Method Call: StoreObject ( Connection )</h2>
		<p>		<div class="MsoNormal" >
		Store object
		</div>
		</p><h2>Return Value : CreateConnectionStructuresReturnValue ( Connection )</h2>
		<p><table border="1">
				<tr><th><div class=MsoNormal>Return Value</div></th><th><div class=MsoNormal>DataType</div></th><th><div class=MsoNormal>Description</div></th></tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		UpdatedConnection
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Connection
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Updated connection value
		</div>
				</td>
				</tr>
		</table>
		</p><h1>CreateInterfaceOperationForExecution (DataType, OperationData)</h1>
		<h2>Specifications</h2>
		<p>		<div class="MsoNormal" >
		Create interface operation for execution. Return ID to follow-up on status.
		</div>
		</p><h2>Parameters</h2>
		<p><table border="1">
				<tr><th><div class=MsoNormal>Parameter</div></th><th><div class=MsoNormal>DataType</div></th><th><div class=MsoNormal>Description</div></th></tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		DataType
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		string
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Operation data type
		</div>
				</td>
				</tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		OperationData
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		byte[]
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Operation data as raw binary to be stored next to operation data
		</div>
				</td>
				</tr>
		</table>
		</p><h2>Target Definition: Operation ( DataType )</h2>
		<p>		<div class="MsoNormal" >
		Operation object to be saved along with the data
		</div>
		</p><h2>Target Definition: OperationDataLocation ( Operation )</h2>
		<p>		<div class="MsoNormal" >
		Operation data object location to store
		</div>
		</p><h2>Method Call: StoreOperationWithData ( Operation, OperationDataLocation, OperationData )</h2>
		<p>		<div class="MsoNormal" >
		Store operation object with its data
		</div>
		</p><h2>Return Value : CreateInterfaceOperationForExecutionReturnValue ( Operation )</h2>
		<p><table border="1">
				<tr><th><div class=MsoNormal>Return Value</div></th><th><div class=MsoNormal>DataType</div></th><th><div class=MsoNormal>Description</div></th></tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		OperationID
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		string
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Operation ID of newly created operation
		</div>
				</td>
				</tr>
		</table>
		</p><h1>CreateReceivingConnection (Description, OtherSideConnectionID)</h1>
		<h2>Specifications</h2>
		<p>		<div class="MsoNormal" >
		
            Creates receiving connection, used for device initiated connection other end initiation.
          
		</div>
		</p><h2>Parameters</h2>
		<p><table border="1">
				<tr><th><div class=MsoNormal>Parameter</div></th><th><div class=MsoNormal>DataType</div></th><th><div class=MsoNormal>Description</div></th></tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		Description
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		string
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Connection description
		</div>
				</td>
				</tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		OtherSideConnectionID
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		string
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Other side connection ID
		</div>
				</td>
				</tr>
		</table>
		</p><h2>Target Definition: Connection ( Description, OtherSideConnectionID )</h2>
		<p>		<div class="MsoNormal" >
		Created connection
		</div>
		</p><h2>Method Call: StoreConnection ( Connection )</h2>
		<p>		<div class="MsoNormal" >
		Store connection object
		</div>
		</p><h2>Return Value : CreateReceivingConnectionReturnValue ( Connection )</h2>
		<p><table border="1">
				<tr><th><div class=MsoNormal>Return Value</div></th><th><div class=MsoNormal>DataType</div></th><th><div class=MsoNormal>Description</div></th></tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		ConnectionID
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		string
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Connection ID of created connection
		</div>
				</td>
				</tr>
		</table>
		</p><h1>CreateReceivingConnectionStructures (ConnectionCommunicationData)</h1>
		<h2>Specifications</h2>
		<p>		<div class="MsoNormal" >
		
            Create receiving connection structures. Called by active part after connection is authorized.
          
		</div>
		</p><h2>Parameters</h2>
		<p><table border="1">
				<tr><th><div class=MsoNormal>Parameter</div></th><th><div class=MsoNormal>DataType</div></th><th><div class=MsoNormal>Description</div></th></tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		ConnectionCommunicationData
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		INT.ConnectionCommunicationData
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Connection communication data
		</div>
				</td>
				</tr>
		</table>
		</p><h2>Target Definition: ThisSideConnection ( ConnectionCommunicationData )</h2>
		<p>		<div class="MsoNormal" >
		This side connection entry
		</div>
		</p><h2>Method Call: StoreObject ( ThisSideConnection )</h2>
		<p>		<div class="MsoNormal" >
		Store objects
		</div>
		</p><h2>Operation Call: CallCreateConnectionStructures ( ThisSideConnection )</h2>
		<p>		<div class="MsoNormal" >
		Call operation to create connection structures
		</div>
		</p><h1>DeleteConnectionWithStructures (ConnectionID, IsLaunchedByRemoteDelete)</h1>
		<h2>Specifications</h2>
		<p>		<div class="MsoNormal" >
		
            Delete connection with its structures and transfer storage contents
          
		</div>
		</p><h2>Parameters</h2>
		<p><table border="1">
				<tr><th><div class=MsoNormal>Parameter</div></th><th><div class=MsoNormal>DataType</div></th><th><div class=MsoNormal>Description</div></th></tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		ConnectionID
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		string
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Connection ID
		</div>
				</td>
				</tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		IsLaunchedByRemoteDelete
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		bool
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Is the deletion launched by remote connection
		</div>
				</td>
				</tr>
		</table>
		</p><h2>Target Definition: Connection ( ConnectionID )</h2>
		<p>		<div class="MsoNormal" >
		Connection object
		</div>
		</p><h2>Method Call: CallDeleteOnOtherEndAndDeleteOtherEndDevice ( Connection, IsLaunchedByRemoteDelete )</h2>
		<p>		<div class="MsoNormal" >
		Call delete on other end - if this is active party. Otherwise delete device associated with this connection. Ignore failure regardless
		</div>
		</p><h2>Method Call: DeleteConnectionIntermediateContent ( Connection )</h2>
		<p>		<div class="MsoNormal" >
		Delete connection's intermediate content, including transfer connect
		</div>
		</p><h2>Method Call: DeleteConnectionProcesses ( Connection )</h2>
		<p>		<div class="MsoNormal" >
		Delete connection attached processes
		</div>
		</p><h2>Method Call: DeleteConnectionObject ( Connection )</h2>
		<p>		<div class="MsoNormal" >
		Delete the actual connection object
		</div>
		</p><h1>DeleteInterfaceJSON (SaveDataInfo)</h1>
		<h2>Specifications</h2>
		<p>		<div class="MsoNormal" >
		Delete Interface JSON object with given name
		</div>
		</p><h2>Parameters</h2>
		<p><table border="1">
				<tr><th><div class=MsoNormal>Parameter</div></th><th><div class=MsoNormal>DataType</div></th><th><div class=MsoNormal>Description</div></th></tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		SaveDataInfo
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		INT.InterfaceJSONData
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Interface JSON data to delete
		</div>
				</td>
				</tr>
		</table>
		</p><h2>Target Definition: DataName ( SaveDataInfo )</h2>
		<p>		<div class="MsoNormal" >
		Data name for custom data
		</div>
		</p><h2>Target Definition: JSONDataFileLocation ( DataName )</h2>
		<p>		<div class="MsoNormal" >
		JSONDataFileLocation
		</div>
		</p><h2>Method Call: DeleteJSONData ( JSONDataFileLocation )</h2>
		<p>		<div class="MsoNormal" >
		Delete data JSON from its location
		</div>
		</p><h1>DeleteInterfaceOperation (OperationID)</h1>
		<h2>Specifications</h2>
		<p>		<div class="MsoNormal" >
		Delete given operation with its associated data
		</div>
		</p><h2>Parameters</h2>
		<p><table border="1">
				<tr><th><div class=MsoNormal>Parameter</div></th><th><div class=MsoNormal>DataType</div></th><th><div class=MsoNormal>Description</div></th></tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		OperationID
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		string
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Operation ID to execute
		</div>
				</td>
				</tr>
		</table>
		</p><h2>Target Definition: OperationBlobLocation ( OperationID )</h2>
		<p>		<div class="MsoNormal" >
		Operation blob location to be removed
		</div>
		</p><h2>Target Definition: OperationDataBlobLocation ( OperationBlobLocation )</h2>
		<p>		<div class="MsoNormal" >
		Operation data blob location to be removed
		</div>
		</p><h2>Method Call: DeleteOperationWithData ( OperationBlobLocation, OperationDataBlobLocation )</h2>
		<p>		<div class="MsoNormal" >
		Delete interface operation with its associated data
		</div>
		</p><h1>ExecuteConnectionProcess (ConnectionID, ConnectionProcessToExecute)</h1>
		<h2>Specifications</h2>
		<p>		<div class="MsoNormal" >
		
            Executes connection's bound process by its name.
          
		</div>
		</p><h2>Parameters</h2>
		<p><table border="1">
				<tr><th><div class=MsoNormal>Parameter</div></th><th><div class=MsoNormal>DataType</div></th><th><div class=MsoNormal>Description</div></th></tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		ConnectionID
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		string
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Connection ID
		</div>
				</td>
				</tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		ConnectionProcessToExecute
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		string
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Pre-defined list of hardcoded names to match the connection process fields
		</div>
				</td>
				</tr>
		</table>
		</p><h2>Target Definition: Connection ( ConnectionID )</h2>
		<p>		<div class="MsoNormal" >
		Connection object
		</div>
		</p><h2>Method Call: PerformProcessExecution ( Connection, ConnectionProcessToExecute )</h2>
		<p>		<div class="MsoNormal" >
		Execute the defined process
		</div>
		</p><h1>ExecuteInterfaceOperation (OperationID, UseSQLiteDB)</h1>
		<h2>Specifications</h2>
		<p>		<div class="MsoNormal" >
		Execute given operation
		</div>
		</p><h2>Parameters</h2>
		<p><table border="1">
				<tr><th><div class=MsoNormal>Parameter</div></th><th><div class=MsoNormal>DataType</div></th><th><div class=MsoNormal>Description</div></th></tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		OperationID
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		string
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Operation ID to execute
		</div>
				</td>
				</tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		UseSQLiteDB
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		bool
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Use SQLite database; calling syncs before and after
		</div>
				</td>
				</tr>
		</table>
		</p><h2>Target Definition: Operation ( OperationID )</h2>
		<p>		<div class="MsoNormal" >
		Interface object to be executed
		</div>
		</p><h2>Target Definition: OperationDataLocation ( Operation )</h2>
		<p>		<div class="MsoNormal" >
		Operation data object location to store
		</div>
		</p><h2>Method Call: PreExecuteSyncSQLiteFromStorage ( Operation, UseSQLiteDB )</h2>
		<p>		<div class="MsoNormal" >
		Sync storage to SQLite data if SQLite is used
		</div>
		</p><h2>Method Call: ExecuteOperation ( Operation, OperationDataLocation )</h2>
		<p>		<div class="MsoNormal" >
		Execute interface operation. Delete operation + data if succesful; update statistics otherwise with error info.
		</div>
		</p><h2>Method Call: PostExecuteSyncStorageFromSQLite ( Operation, UseSQLiteDB )</h2>
		<p>		<div class="MsoNormal" >
		Sync SQLite data to storage if SQLite is used
		</div>
		</p><h1>ExecuteInterfaceOperationsByOwnerAndReleaseLock (InstanceName, LockedOwnerPrefix, LockedOwnerID, OperationIDs, OperationQueueItems, LockBlobFullPath)</h1>
		<h2>Specifications</h2>
		<p>		<div class="MsoNormal" >
		Fetch oldest-first queue entries, group by owner and lock whole oldest-entry-owning owner for processing (retry for next oldest if lock wasn't possible). Return all found entries of that owner
		</div>
		</p><h2>Parameters</h2>
		<p><table border="1">
				<tr><th><div class=MsoNormal>Parameter</div></th><th><div class=MsoNormal>DataType</div></th><th><div class=MsoNormal>Description</div></th></tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		InstanceName
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		string
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Instance name to run the operations against
		</div>
				</td>
				</tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		LockedOwnerPrefix
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		string
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Locked owner prefix acc or grp (if lock acquired)
		</div>
				</td>
				</tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		LockedOwnerID
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		string
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Locked owner ID (if lock acquired)
		</div>
				</td>
				</tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		OperationIDs
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		string[]
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Operation IDs of obtained lock or null if failed to get lock
		</div>
				</td>
				</tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		OperationQueueItems
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		string[]
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Operation queue items included in this execution
		</div>
				</td>
				</tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		LockBlobFullPath
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		string
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Lock blobs full path
		</div>
				</td>
				</tr>
		</table>
		</p><h2>Method Call: ExecuteOperationsAndReleaseLock ( InstanceName, LockedOwnerPrefix, LockedOwnerID, OperationIDs, OperationQueueItems, LockBlobFullPath )</h2>
		<p>		<div class="MsoNormal" >
		Execute operations one by one, delete queue items after each execution, delete lock item after all executed.
		</div>
		</p><h1>ExecuteLegacyHttpPostRequest</h1>
		<h2>Specifications</h2>
		<p>		<div class="MsoNormal" >
		Execute legacy operation from HTTP Request data as from direct request (forms etc supported)
		</div>
		</p><h2>Target Definition: RequestData</h2>
		<p>		<div class="MsoNormal" >
		Request data retrieved from operation context
		</div>
		</p><h2>Method Call: ExecutePostRequest ( RequestData )</h2>
		<p>		<div class="MsoNormal" >
		Execute legacy request as-if it was submitted
		</div>
		</p><h1>ExecuteRemoteCalledConnectionOperation (InputStream, OutputStream)</h1>
		<h2>Specifications</h2>
		<p>		<div class="MsoNormal" >
		
            Perform connection operation with parameters obtained from inputstream and outputing to outputstream. (De)Serializing done to ConnectionCommunicationData object.
          
		</div>
		</p><h2>Parameters</h2>
		<p><table border="1">
				<tr><th><div class=MsoNormal>Parameter</div></th><th><div class=MsoNormal>DataType</div></th><th><div class=MsoNormal>Description</div></th></tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		InputStream
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		System.IO.Stream
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Input stream for parameter serialization
		</div>
				</td>
				</tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		OutputStream
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		System.IO.Stream
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Output stream for connection response output
		</div>
				</td>
				</tr>
		</table>
		</p><h2>Target Definition: ConnectionCommunicationData ( InputStream )</h2>
		<p>		<div class="MsoNormal" >
		Connection communicating data obtained from DeviceContext
		</div>
		</p><h2>Method Call: PerformOperation ( ConnectionCommunicationData )</h2>
		<p>		<div class="MsoNormal" >
		Perform operation based on communication data request
		</div>
		</p><h2>Method Call: SerializeCommunicationDataToOutput ( ConnectionCommunicationData, OutputStream )</h2>
		<p>		<div class="MsoNormal" >
		Serialize communication data to output
		</div>
		</p><h1>FetchURLAsGroupContent (GroupID, FileName, DataURL)</h1>
		<h2>Specifications</h2>
		<p>		<div class="MsoNormal" >
		Fetch URL data as group BinaryFile/MediaContent
		</div>
		</p><h2>Parameters</h2>
		<p><table border="1">
				<tr><th><div class=MsoNormal>Parameter</div></th><th><div class=MsoNormal>DataType</div></th><th><div class=MsoNormal>Description</div></th></tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		GroupID
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		string
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Group ID to fetch data as for
		</div>
				</td>
				</tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		FileName
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		string
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		File name of data to be fetched
		</div>
				</td>
				</tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		DataURL
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		string
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		URL from where to fetch the data
		</div>
				</td>
				</tr>
		</table>
		</p><h2>Target Definition: Owner ( GroupID )</h2>
		<p>		<div class="MsoNormal" >
		GroupID as owner
		</div>
		</p><h2>Target Definition: BinaryFile ( Owner, FileName )</h2>
		<p>		<div class="MsoNormal" >
		Binary file to attach the mediacontent to
		</div>
		</p><h2>Method Call: FetchDataAndAttachToFile ( BinaryFile, DataURL )</h2>
		<p>		<div class="MsoNormal" >
		Fetch data from URL and attach to file
		</div>
		</p><h1>FinalizeConnectionAfterGroupAuthorization (ConnectionID)</h1>
		<h2>Specifications</h2>
		<p>		<div class="MsoNormal" >
		
            Finalizes connection with negotiating connection ID pairs between participants.
          
		</div>
		</p><h2>Parameters</h2>
		<p><table border="1">
				<tr><th><div class=MsoNormal>Parameter</div></th><th><div class=MsoNormal>DataType</div></th><th><div class=MsoNormal>Description</div></th></tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		ConnectionID
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		string
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Connection ID
		</div>
				</td>
				</tr>
		</table>
		</p><h2>Target Definition: Connection ( ConnectionID )</h2>
		<p>		<div class="MsoNormal" >
		Connection object for finalization
		</div>
		</p><h2>Target Definition: ConnectionCommunicationData ( Connection )</h2>
		<p>		<div class="MsoNormal" >
		Connection finalizing data model (UI/JSON serializable)
		</div>
		</p><h2>Method Call: CallDeviceServiceForFinalizing ( Connection, ConnectionCommunicationData )</h2>
		<p>		<div class="MsoNormal" >
		Call device based service for finalizing
		</div>
		</p><h2>Method Call: UpdateConnectionWithCommunicationData ( Connection, ConnectionCommunicationData )</h2>
		<p>		<div class="MsoNormal" >
		Update received information to the connection
		</div>
		</p><h2>Method Call: StoreObject ( Connection )</h2>
		<p>		<div class="MsoNormal" >
		Store connection object
		</div>
		</p><h2>Operation Call: CallCreateConnectionStructures ( Connection )</h2>
		<p>		<div class="MsoNormal" >
		Create connection structures
		</div>
		</p><h1>InitiateIntegrationConnection (Description, TargetBallHostName, TargetGroupID)</h1>
		<h2>Specifications</h2>
		<p>		<div class="MsoNormal" >
		
            Initiates integration connection
          
		</div>
		</p><h2>Parameters</h2>
		<p><table border="1">
				<tr><th><div class=MsoNormal>Parameter</div></th><th><div class=MsoNormal>DataType</div></th><th><div class=MsoNormal>Description</div></th></tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		Description
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		string
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Description of the connection
		</div>
				</td>
				</tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		TargetBallHostName
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		string
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Target Ball instance host name
		</div>
				</td>
				</tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		TargetGroupID
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		string
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Target group ID for the connection
		</div>
				</td>
				</tr>
		</table>
		</p><h2>Target Definition: Connection ( Description )</h2>
		<p>		<div class="MsoNormal" >
		Creates connection
		</div>
		</p><h2>Target Definition: DeviceForConnection ( Connection, Description, TargetBallHostName, TargetGroupID )</h2>
		<p>		<div class="MsoNormal" >
		Device for the connection
		</div>
		</p><h2>Method Call: StoreConnection ( Connection )</h2>
		<p>		<div class="MsoNormal" >
		Store connection object
		</div>
		</p><h2>Method Call: NegotiateDeviceConnection ( DeviceForConnection )</h2>
		<p>		<div class="MsoNormal" >
		Negotiate device connection
		</div>
		</p><h1>LockInterfaceOperationsByOwner (DedicatedToOwner)</h1>
		<h2>Specifications</h2>
		<p>		<div class="MsoNormal" >
		Fetch oldest-first queue entries, group by owner and lock whole oldest-entry-owning owner for processing (retry for next oldest if lock wasn't possible). Return all found entries of that owner
		</div>
		</p><h2>Parameters</h2>
		<p><table border="1">
				<tr><th><div class=MsoNormal>Parameter</div></th><th><div class=MsoNormal>DataType</div></th><th><div class=MsoNormal>Description</div></th></tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		DedicatedToOwner
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		TheBall.CORE.IContainerOwner
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Dedicated to owner - null if not dedicated
		</div>
				</td>
				</tr>
		</table>
		</p><h2>Target Definition: QueueOwner</h2>
		<p>		<div class="MsoNormal" >
		Get system as queue owner
		</div>
		</p><h2>Target Definition: QueueLocation</h2>
		<p>		<div class="MsoNormal" >
		Queue root folder location
		</div>
		</p><h2>Target Definition: OwnerGroupedItems ( QueueOwner, QueueLocation )</h2>
		<p>		<div class="MsoNormal" >
		Grouped data by owner; preserving alphabetical order for oldest-first
		</div>
		</p><h2>Target Definition: LockFileNameFormat</h2>
		<p>		<div class="MsoNormal" >
		Lock file name as: _ownerprefix_ownerid.lock
		</div>
		</p><h2>Method Call: AcquireFirstObtainableLock ( OwnerGroupedItems, QueueOwner, QueueLocation, LockFileNameFormat, DedicatedToOwner )</h2>
		<p>		<div class="MsoNormal" >
		Acquire first lock from grouped items, that is obtainable. List operation IDs as lock content.
		</div>
		</p><p><table border="1">
				<tr><th><div class=MsoNormal>Output value field</div></th><th><div class=MsoNormal>DataType</div></th><th><div class=MsoNormal>Description</div></th></tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		LockedOwnerPrefix
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		string
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Locked owner prefix acc or grp (if lock acquired)
		</div>
				</td>
				</tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		LockedOwnerID
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		string
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Locked owner ID (if lock acquired)
		</div>
				</td>
				</tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		OperationIDs
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		string[]
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Operation IDs of obtained lock or null if failed to get lock
		</div>
				</td>
				</tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		OperationQueueItems
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		string[]
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Operation queue items included in lock
		</div>
				</td>
				</tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		LockBlobFullPath
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		string
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Lock blobs full path
		</div>
				</td>
				</tr>
		</table>
		</p><h2>Return Value : LockInterfaceOperationsByOwnerReturnValue ( AcquireFirstObtainableLockOutput )</h2>
		<p><table border="1">
				<tr><th><div class=MsoNormal>Return Value</div></th><th><div class=MsoNormal>DataType</div></th><th><div class=MsoNormal>Description</div></th></tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		LockedOwnerPrefix
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		string
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Locked owner prefix acc or grp (if lock acquired)
		</div>
				</td>
				</tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		LockedOwnerID
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		string
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Locked owner ID (if lock acquired)
		</div>
				</td>
				</tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		OperationIDs
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		string[]
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Operation IDs of obtained lock or null if failed to get lock
		</div>
				</td>
				</tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		OperationQueueItems
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		string[]
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Operation queue items included in lock
		</div>
				</td>
				</tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		LockBlobFullPath
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		string
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Lock blobs full path
		</div>
				</td>
				</tr>
		</table>
		</p><h1>PackageAndPushCollaborationContent (ConnectionID)</h1>
		<h2>Specifications</h2>
		<p>		<div class="MsoNormal" >
		Push collaboration content to given connection ID
		</div>
		</p><h2>Parameters</h2>
		<p><table border="1">
				<tr><th><div class=MsoNormal>Parameter</div></th><th><div class=MsoNormal>DataType</div></th><th><div class=MsoNormal>Description</div></th></tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		ConnectionID
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		string
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Connection ID to push the content with
		</div>
				</td>
				</tr>
		</table>
		</p><h2>Target Definition: Connection ( ConnectionID )</h2>
		<p>		<div class="MsoNormal" >
		Connection object
		</div>
		</p><h2>Target Definition: PackageContentListingOperationName ( Connection )</h2>
		<p>		<div class="MsoNormal" >
		Operation name for package listing operation
		</div>
		</p><h2>Method Call: DynamicPackageListingOperation ( PackageContentListingOperationName, ConnectionID )</h2>
		<p>		<div class="MsoNormal" >
		Dynamic operation execution of content packaging operation
		</div>
		</p><p><table border="1">
				<tr><th><div class=MsoNormal>Output value field</div></th><th><div class=MsoNormal>DataType</div></th><th><div class=MsoNormal>Description</div></th></tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		DynamicPackageListingResult
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		string[]
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		List of objects to package
		</div>
				</td>
				</tr>
		</table>
		</p><h2>Target Definition: TransferPackage ( ConnectionID )</h2>
		<p>		<div class="MsoNormal" >
		Transferpackage that identifies the data to package and send
		</div>
		</p><h2>Method Call: AddTransferPackageToConnection ( Connection, TransferPackage )</h2>
		<p>		<div class="MsoNormal" >
		Adds transfer package to outgoing packages of connection
		</div>
		</p><h2>Method Call: StoreObject ( Connection )</h2>
		<p>		<div class="MsoNormal" >
		Stores objects
		</div>
		</p><h2>Method Call: PackageTransferPackageContent ( TransferPackage, DynamicPackageListingOperationOutput )</h2>
		<p>		<div class="MsoNormal" >
		Package contents for transfer package
		</div>
		</p><p><table border="1">
				<tr><th><div class=MsoNormal>Output value field</div></th><th><div class=MsoNormal>DataType</div></th><th><div class=MsoNormal>Description</div></th></tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		OutputContentName
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		string[]
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Output content blob names
		</div>
				</td>
				</tr>
		</table>
		</p><h2>Method Call: SendTransferPackageContent ( Connection, TransferPackage, PackageTransferPackageContentOutput )</h2>
		<p>		<div class="MsoNormal" >
		Send package contents through connection
		</div>
		</p><h2>Method Call: SetTransferPackageAsProcessed ( TransferPackage )</h2>
		<p>		<div class="MsoNormal" >
		Set transfer package as prosessed state
		</div>
		</p><h2>Method Call: StoreObjectComplete ( Connection, TransferPackage )</h2>
		<p>		<div class="MsoNormal" >
		Stores connection with processed transferpackage
		</div>
		</p><h1>PublishCollaborationContentOverConnection (ConnectionID)</h1>
		<h2>Specifications</h2>
		<p>		<div class="MsoNormal" >
		Publish categorized content over connection
		</div>
		</p><h2>Parameters</h2>
		<p><table border="1">
				<tr><th><div class=MsoNormal>Parameter</div></th><th><div class=MsoNormal>DataType</div></th><th><div class=MsoNormal>Description</div></th></tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		ConnectionID
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		string
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Connection ID
		</div>
				</td>
				</tr>
		</table>
		</p><h2>Target Definition: Connection ( ConnectionID )</h2>
		<p>		<div class="MsoNormal" >
		Connection object
		</div>
		</p><h2>Operation Call: CallSyncConnectionContentToDeviceToSend ( Connection )</h2>
		<p>		<div class="MsoNormal" >
		Call sync content to device
		</div>
		</p><h2>Method Call: CallDeviceSyncToSendContent ( Connection )</h2>
		<p>		<div class="MsoNormal" >
		Call device sync to copy content
		</div>
		</p><p><table border="1">
				<tr><th><div class=MsoNormal>Output value field</div></th><th><div class=MsoNormal>DataType</div></th><th><div class=MsoNormal>Description</div></th></tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		WasAnythingCopiedOrDeleted
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		bool
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Was anything copied in the sync operation
		</div>
				</td>
				</tr>
		</table>
		</p><h2>Method Call: CallOtherSideProcessingForCopiedContent ( Connection, CallDeviceSyncToSendContentOutput )</h2>
		<p>		<div class="MsoNormal" >
		Call other side to process copied content
		</div>
		</p><h1>PullSyncData (Partner)</h1>
		<h2>Specifications</h2>
		<p>		<div class="MsoNormal" >
		Pull sync data from collaboration partner
		</div>
		</p><h2>Parameters</h2>
		<p><table border="1">
				<tr><th><div class=MsoNormal>Parameter</div></th><th><div class=MsoNormal>DataType</div></th><th><div class=MsoNormal>Description</div></th></tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		Partner
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		INT.CollaborationPartner
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Collaboration partner
		</div>
				</td>
				</tr>
		</table>
		</p><h2>Target Definition: CollaborationSource ( Partner )</h2>
		<p>		<div class="MsoNormal" >
		Collaboration target owner
		</div>
		</p><h2>Target Definition: CollaborationTarget</h2>
		<p>		<div class="MsoNormal" >
		Collaboration target owner
		</div>
		</p><h2>Target Definition: SyncSourceRoot ( CollaborationTarget )</h2>
		<p>		<div class="MsoNormal" >
		Sync source root folder
		</div>
		</p><h2>Target Definition: SyncTargetRoot ( CollaborationSource )</h2>
		<p>		<div class="MsoNormal" >
		Sync target root folder
		</div>
		</p><h2>Target Definition: ExistingSourceItems ( CollaborationSource, SyncSourceRoot )</h2>
		<p>		<div class="MsoNormal" >
		Sync source items
		</div>
		</p><h2>Target Definition: ExistingTargetItems ( CollaborationTarget, SyncTargetRoot )</h2>
		<p>		<div class="MsoNormal" >
		Existing target items
		</div>
		</p><h2>Method Call: SyncItems ( CollaborationSource, SyncSourceRoot, ExistingSourceItems, CollaborationTarget, SyncTargetRoot, ExistingTargetItems )</h2>
		<p>		<div class="MsoNormal" >
		Copy sync items to target
		</div>
		</p><h2>Operation Call: UpdateSummaryData ( Partner )</h2>
		<p>		<div class="MsoNormal" >
		Update summary data with operation call
		</div>
		</p><h1>PushSyncNotification (Partner)</h1>
		<h2>Specifications</h2>
		<p>		<div class="MsoNormal" >
		Push sync notification to collaboration target
		</div>
		</p><h2>Parameters</h2>
		<p><table border="1">
				<tr><th><div class=MsoNormal>Parameter</div></th><th><div class=MsoNormal>DataType</div></th><th><div class=MsoNormal>Description</div></th></tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		Partner
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		INT.CollaborationPartner
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Collaboration partner
		</div>
				</td>
				</tr>
		</table>
		</p><h2>Target Definition: CollaborationTarget ( Partner )</h2>
		<p>		<div class="MsoNormal" >
		Collaboration target owner
		</div>
		</p><h2>Target Definition: SyncOperationData ( CollaborationTarget )</h2>
		<p>		<div class="MsoNormal" >
		OperationData for Sync notification
		</div>
		</p><h2>Method Call: QueueSyncOperationToTarget ( CollaborationTarget, SyncOperationData )</h2>
		<p>		<div class="MsoNormal" >
		Queue sync operation to target owner
		</div>
		</p><h1>PutInterfaceOperationToQueue (OperationID)</h1>
		<h2>Specifications</h2>
		<p>		<div class="MsoNormal" >
		Put interface operation to queue
		</div>
		</p><h2>Parameters</h2>
		<p><table border="1">
				<tr><th><div class=MsoNormal>Parameter</div></th><th><div class=MsoNormal>DataType</div></th><th><div class=MsoNormal>Description</div></th></tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		OperationID
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		string
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Operation ID
		</div>
				</td>
				</tr>
		</table>
		</p><h2>Target Definition: QueueOwner</h2>
		<p>		<div class="MsoNormal" >
		Get system as queue owner
		</div>
		</p><h2>Target Definition: QueueLocation</h2>
		<p>		<div class="MsoNormal" >
		Queue root folder location
		</div>
		</p><h2>Target Definition: OperationOwner</h2>
		<p>		<div class="MsoNormal" >
		Operation item owner from Context.CurrentOwner
		</div>
		</p><h2>Target Definition: InvokerAccount</h2>
		<p>		<div class="MsoNormal" >
		Operation requesting account
		</div>
		</p><h2>Target Definition: QueueItemFileNameFormat</h2>
		<p>		<div class="MsoNormal" >
		Queue item file name as: timestamp_ownerprefix_ownerid_operationid
		</div>
		</p><h2>Target Definition: QueueItemFullPath ( QueueItemFileNameFormat, QueueOwner, QueueLocation, OperationOwner, OperationID )</h2>
		<p>		<div class="MsoNormal" >
		Queue item filename format populated with data and combined with queue owner and location
		</div>
		</p><h2>Method Call: CreateQueueEntry ( QueueItemFullPath, InvokerAccount, OperationID )</h2>
		<p>		<div class="MsoNormal" >
		Create queue entry to item with content of invoker account within
		</div>
		</p><h1>SaveInterfaceJSON (SaveDataInfo)</h1>
		<h2>Specifications</h2>
		<p>		<div class="MsoNormal" >
		Save Interface JSON object with given name
		</div>
		</p><h2>Parameters</h2>
		<p><table border="1">
				<tr><th><div class=MsoNormal>Parameter</div></th><th><div class=MsoNormal>DataType</div></th><th><div class=MsoNormal>Description</div></th></tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		SaveDataInfo
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		INT.InterfaceJSONData
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Interface JSON data to save
		</div>
				</td>
				</tr>
		</table>
		</p><h2>Target Definition: DataName ( SaveDataInfo )</h2>
		<p>		<div class="MsoNormal" >
		Data name for custom data
		</div>
		</p><h2>Target Definition: DataObject ( SaveDataInfo )</h2>
		<p>		<div class="MsoNormal" >
		Data to save as ExpandoObject
		</div>
		</p><h2>Target Definition: JSONDataFileLocation ( DataName )</h2>
		<p>		<div class="MsoNormal" >
		JSONDataFileLocation
		</div>
		</p><h2>Method Call: StoreJSONData ( JSONDataFileLocation, DataObject )</h2>
		<p>		<div class="MsoNormal" >
		Save data JSON to location as serialized
		</div>
		</p><h1>SetCategoryLinkingForConnection</h1>
		<h2>Specifications</h2>
		<p>		<div class="MsoNormal" >
		Sets category linking for connection
		</div>
		</p><h2>Target Definition: CategoryLinkingParameters</h2>
		<p>		<div class="MsoNormal" >
		Deserialized operation parameters
		</div>
		</p><h2>Target Definition: Connection ( CategoryLinkingParameters )</h2>
		<p>		<div class="MsoNormal" >
		Connection to set the linking info to
		</div>
		</p><h2>Method Call: SetConnectionLinkingData ( Connection, CategoryLinkingParameters )</h2>
		<p>		<div class="MsoNormal" >
		Set connection linking data
		</div>
		</p><h2>Method Call: StoreObject ( Connection )</h2>
		<p>		<div class="MsoNormal" >
		Store objects
		</div>
		</p><h1>ShareCollabInterfaceObject (CollabParams)</h1>
		<h2>Specifications</h2>
		<p>		<div class="MsoNormal" >
		Share existing InterfaceData content to collab/owner_id/TheBall.Interface/InterfaceData
		</div>
		</p><h2>Parameters</h2>
		<p><table border="1">
				<tr><th><div class=MsoNormal>Parameter</div></th><th><div class=MsoNormal>DataType</div></th><th><div class=MsoNormal>Description</div></th></tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		CollabParams
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		INT.ShareCollabParams
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Collaboration parameters
		</div>
				</td>
				</tr>
		</table>
		</p><h2>Target Definition: FileName ( CollabParams )</h2>
		<p>		<div class="MsoNormal" >
		Source filename
		</div>
		</p><h2>Method Call: ValidateFileName ( FileName )</h2>
		<p>		<div class="MsoNormal" >
		Validate file name for not being metadata-alike
		</div>
		</p><h2>Target Definition: CollaborationTarget ( CollabParams )</h2>
		<p>		<div class="MsoNormal" >
		Collaboration target verified and instanced
		</div>
		</p><h2>Target Definition: SourceFullPath ( FileName )</h2>
		<p>		<div class="MsoNormal" >
		Source file full path
		</div>
		</p><h2>Target Definition: MetadataFullPath ( FileName, CollaborationTarget )</h2>
		<p>		<div class="MsoNormal" >
		Target file full path
		</div>
		</p><h2>Target Definition: MetadataObject ( FileName, SourceFullPath )</h2>
		<p>		<div class="MsoNormal" >
		Metadata object retrieved from source
		</div>
		</p><h2>Method Call: StoreShareMetadata ( MetadataFullPath, MetadataObject )</h2>
		<p>		<div class="MsoNormal" >
		Store ShareInfo object
		</div>
		</p><h2>Operation Call: NotifyPartner ( CollabParams )</h2>
		<p>		<div class="MsoNormal" >
		Notify partner for sharing
		</div>
		</p><h1>SyncConnectionContentToDeviceToSend (Connection)</h1>
		<h2>Specifications</h2>
		<p>		<div class="MsoNormal" >
		
            Sync connection content to device to send
          
		</div>
		</p><h2>Parameters</h2>
		<p><table border="1">
				<tr><th><div class=MsoNormal>Parameter</div></th><th><div class=MsoNormal>DataType</div></th><th><div class=MsoNormal>Description</div></th></tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		Connection
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Connection
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Connection to sync
		</div>
				</td>
				</tr>
		</table>
		</p><h2>Target Definition: PackageContentListingProcessID ( Connection )</h2>
		<p>		<div class="MsoNormal" >
		Process ID for listing  package contents
		</div>
		</p><h2>Method Call: ExecuteContentListingProcess ( PackageContentListingProcessID )</h2>
		<p>		<div class="MsoNormal" >
		Process execution to list package content items
		</div>
		</p><h2>Target Definition: PackageContentListingProcess ( PackageContentListingProcessID )</h2>
		<p>		<div class="MsoNormal" >
		Process for listing  package contents
		</div>
		</p><h2>Target Definition: ContentListingResult ( PackageContentListingProcess )</h2>
		<p>		<div class="MsoNormal" >
		Content listing result
		</div>
		</p><h2>Target Definition: SyncTargetRootFolder ( Connection )</h2>
		<p>		<div class="MsoNormal" >
		Target root folder for sync-copy
		</div>
		</p><h2>Method Call: CopyContentsToSyncRoot ( ContentListingResult, SyncTargetRootFolder )</h2>
		<p>		<div class="MsoNormal" >
		Copy content listing to sync root
		</div>
		</p><h1>SynchronizeConnectionCategories (ConnectionID)</h1>
		<h2>Specifications</h2>
		<p>		<div class="MsoNormal" >
		Update both side categories of connection up-to-date with each other
		</div>
		</p><h2>Parameters</h2>
		<p><table border="1">
				<tr><th><div class=MsoNormal>Parameter</div></th><th><div class=MsoNormal>DataType</div></th><th><div class=MsoNormal>Description</div></th></tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		ConnectionID
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		string
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Connection ID
		</div>
				</td>
				</tr>
		</table>
		</p><h2>Method Call: ExecuteProcessToUpdateThisSideCategories ( ConnectionID )</h2>
		<p>		<div class="MsoNormal" >
		Execute process to update this side categories
		</div>
		</p><h2>Target Definition: Connection ( ConnectionID )</h2>
		<p>		<div class="MsoNormal" >
		Connecton that contains this categories
		</div>
		</p><h2>Method Call: SyncCategoriesWithOtherSideCategories ( Connection )</h2>
		<p>		<div class="MsoNormal" >
		Get other side categories
		</div>
		</p><p><table border="1">
				<tr><th><div class=MsoNormal>Output value field</div></th><th><div class=MsoNormal>DataType</div></th><th><div class=MsoNormal>Description</div></th></tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		OtherSideCategories
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Category[]
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Other side categories
		</div>
				</td>
				</tr>
		</table>
		</p><h2>Method Call: UpdateOtherSideCategories ( Connection, SyncCategoriesWithOtherSideCategoriesOutput )</h2>
		<p>		<div class="MsoNormal" >
		Update connection's this side categories
		</div>
		</p><h2>Method Call: StoreObject ( Connection )</h2>
		<p>		<div class="MsoNormal" >
		Store connection object
		</div>
		</p><h1>UpdateSharedDataSummaryData (Partner)</h1>
		<h2>Specifications</h2>
		<p>		<div class="MsoNormal" >
		Update shared data summary data, for given collaboration partner or for all currently shared
		</div>
		</p><h2>Parameters</h2>
		<p><table border="1">
				<tr><th><div class=MsoNormal>Parameter</div></th><th><div class=MsoNormal>DataType</div></th><th><div class=MsoNormal>Description</div></th></tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		Partner
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		INT.CollaborationPartner
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Collaboration partner (optional), for all if not given
		</div>
				</td>
				</tr>
		</table>
		</p><h2>Target Definition: IsCompleteUpdate ( Partner )</h2>
		<p>		<div class="MsoNormal" >
		Define if this is complete sync
		</div>
		</p><h2>Target Definition: CollaborationPartners ( IsCompleteUpdate, Partner )</h2>
		<p>		<div class="MsoNormal" >
		Collaboration partner(s) to sync summary data for
		</div>
		</p><h2>Method Call: UpdatePartnerSummaries ( CollaborationPartners, IsCompleteUpdate )</h2>
		<p>		<div class="MsoNormal" >
		Update individual partner summaries
		</div>
		</p><p><table border="1">
				<tr><th><div class=MsoNormal>Output value field</div></th><th><div class=MsoNormal>DataType</div></th><th><div class=MsoNormal>Description</div></th></tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		DataStatuses
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Tuple<TheBall.CORE.IContainerOwner, string>[]
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Data status item for each owner
		</div>
				</td>
				</tr>
		</table>
		</p><h2>Method Call: UpdateCompleteShareSummary ( UpdatePartnerSummariesOutput, IsCompleteUpdate )</h2>
		<p>		<div class="MsoNormal" >
		Update complete share summary
		</div>
		</p><h1>UpdateStatusSummary (Owner, UpdateTime, ChangedIDList, RemoveExpiredEntriesSeconds)</h1>
		<h2>Specifications</h2>
		<p>		<div class="MsoNormal" >
		
            Updates status summary for given owner, based on changed ID lists and time range.
            Blocks IDlist with prefixing T:-timestamp- value before respective IDs.
            If two timestamps match, the latter is added with one unit/tick/ms to make it newer.
            IDs do not appear in the list multiple times, but are always represented by the latest 
            update item. 
          
		</div>
		</p><h2>Parameters</h2>
		<p><table border="1">
				<tr><th><div class=MsoNormal>Parameter</div></th><th><div class=MsoNormal>DataType</div></th><th><div class=MsoNormal>Description</div></th></tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		Owner
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		TheBall.CORE.IContainerOwner
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Owner of the operation context
		</div>
				</td>
				</tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		UpdateTime
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		DateTime
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Starting time of changes updated in this cycle
		</div>
				</td>
				</tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		ChangedIDList
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		string[]
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Changed ID list on this cycle
		</div>
				</td>
				</tr>
				<tr>
				<td>
				<div class="MsoNormal" >
		RemoveExpiredEntriesSeconds
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		int
		</div>
				</td>
				<td>
				<div class="MsoNormal" >
		Remove entries older than amount of seconds given here
		</div>
				</td>
				</tr>
		</table>
		</p><h2>Method Call: EnsureUpdateOnStatusSummary ( Owner, UpdateTime, ChangedIDList, RemoveExpiredEntriesSeconds )</h2>
		<p>		<div class="MsoNormal" >
		Guarantee update on StatusSummary, retry if fails. Time-stamp blockify the IDs, placing ID aways highest in the graph. Remove expired blocks entirely.
		</div>
		</p></div>

</body>
</html>
		
		