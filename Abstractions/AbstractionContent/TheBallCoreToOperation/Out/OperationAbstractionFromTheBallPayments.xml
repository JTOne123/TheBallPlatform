<?xml version="1.0"?>
<OperationAbstraction xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://tempuri.org/Operation_v1_0.xsd">
  <Operations codeNamespace="TheBall.Payments">
    <Operation name="GetAccountFromStripeCustomer">
      <OperationSpec>
        <Description>Get AccountID from Stripe ID</Description>
      </OperationSpec>
      <Parameters>
        <Parameter name="StripeCustomerID" dataType="string" designDesc="Stripe Customer ID" state="implemented" />
      </Parameters>
      <Execution>
        <SequentialExecution>
          <TargetDefinition name="AllCustomerAccounts" dataType="CustomerAccount[]" designDesc="All customer accounts" state="implemented" />
          <TargetDefinition name="Account" dataType="CustomerAccount" designDesc="Stripe customer ID based account" state="implemented">
            <Parameter name="StripeCustomerID" />
            <Target name="AllCustomerAccounts" />
          </TargetDefinition>
        </SequentialExecution>
      </Execution>
      <OperationReturnValues>
        <ReturnValue name="ResultAccount" dataType="CustomerAccount" designDesc="Customer account to return" state="implemented" />
        <Target name="Account" />
      </OperationReturnValues>
    </Operation>
    <Operation name="ProcessStripeWebhook">
      <OperationSpec>
        <Description>Process Stripe launched webhook</Description>
      </OperationSpec>
      <Parameters>
        <Parameter name="JSONObject" dataType="INT.StripeWebhookData" designDesc="Stripe webhook request data" state="implemented" />
      </Parameters>
      <Execution>
        <SequentialExecution>
          <TargetDefinition name="EventID" dataType="string" designDesc="Stripe event id" state="implemented">
            <Parameter name="JSONObject" />
          </TargetDefinition>
          <TargetDefinition name="EventData" dataType="Stripe.StripeEvent" designDesc="Stripe event object" state="implemented">
            <Target name="EventID" />
          </TargetDefinition>
          <MethodExecute name="ProcessStripeEvent" asyncSupportMode="AsyncOnly" designDesc="Process Stripe event" state="implemented">
            <Target name="EventData" />
          </MethodExecute>
        </SequentialExecution>
      </Execution>
    </Operation>
    <Operation name="ValidatePlanContainingGroups">
      <OperationSpec>
        <Description>Validate that plan contains groups</Description>
      </OperationSpec>
      <Parameters>
        <Parameter name="PlanName" dataType="string" designDesc="Plan name to validate for groups" state="implemented" />
      </Parameters>
      <Execution>
        <SequentialExecution>
          <TargetDefinition name="GroupSubscriptionPlan" dataType="GroupSubscriptionPlan" designDesc="Group subscription plan" state="implemented">
            <Parameter name="PlanName" />
          </TargetDefinition>
          <MethodExecute name="ValidateGroupsInPlan" designDesc="Validate groups exist (at least one) in plan" state="implemented">
            <Target name="GroupSubscriptionPlan" />
          </MethodExecute>
        </SequentialExecution>
      </Execution>
    </Operation>
    <Operation name="CancelAccountPlan">
      <OperationSpec>
        <Description>Cancel account default plan at current period end</Description>
      </OperationSpec>
      <Parameters>
        <Parameter name="CancelParameters" dataType="INT.CancelSubscriptionParams" designDesc="Cancellation parameters" state="implemented" />
      </Parameters>
      <Execution>
        <SequentialExecution>
          <TargetDefinition name="AccountID" dataType="string" designDesc="Active account ID" state="implemented" />
          <TargetDefinition name="CustomerAccount" asyncSupportMode="AsyncOnly" dataType="CustomerAccount" designDesc="Customer account object based accountID. Created if missing" state="implemented">
            <Target name="AccountID" />
          </TargetDefinition>
          <TargetDefinition name="StripeCustomerID" dataType="string" designDesc="Stripe customer ID" state="implemented">
            <Target name="CustomerAccount" />
          </TargetDefinition>
          <MethodExecute name="RemoveCustomerPaymentSource" asyncSupportMode="AsyncOnly" designDesc="Remove current card from Stripe customer" state="implemented">
            <Target name="StripeCustomerID" />
          </MethodExecute>
          <TargetDefinition name="PlanName" dataType="string" designDesc="Plan name from the payment token" state="implemented">
            <Parameter name="CancelParameters" />
          </TargetDefinition>
          <TargetDefinition name="CustomersActiveSubscriptions" asyncSupportMode="AsyncOnly" dataType="Stripe.StripeSubscription[]" designDesc="Active Stripe subscriptions of customer" state="implemented">
            <Target name="StripeCustomerID" />
          </TargetDefinition>
          <MethodExecute name="CancelSubscriptionAtPeriodEnd" asyncSupportMode="AsyncOnly" designDesc="Cancel current subscription at period end" state="implemented">
            <Target name="StripeCustomerID" />
            <Target name="PlanName" />
            <Target name="CustomersActiveSubscriptions" />
          </MethodExecute>
          <MethodExecute name="StoreObjects" asyncSupportMode="AsyncOnly" designDesc="Store processed object(s)" state="implemented">
            <Target name="CustomerAccount" />
          </MethodExecute>
        </SequentialExecution>
      </Execution>
    </Operation>
    <Operation name="ActivateAccountPlan">
      <OperationSpec>
        <Description>Activate and pay account named plan</Description>
      </OperationSpec>
      <Parameters>
        <Parameter name="PaymentToken" dataType="INT.PaymentToken" designDesc="Obtain Stripe Token from request stream" state="implemented" />
      </Parameters>
      <Execution>
        <SequentialExecution>
          <MethodExecute name="ValidateMatchingEmail" designDesc="Validate that account active email matches payment token email" state="implemented">
            <Parameter name="PaymentToken" />
          </MethodExecute>
          <TargetDefinition name="AccountID" dataType="string" designDesc="Active account ID" state="implemented" />
          <TargetDefinition name="CustomerAccount" asyncSupportMode="AsyncOnly" dataType="CustomerAccount" designDesc="Customer account object based accountID. Created if missing" state="implemented">
            <Target name="AccountID" />
          </TargetDefinition>
          <MethodExecute name="UpdateStripeCustomerData" asyncSupportMode="AsyncOnly" designDesc="Update Stripe customer data from payment info" state="implemented">
            <Parameter name="PaymentToken" />
            <Target name="CustomerAccount" />
          </MethodExecute>
          <TargetDefinition name="StripeCustomerID" dataType="string" designDesc="Stripe customer ID" state="implemented">
            <Target name="CustomerAccount" />
          </TargetDefinition>
          <TargetDefinition name="PlanName" dataType="string" designDesc="Plan name from the payment token" state="implemented">
            <Parameter name="PaymentToken" />
          </TargetDefinition>
          <MethodExecute name="ValidateStripePlanName" asyncSupportMode="AsyncOnly" designDesc="Validate plan name from Stripe" state="implemented">
            <Target name="PlanName" />
          </MethodExecute>
          <TargetDefinition name="CustomersActiveSubscriptions" asyncSupportMode="AsyncOnly" dataType="Stripe.StripeSubscription[]" designDesc="Active Stripe subscriptions of customer" state="implemented">
            <Target name="StripeCustomerID" />
          </TargetDefinition>
          <MethodExecute name="ProcessPayment" asyncSupportMode="AsyncOnly" designDesc="Process payment to Stripe, if lacking with current plan/subscription" state="implemented">
            <Parameter name="PaymentToken" />
            <Target name="StripeCustomerID" />
            <Target name="PlanName" />
            <Target name="CustomersActiveSubscriptions" />
          </MethodExecute>
          <MethodExecute name="StoreObjects" asyncSupportMode="AsyncOnly" designDesc="Store processed object(s)" state="implemented">
            <Target name="CustomerAccount" />
          </MethodExecute>
          <OperationExecute name="GrantAccessToPaidPlan" asyncSupportMode="AsyncOnly" targetOperationName="SyncEffectivePlanAccessesToAccount" designDesc="Grant access to paid plan" state="implemented">
            <Target name="AccountID" />
          </OperationExecute>
        </SequentialExecution>
      </Execution>
    </Operation>
    <Operation name="ActivateAndPayGroupSubscriptionPlan">
      <OperationSpec>
        <Description>Activate and pay group subscription</Description>
      </OperationSpec>
      <Execution>
        <SequentialExecution>
          <TargetDefinition name="PaymentToken" dataType="INT.PaymentToken" designDesc="Obtain Stripe Token from request stream" state="implemented" />
          <MethodExecute name="ValidateMatchingEmail" designDesc="Validate that account active email matches payment token email" state="implemented">
            <Target name="PaymentToken" />
          </MethodExecute>
          <TargetDefinition name="AccountID" dataType="string" designDesc="Active account ID" state="implemented" />
          <TargetDefinition name="CustomerAccount" asyncSupportMode="AsyncOnly" dataType="CustomerAccount" designDesc="Customer account object based accountID. Created if missing" state="implemented">
            <Target name="AccountID" />
          </TargetDefinition>
          <MethodExecute name="UpdateStripeCustomerData" designDesc="Update Stripe customer data from payment info" state="implemented">
            <Target name="CustomerAccount" />
            <Target name="PaymentToken" />
          </MethodExecute>
          <TargetDefinition name="StripeCustomerID" dataType="string" designDesc="Stripe customer ID" state="implemented">
            <Target name="CustomerAccount" />
          </TargetDefinition>
          <TargetDefinition name="PlanName" dataType="string" designDesc="Plan name from the payment token" state="implemented">
            <Target name="PaymentToken" />
          </TargetDefinition>
          <OperationExecute name="ValidatePlanGroups" targetOperationName="ValidatePlanContainingGroups" designDesc="Validate plan before charging for payment" state="implemented">
            <Target name="PlanName" />
          </OperationExecute>
          <MethodExecute name="ValidateStripePlanName" designDesc="Validate plan name from Stripe" state="implemented">
            <Target name="PlanName" />
          </MethodExecute>
          <TargetDefinition name="CustomersActiveSubscriptions" dataType="Stripe.StripeSubscription[]" designDesc="Active Stripe subscriptions of customer" state="implemented">
            <Target name="StripeCustomerID" />
          </TargetDefinition>
          <TargetDefinition name="CustomersActivePlanNames" dataType="string[]" designDesc="Customer's active plan names" state="implemented">
            <Target name="CustomersActiveSubscriptions" />
          </TargetDefinition>
          <MethodExecute name="SyncCurrentCustomerActivePlans" designDesc="Sync current plans to customer account" state="implemented">
            <Target name="CustomerAccount" />
            <Target name="CustomersActivePlanNames" />
          </MethodExecute>
          <MethodExecute name="ProcessPayment" designDesc="Process payment to Stripe, if lacking with current plan/subscription" state="implemented">
            <Target name="StripeCustomerID" />
            <Target name="PlanName" />
            <Target name="CustomersActivePlanNames" />
            <Target name="PaymentToken" />
          </MethodExecute>
          <MethodExecute name="AddPlanAsActiveToCustomer" designDesc="Add plan to customer if missing (and thus payment was processed)" state="implemented">
            <Target name="CustomerAccount" />
            <Target name="PlanName" />
          </MethodExecute>
          <MethodExecute name="StoreObjects" designDesc="Store processed object(s)" state="implemented">
            <Target name="CustomerAccount" />
          </MethodExecute>
          <OperationExecute name="GrantAccessToPaidPlan" asyncSupportMode="AsyncOnly" targetOperationName="SyncEffectivePlanAccessesToAccount" designDesc="Grant access to paid plan" state="implemented">
            <Target name="AccountID" />
          </OperationExecute>
        </SequentialExecution>
      </Execution>
    </Operation>
    <Operation name="CancelGroupSubscriptionPlan">
      <OperationSpec>
        <Description>Cancel group paid subscription</Description>
      </OperationSpec>
      <Execution>
        <SequentialExecution>
          <TargetDefinition name="CancelParams" dataType="INT.CancelSubscriptionParams" designDesc="Obtain parameterse from request stream" state="implemented" />
          <TargetDefinition name="PlanName" dataType="string" designDesc="Plan Name" state="implemented">
            <Target name="CancelParams" />
          </TargetDefinition>
          <TargetDefinition name="AccountID" dataType="string" designDesc="Account ID to grant access for" state="implemented" />
          <TargetDefinition name="CustomerAccount" dataType="CustomerAccount" designDesc="Customer account object based on account ID. Must be found" state="implemented">
            <Target name="AccountID" />
          </TargetDefinition>
          <MethodExecute name="CancelSubscriptionPlan" designDesc="Cancel subscription plan on Stripe" state="implemented">
            <Target name="PlanName" />
            <Target name="CustomerAccount" />
          </MethodExecute>
          <OperationExecute name="RevokeAccessFromCanceledPlan" asyncSupportMode="AsyncOnly" targetOperationName="SyncEffectivePlanAccessesToAccount" designDesc="Revoke access to canceled plan" state="implemented">
            <Target name="AccountID" />
          </OperationExecute>
        </SequentialExecution>
      </Execution>
    </Operation>
    <Operation name="SyncEffectivePlanAccessesToAccount">
      <OperationSpec>
        <Description>Grant plan access to account</Description>
      </OperationSpec>
      <Parameters>
        <Parameter name="AccountID" dataType="string" designDesc="Account ID to grant access for" state="implemented" />
      </Parameters>
      <Execution>
        <SequentialExecution>
          <TargetDefinition name="Account" asyncSupportMode="AsyncOnly" dataType="CustomerAccount" designDesc="Customer account" state="implemented">
            <Parameter name="AccountID" />
          </TargetDefinition>
          <TargetDefinition name="CurrentPlansBeforeSync" dataType="GroupSubscriptionPlan[]" designDesc="Group subscription plans before syncing" state="implemented">
            <Target name="Account" />
          </TargetDefinition>
          <TargetDefinition name="ActivePlanStatusesFromStripe" asyncSupportMode="AsyncOnly" dataType="INT.PlanStatus[]" designDesc="Plan statuses of account - fetched from Stripe." state="implemented">
            <Target name="Account" />
          </TargetDefinition>
          <TargetDefinition name="ActivePlansFromStripe" dataType="GroupSubscriptionPlan[]" designDesc="Group subscription plans - based on Stripe accounts." state="implemented">
            <Target name="ActivePlanStatusesFromStripe" />
          </TargetDefinition>
          <TargetDefinition name="GroupsToHaveAccessTo" dataType="string[]" designDesc="Group IDs of having access to" state="implemented">
            <Target name="ActivePlansFromStripe" />
          </TargetDefinition>
          <TargetDefinition name="CurrentGroupAccesses" dataType="string[]" designDesc="Group IDs of current access" state="implemented">
            <Target name="CurrentPlansBeforeSync" />
          </TargetDefinition>
          <TargetDefinition name="GroupsToAddAccessTo" dataType="string[]" designDesc="Group IDs to add access to" state="implemented">
            <Target name="GroupsToHaveAccessTo" />
            <Target name="CurrentGroupAccesses" />
          </TargetDefinition>
          <TargetDefinition name="GroupsToRevokeAccessFrom" dataType="string[]" designDesc="Group IDs to revoke access from" state="implemented">
            <Target name="GroupsToHaveAccessTo" />
            <Target name="CurrentGroupAccesses" />
          </TargetDefinition>
          <MethodExecute name="GrantAccessToGroups" designDesc="Grant access to missing group using GrantPaidAccessToGroup operation." state="implemented">
            <Parameter name="AccountID" />
            <Target name="GroupsToAddAccessTo" />
          </MethodExecute>
          <MethodExecute name="RevokeAccessFromGroups" designDesc="Revoke access from inactive plan groups using RevokePaidAccessFromGroup operation." state="implemented">
            <Parameter name="AccountID" />
            <Target name="GroupsToRevokeAccessFrom" />
          </MethodExecute>
          <MethodExecute name="SyncCurrentStripePlansToAccount" asyncSupportMode="AsyncOnly" designDesc="Sync current Stripe plans to account" state="implemented">
            <Target name="Account" />
            <Target name="CurrentPlansBeforeSync" />
            <Target name="ActivePlansFromStripe" />
          </MethodExecute>
          <MethodExecute name="UpdateStatusesOnAccount" asyncSupportMode="AsyncOnly" designDesc="Update statuses on account interface object" state="implemented">
            <Parameter name="AccountID" />
            <Target name="ActivePlanStatusesFromStripe" />
          </MethodExecute>
        </SequentialExecution>
      </Execution>
    </Operation>
    <Operation name="GrantPaidAccessToGroup">
      <OperationSpec>
        <Description>Grant paid access to group</Description>
      </OperationSpec>
      <Parameters>
        <Parameter name="GroupID" dataType="string" designDesc="Group ID to grant access to" state="implemented" />
        <Parameter name="AccountID" dataType="string" designDesc="Account ID to grant access for" state="implemented" />
      </Parameters>
      <Execution>
        <SequentialExecution>
          <MethodExecute name="AddAccountToGroup" designDesc="Add account to group by inviting and confirming. Grant as visitor role." state="implemented">
            <Parameter name="GroupID" />
            <Parameter name="AccountID" />
          </MethodExecute>
        </SequentialExecution>
      </Execution>
    </Operation>
    <Operation name="RevokePaidAccessFromGroup">
      <OperationSpec>
        <Description>Revoke paid access to group</Description>
      </OperationSpec>
      <Parameters>
        <Parameter name="GroupID" dataType="string" designDesc="Group ID to revoke access from" state="implemented" />
        <Parameter name="AccountID" dataType="string" designDesc="Account ID to revoke access from" state="implemented" />
      </Parameters>
      <Execution>
        <SequentialExecution>
          <MethodExecute name="RemoveAccountFromGroup" designDesc="Remove account from group." state="implemented">
            <Parameter name="GroupID" />
            <Parameter name="AccountID" />
          </MethodExecute>
        </SequentialExecution>
      </Execution>
    </Operation>
    <Operation name="ProcessPayment">
      <OperationSpec>
        <Description>Process Stripe payment</Description>
      </OperationSpec>
      <Execution>
        <SequentialExecution>
          <TargetDefinition name="PaymentToken" dataType="INT.PaymentToken" designDesc="Obtain Stripe Token from request stream" state="implemented" />
          <MethodExecute name="ValidateMatchingEmail" designDesc="Validate that account active email matches payment token email" state="implemented">
            <Target name="PaymentToken" />
          </MethodExecute>
          <TargetDefinition name="CustomerAccount" dataType="CustomerAccount" designDesc="Customer account object based on active account ID. Created if missing" state="implemented" />
          <MethodExecute name="ProcessPayment" designDesc="Process payment to Stripe" state="implemented">
            <Target name="PaymentToken" />
            <Target name="CustomerAccount" />
          </MethodExecute>
        </SequentialExecution>
      </Execution>
    </Operation>
    <Operation name="FetchCustomersFromStripe">
      <OperationSpec>
        <Description>Fetch customers from Stripe</Description>
      </OperationSpec>
      <Parameters>
        <Parameter name="GroupID" dataType="string" designDesc="Group ID to fetch the customers to" state="implemented" />
      </Parameters>
      <Execution>
        <SequentialExecution>
          <TargetDefinition name="Owner" dataType="TheBall.CORE.IContainerOwner" designDesc="Validate group ID as valid Payments managing group" state="implemented">
            <Parameter name="GroupID" />
          </TargetDefinition>
          <TargetDefinition name="StripeCustomers" dataType="Stripe.StripeCustomer[]" designDesc="Stripe customers from service call" state="implemented" />
          <TargetDefinition name="CurrentCustomers" dataType="CustomerAccountCollection" designDesc="Current customer collection" state="implemented">
            <Target name="Owner" />
          </TargetDefinition>
          <TargetDefinition name="NewCustomersToCreate" dataType="CustomerAccount[]" designDesc="New customers to create" state="implemented">
            <Target name="Owner" />
            <Target name="StripeCustomers" />
            <Target name="CurrentCustomers" />
          </TargetDefinition>
          <MethodExecute name="StoreObjects" designDesc="Store new customers" state="implemented">
            <Target name="Owner" />
            <Target name="NewCustomersToCreate" />
          </MethodExecute>
        </SequentialExecution>
      </Execution>
    </Operation>
    <Operation name="AssociatePaymentToGroup">
      <OperationSpec>
        <Description>Associate payment to group</Description>
      </OperationSpec>
      <Parameters>
        <Parameter name="GroupID" dataType="string" designDesc="ID of the group to associate the payment to" state="implemented" />
        <Parameter name="PaymentID" dataType="string" designDesc="ID of the payment to connect to group" state="implemented" />
      </Parameters>
      <Execution>
        <SequentialExecution>
          <TargetDefinition name="GroupAsOwner" dataType="TheBall.CORE.IContainerOwner" designDesc="Group as owner" state="implemented">
            <Parameter name="GroupID" />
          </TargetDefinition>
        </SequentialExecution>
      </Execution>
    </Operation>
  </Operations>
</OperationAbstraction>