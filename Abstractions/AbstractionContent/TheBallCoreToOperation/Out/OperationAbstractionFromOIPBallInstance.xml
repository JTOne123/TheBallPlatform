<?xml version="1.0"?>
<OperationAbstraction xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://tempuri.org/Operation_v1_0.xsd">
  <Operations codeNamespace="AaltoGlobalImpact.OIP">
    <Operation name="ListConnectionPackageContents">
      <OperationSpec>
        <Description>List connection package contents for process</Description>
      </OperationSpec>
      <Parameters>
        <Parameter name="Process" dataType="TheBall.CORE.Process" designDesc="Process object to perform the listing to" state="implemented" />
      </Parameters>
      <Execution>
        <SequentialExecution>
          <TargetDefinition name="ConnectionID" dataType="string" designDesc="Connection ID from process" state="implemented">
            <Parameter name="Process" />
          </TargetDefinition>
          <OperationExecute name="CallPickCategorizedContentConnection" asyncSupportMode="AsyncOnly" targetOperationName="PickCategorizedContentToConnection" designDesc="Call operation for picking content" state="implemented">
            <Target name="ConnectionID" />
            <ReturnValue name="ContentLocations" dataType="string[]" designDesc="Content locations" state="implemented" />
          </OperationExecute>
          <MethodExecute name="SetContentsAsProcessOutput" asyncSupportMode="AsyncOnly" designDesc="Set contents as process output as semantic full names: ContentLocation and ContentMD5" state="implemented">
            <Parameter name="Process" />
            <Target name="CallPickCategorizedContentConnectionOutput" />
          </MethodExecute>
        </SequentialExecution>
      </Execution>
    </Operation>
    <Operation name="PickCategorizedContentToConnection">
      <OperationSpec>
        <Description>
            Package categorized content to connection domain-neutralized transfer package
          </Description>
      </OperationSpec>
      <Parameters>
        <Parameter name="ConnectionID" dataType="string" designDesc="TheBall.Interface.Connection ID" state="implemented" />
      </Parameters>
      <Execution>
        <SequentialExecution>
          <TargetDefinition name="Connection" asyncSupportMode="AsyncOnly" dataType="TheBall.Interface.Connection" designDesc="Connection item" state="implemented">
            <Parameter name="ConnectionID" />
          </TargetDefinition>
          <TargetDefinition name="CategoriesToTransfer" asyncSupportMode="AsyncOnly" dataType="Dictionary&lt;string, Category&gt;" designDesc="Categories to transfer based on Connection ThisSideCategories" state="implemented">
            <Target name="Connection" />
          </TargetDefinition>
          <TargetDefinition name="ContentToTransferLocations" asyncSupportMode="AsyncOnly" dataType="string[]" designDesc="Content to transfer based on categories to transfer" state="implemented">
            <Target name="CategoriesToTransfer" />
          </TargetDefinition>
        </SequentialExecution>
      </Execution>
      <OperationReturnValues>
        <ReturnValue name="ContentLocations" dataType="string[]" designDesc="Return value of content to package" state="implemented" />
        <Target name="ContentToTransferLocations" />
      </OperationReturnValues>
    </Operation>
    <Operation name="PublishGroupContentToWww">
      <OperationSpec>
        <Description />
      </OperationSpec>
      <Parameters>
        <Parameter name="GroupID" dataType="string" designDesc="Group ID of group being published" state="designApproved" />
        <Parameter name="UseWorker" dataType="bool" designDesc="Use worker as processor" state="designApproved" />
      </Parameters>
      <Execution>
        <SequentialExecution>
          <TargetDefinition name="CurrentContainerName" dataType="string" designDesc="Group's content container name" state="designApproved">
            <Parameter name="GroupID" />
          </TargetDefinition>
          <TargetDefinition name="WwwContainerName" dataType="string" designDesc="Group's www container name" state="designApproved">
            <Parameter name="GroupID" />
          </TargetDefinition>
          <MethodExecute name="PublishGroupContentToWww" designDesc="Do the update page" state="underDesign">
            <Parameter name="GroupID" />
            <Parameter name="UseWorker" />
            <Target name="CurrentContainerName" />
            <Target name="WwwContainerName" />
          </MethodExecute>
        </SequentialExecution>
      </Execution>
    </Operation>
    <Operation name="CreateAdditionalMediaFormats">
      <OperationSpec>
        <Description />
      </OperationSpec>
      <Parameters>
        <Parameter name="MasterRelativeLocation" dataType="string" designDesc="Relative location of original" state="underDesign" />
      </Parameters>
      <Execution>
        <SequentialExecution>
          <TargetDefinition name="BitmapData" asyncSupportMode="AsyncOnly" dataType="System.Drawing.Bitmap" designDesc="Bitmap image if existing" state="designApproved">
            <Parameter name="MasterRelativeLocation" />
          </TargetDefinition>
          <TargetDefinition name="VideoData" dataType="object" designDesc="Videodata" state="designApproved">
            <Parameter name="MasterRelativeLocation" />
          </TargetDefinition>
          <MethodExecute name="CreateImageMediaFormats" designDesc="Create various media formats (if bitmap is not null)" state="underDesign">
            <Parameter name="MasterRelativeLocation" />
            <Target name="BitmapData" />
          </MethodExecute>
          <MethodExecute name="CreateVideoMediaFormats" designDesc="Create various video media formats (if object is not null)" state="designApproved">
            <Parameter name="MasterRelativeLocation" />
            <Target name="VideoData" />
          </MethodExecute>
        </SequentialExecution>
      </Execution>
    </Operation>
    <Operation name="ClearAdditionalMediaFormats">
      <OperationSpec>
        <Description />
      </OperationSpec>
      <Parameters>
        <Parameter name="MasterRelativeLocation" dataType="string" designDesc="Relative location of original" state="underDesign" />
      </Parameters>
      <Execution>
        <SequentialExecution>
          <MethodExecute name="ClearImageMediaFormats" designDesc="Clear various image media formats" state="underDesign">
            <Parameter name="MasterRelativeLocation" />
          </MethodExecute>
        </SequentialExecution>
      </Execution>
    </Operation>
    <Operation name="UpdatePublicationInfo">
      <OperationSpec>
        <Description>Update publication info in the account/group container</Description>
      </OperationSpec>
      <Parameters>
        <Parameter name="Owner" dataType="TheBall.CORE.IContainerOwner" designDesc="Data owner" state="designApproved" />
        <Parameter name="ContainerName" dataType="string" designDesc="Container name for publication" state="designApproved" />
      </Parameters>
      <Execution>
        <SequentialExecution>
          <TargetDefinition name="PublishInfo" dataType="WebPublishInfo" designDesc="Web publish info to update as 'default'. Create if missing" state="designApproved">
            <Parameter name="Owner" />
            <Parameter name="ContainerName" />
          </TargetDefinition>
        </SequentialExecution>
      </Execution>
    </Operation>
    <Operation name="CleanOldPublications">
      <OperationSpec>
        <Description>Cleans up old publications. All that are older than 2 days and not among 5 latest are cleaned up. For 5 latest later than  </Description>
      </OperationSpec>
      <Parameters>
        <Parameter name="Owner" dataType="TheBall.CORE.IContainerOwner" designDesc="Data owner" state="designApproved" />
      </Parameters>
      <Execution>
        <SequentialExecution>
          <TargetDefinition name="PublishInfo" dataType="WebPublishInfo" designDesc="Web publish info to update as 'default'. Create if missing" state="designApproved">
            <Parameter name="Owner" />
          </TargetDefinition>
          <MethodExecute name="ClearPublications" designDesc="Clear publications with given operation criteria" state="designApproved">
            <Target name="PublishInfo" />
          </MethodExecute>
        </SequentialExecution>
      </Execution>
    </Operation>
    <Operation name="SetCategoryContentRanking">
      <OperationSpec>
        <Description>
            Set category content ranking from request content JSON
          </Description>
      </OperationSpec>
      <Execution>
        <SequentialExecution>
          <TargetDefinition name="RankingData" dataType="INT.CategoryChildRanking" designDesc="Ranking data deserialized from JSON" state="implemented" />
          <TargetDefinition name="CategoryID" dataType="string" designDesc="Current category ID" state="implemented">
            <Target name="RankingData" />
          </TargetDefinition>
          <TargetDefinition name="ContentRankingCollection" asyncSupportMode="AsyncOnly" dataType="ContentCategoryRankCollection" designDesc="Content ranking collection" state="implemented" />
          <TargetDefinition name="CategoryRankingCollection" dataType="ContentCategoryRank[]" designDesc="Filter content ranks by input category" state="implemented">
            <Target name="CategoryID" />
            <Target name="ContentRankingCollection" />
          </TargetDefinition>
          <MethodExecute name="SyncRankingItemsToRankingData" asyncSupportMode="AsyncOnly" designDesc="Sync existing ranking items to incoming ranking data" state="implemented">
            <Target name="RankingData" />
            <Target name="CategoryRankingCollection" />
          </MethodExecute>
        </SequentialExecution>
      </Execution>
    </Operation>
    <Operation name="SetCategoryHierarchyAndOrderInNodeSummary">
      <OperationSpec>
        <Description>
            Sets category hierarchy from request content JSON
          </Description>
      </OperationSpec>
      <Execution>
        <SequentialExecution>
          <TargetDefinition name="Hierarchy" dataType="INT.ParentToChildren[]" designDesc="Hierarchy structure deserialized from JSON" state="implemented" />
          <MethodExecute name="SetParentCategories" asyncSupportMode="AsyncOnly" designDesc="Set parent categories, retry execution for http-async failures" state="implemented">
            <Target name="Hierarchy" />
          </MethodExecute>
          <TargetDefinition name="NodeSummaryContainer" asyncSupportMode="AsyncOnly" dataType="NodeSummaryContainer" designDesc="NodeSummaryContainer" state="implemented" />
          <MethodExecute name="SetCategoryOrder" designDesc="Set order of categories in web content summary" state="implemented">
            <Target name="Hierarchy" />
            <Target name="NodeSummaryContainer" />
          </MethodExecute>
          <MethodExecute name="StoreObject" asyncSupportMode="AsyncOnly" designDesc="Store modified objects" state="implemented">
            <Target name="NodeSummaryContainer" />
          </MethodExecute>
        </SequentialExecution>
      </Execution>
    </Operation>
    <Operation name="ProcessConnectionReceivedData">
      <OperationSpec>
        <Description>
            Process connection received data with given process.
          </Description>
      </OperationSpec>
      <Parameters>
        <Parameter name="Process" dataType="TheBall.CORE.Process" designDesc="Process that has ConnectionID as initial parameter" state="implemented" />
      </Parameters>
      <Execution>
        <SequentialExecution>
          <TargetDefinition name="Connection" asyncSupportMode="AsyncOnly" dataType="TheBall.Interface.Connection" designDesc="Connecton that has received the contents" state="implemented">
            <Parameter name="Process" />
          </TargetDefinition>
          <TargetDefinition name="SourceContentRoot" dataType="string" designDesc="Source content tree root. Obtained through Connection/DeviceMemberShipID" state="implemented">
            <Target name="Connection" />
          </TargetDefinition>
          <TargetDefinition name="TargetContentRoot" dataType="string" designDesc="Target content root folder. Defined as root for the current owner." state="implemented" />
          <TargetDefinition name="CategoryMap" dataType="Dictionary&lt;string, string&gt;" designDesc="Category mapping dictionary from source to target" state="implemented">
            <Target name="Connection" />
          </TargetDefinition>
          <MethodExecute name="CallMigrationSupport" designDesc="Call migration support to perform migration" state="implemented">
            <Parameter name="Process" />
            <Target name="SourceContentRoot" />
            <Target name="TargetContentRoot" />
            <Target name="CategoryMap" />
          </MethodExecute>
        </SequentialExecution>
      </Execution>
    </Operation>
    <Operation name="UpdateConnectionThisSideCategories">
      <OperationSpec>
        <Description>Update this side categories of connection</Description>
      </OperationSpec>
      <Parameters>
        <Parameter name="Process" dataType="TheBall.CORE.Process" designDesc="Process that has ConnectionID as initial parameter" state="implemented" />
      </Parameters>
      <Execution>
        <SequentialExecution>
          <TargetDefinition name="CurrentCategoryContainer" asyncSupportMode="AsyncOnly" dataType="NodeSummaryContainer" designDesc="Current category container" state="implemented" />
          <TargetDefinition name="ActiveCategories" dataType="Category[]" designDesc="Current active categories, in order, with proper parent IDs listed" state="implemented">
            <Target name="CurrentCategoryContainer" />
          </TargetDefinition>
          <TargetDefinition name="Connection" asyncSupportMode="AsyncOnly" dataType="TheBall.Interface.Connection" designDesc="Connecton that contains this categories" state="implemented">
            <Parameter name="Process" />
          </TargetDefinition>
          <MethodExecute name="UpdateThisSideCategories" designDesc="Update connection's this side categories" state="implemented">
            <Target name="Connection" />
            <Target name="ActiveCategories" />
          </MethodExecute>
          <MethodExecute name="StoreObject" asyncSupportMode="AsyncOnly" designDesc="Store connection object" state="implemented">
            <Target name="Connection" />
          </MethodExecute>
        </SequentialExecution>
      </Execution>
    </Operation>
    <Operation name="SetGroupAsDefaultForAccount">
      <OperationSpec>
        <Description>Make group as default group for account</Description>
      </OperationSpec>
      <Parameters>
        <Parameter name="GroupID" dataType="string" designDesc="Group ID to make as default. If Null" state="implemented" />
      </Parameters>
      <Execution>
        <SequentialExecution>
          <TargetDefinition name="AccountContainer" asyncSupportMode="AsyncOnly" dataType="AccountContainer" designDesc="Account container to store the default group" state="implemented" />
          <TargetDefinition name="RedirectFromFolderBlobName" dataType="string" designDesc="Owner RedirectFromFolder.red blob name" state="implemented" />
          <MethodExecute name="SetDefaultGroupValue" designDesc="Set default group value to container" state="implemented">
            <Parameter name="GroupID" />
            <Target name="AccountContainer" />
          </MethodExecute>
          <MethodExecute name="StoreObject" asyncSupportMode="AsyncOnly" designDesc="Store object" state="implemented">
            <Target name="AccountContainer" />
          </MethodExecute>
          <MethodExecute name="SetAccountRedirectFileToGroup" asyncSupportMode="AsyncOnly" designDesc="Set account RedirectFromFolder.red to point to given group" state="implemented">
            <Parameter name="GroupID" />
            <Target name="RedirectFromFolderBlobName" />
          </MethodExecute>
        </SequentialExecution>
      </Execution>
    </Operation>
    <Operation name="ClearDefaultGroupFromAccount">
      <OperationSpec>
        <Description>Make group as default group for account</Description>
      </OperationSpec>
      <Execution>
        <SequentialExecution>
          <TargetDefinition name="AccountContainer" asyncSupportMode="AsyncOnly" dataType="AccountContainer" designDesc="Account container to store the default group" state="implemented" />
          <TargetDefinition name="RedirectFromFolderBlobName" dataType="string" designDesc="Owner RedirectFromFolder.red blob name" state="implemented" />
          <MethodExecute name="ClearDefaultGroupValue" designDesc="Clear default group value from container" state="implemented">
            <Target name="AccountContainer" />
          </MethodExecute>
          <MethodExecute name="StoreObject" asyncSupportMode="AsyncOnly" designDesc="Store object" state="implemented">
            <Target name="AccountContainer" />
          </MethodExecute>
          <MethodExecute name="RemoveAccountRedirectFile" asyncSupportMode="AsyncOnly" designDesc="Remove account RedirectFromFolder.red from pointing to group" state="implemented">
            <Target name="RedirectFromFolderBlobName" />
          </MethodExecute>
        </SequentialExecution>
      </Execution>
    </Operation>
  </Operations>
</OperationAbstraction>