<?xml version="1.0"?>
<OperationAbstraction xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://tempuri.org/Operation_v1_0.xsd">
  <Operations codeNamespace="TheBall.Interface">
    <Operation name="UpdateConnectionThisSideMD5List">
      <OperationSpec>
        <Description>Update connection this side MD5 list. Takes into account whether this is receiving or sending side.
          Note! The Connection object is not stored during the processing</Description>
      </OperationSpec>
      <Parameters>
        <Parameter name="Connection" dataType="Connection" designDesc="Connection object." state="implemented" />
      </Parameters>
      <Execution>
        <SequentialExecution>
          <TargetDefinition name="RootPathForMD5List" dataType="string" designDesc="Root path for MD5 list" state="implemented">
            <Parameter name="Connection" />
          </TargetDefinition>
          <MethodExecute name="RetrieveMD5ListFromPathPrefix" designDesc="Retrieve MD5 sorted alphabetically" state="implemented">
            <Target name="RootPathForMD5List" />
            <ReturnValue name="MD5List" dataType="string[]" designDesc="MD5 list of contents under the folder" state="implemented" />
          </MethodExecute>
        </SequentialExecution>
      </Execution>
    </Operation>
    <Operation name="ExecuteRemoteCalledConnectionOperation">
      <OperationSpec>
        <Description>
            Perform connection operation with parameters obtained from inputstream and outputing to outputstream. (De)Serializing done to ConnectionCommunicationData object.
          </Description>
      </OperationSpec>
      <Parameters>
        <Parameter name="InputStream" dataType="System.IO.Stream" designDesc="Input stream for parameter serialization" state="implemented" />
        <Parameter name="OutputStream" dataType="System.IO.Stream" designDesc="Output stream for connection response output" state="implemented" />
      </Parameters>
      <Execution>
        <SequentialExecution>
          <TargetDefinition name="ConnectionCommunicationData" dataType="ConnectionCommunicationData" designDesc="Connection communicating data obtained from DeviceContext" state="implemented">
            <Parameter name="InputStream" />
          </TargetDefinition>
          <MethodExecute name="PerformOperation" designDesc="Perform operation based on communication data request" state="implemented">
            <Target name="ConnectionCommunicationData" />
          </MethodExecute>
          <MethodExecute name="SerializeCommunicationDataToOutput" designDesc="Serialize communication data to output" state="implemented">
            <Parameter name="OutputStream" />
            <Target name="ConnectionCommunicationData" />
          </MethodExecute>
        </SequentialExecution>
      </Execution>
    </Operation>
    <Operation name="PublishCollaborationContentOverConnection">
      <OperationSpec>
        <Description>Publish categorized content over connection</Description>
      </OperationSpec>
      <Parameters>
        <Parameter name="ConnectionID" dataType="string" designDesc="Connection ID" state="implemented" />
      </Parameters>
      <Execution>
        <SequentialExecution>
          <TargetDefinition name="Connection" dataType="Connection" designDesc="Connection object" state="implemented">
            <Parameter name="ConnectionID" />
          </TargetDefinition>
          <MethodExecute name="UpdateOtherSideMD5List" designDesc="Call remote side to retrieve its MD5 list of contents" state="implemented">
            <Target name="Connection" />
          </MethodExecute>
          <MethodExecute name="UpdateThisSideMD5List" designDesc="Update this side MD5 list" state="implemented">
            <Target name="Connection" />
          </MethodExecute>
          <MethodExecute name="StoreObject" designDesc="Store connection object" state="implemented">
            <Target name="Connection" />
          </MethodExecute>
          <OperationExecute name="CallPackageAndPushCollaborationContent" targetOperationName="PackageAndPushCollaborationContent" designDesc="Call actual package and push" state="implemented">
            <Parameter name="ConnectionID" />
          </OperationExecute>
          <MethodExecute name="CallOtherSideProcessingForPushedContent" designDesc="Call other side processing for pushed content" state="implemented">
            <Target name="Connection" />
          </MethodExecute>
        </SequentialExecution>
      </Execution>
    </Operation>
    <Operation name="SetCategoryLinkingForConnection">
      <OperationSpec>
        <Description>Sets category linking for connection</Description>
      </OperationSpec>
      <Execution>
        <SequentialExecution>
          <TargetDefinition name="CategoryLinkingParameters" dataType="CategoryLinkParameters" designDesc="Deserialized operation parameters" state="implemented" />
          <TargetDefinition name="Connection" dataType="Connection" designDesc="Connection to set the linking info to" state="implemented">
            <Target name="CategoryLinkingParameters" />
          </TargetDefinition>
          <MethodExecute name="SetConnectionLinkingData" designDesc="Set connection linking data" state="implemented">
            <Target name="Connection" />
            <Target name="CategoryLinkingParameters" />
          </MethodExecute>
          <MethodExecute name="StoreObject" designDesc="Store objects" state="implemented">
            <Target name="Connection" />
          </MethodExecute>
        </SequentialExecution>
      </Execution>
    </Operation>
    <Operation name="PackageAndPushCollaborationContent">
      <OperationSpec>
        <Description>Push collaboration content to given connection ID</Description>
      </OperationSpec>
      <Parameters>
        <Parameter name="ConnectionID" dataType="string" designDesc="Connection ID to push the content with" state="implemented" />
      </Parameters>
      <Execution>
        <SequentialExecution>
          <TargetDefinition name="Connection" dataType="Connection" designDesc="Connection object" state="implemented">
            <Parameter name="ConnectionID" />
          </TargetDefinition>
          <TargetDefinition name="PackageContentListingOperationName" dataType="string" designDesc="Operation name for package listing operation" state="implemented">
            <Target name="Connection" />
          </TargetDefinition>
          <MethodExecute name="DynamicPackageListingOperation" designDesc="Dynamic operation execution of content packaging operation" state="implemented">
            <Parameter name="ConnectionID" />
            <Target name="PackageContentListingOperationName" />
            <ReturnValue name="DynamicPackageListingResult" dataType="string[]" designDesc="List of objects to package" state="implemented" />
          </MethodExecute>
          <TargetDefinition name="TransferPackage" dataType="TransferPackage" designDesc="Transferpackage that identifies the data to package and send" state="implemented">
            <Parameter name="ConnectionID" />
          </TargetDefinition>
          <MethodExecute name="AddTransferPackageToConnection" designDesc="Adds transfer package to outgoing packages of connection" state="implemented">
            <Target name="Connection" />
            <Target name="TransferPackage" />
          </MethodExecute>
          <MethodExecute name="StoreObject" designDesc="Stores objects" state="implemented">
            <Target name="Connection" />
          </MethodExecute>
          <MethodExecute name="PackageTransferPackageContent" designDesc="Package contents for transfer package" state="implemented">
            <Target name="TransferPackage" />
            <Target name="DynamicPackageListingOperationOutput" />
            <ReturnValue name="OutputContentName" dataType="string[]" designDesc="Output content blob names" state="implemented" />
          </MethodExecute>
          <MethodExecute name="SendTransferPackageContent" designDesc="Send package contents through connection" state="implemented">
            <Target name="Connection" />
            <Target name="TransferPackage" />
            <Target name="PackageTransferPackageContentOutput" />
          </MethodExecute>
          <MethodExecute name="SetTransferPackageAsProcessed" designDesc="Set transfer package as prosessed state" state="implemented">
            <Target name="TransferPackage" />
          </MethodExecute>
          <MethodExecute name="StoreObjectComplete" designDesc="Stores connection with processed transferpackage" state="implemented">
            <Target name="Connection" />
            <Target name="TransferPackage" />
          </MethodExecute>
        </SequentialExecution>
      </Execution>
    </Operation>
    <Operation name="ExecuteOperation">
      <OperationSpec>
        <Description>Execute given operation</Description>
      </OperationSpec>
      <Parameters>
        <Parameter name="OwnerLocation" dataType="string" designDesc="Owner location of the operation context" state="designApproved" />
        <Parameter name="OperationDomain" dataType="string" designDesc="Operation namespace" state="designApproved" />
        <Parameter name="OperationName" dataType="string" designDesc="Operation name" state="designApproved" />
        <Parameter name="OperationParameters" dataType="byte[]" designDesc="Operation parameters binary serialized." state="designApproved" />
        <Parameter name="CallerProvidedInfo" dataType="string" designDesc="Caller provided information about the call. For caller specific purposes." state="designApproved" />
      </Parameters>
      <Execution>
        <SequentialExecution />
      </Execution>
    </Operation>
    <Operation name="UpdateStatusSummary">
      <OperationSpec>
        <Description>
            Updates status summary for given owner, based on changed ID lists and time range.
            Blocks IDlist with prefixing T:-timestamp- value before respective IDs.
            If two timestamps match, the latter is added with one unit/tick/ms to make it newer.
            IDs do not appear in the list multiple times, but are always represented by the latest 
            update item. 
          </Description>
      </OperationSpec>
      <Parameters>
        <Parameter name="Owner" dataType="TheBall.CORE.IContainerOwner" designDesc="Owner of the operation context" state="implemented" />
        <Parameter name="UpdateTime" dataType="DateTime" designDesc="Starting time of changes updated in this cycle" state="implemented" />
        <Parameter name="ChangedIDList" dataType="string[]" designDesc="Changed ID list on this cycle" state="implemented" />
        <Parameter name="RemoveExpiredEntriesSeconds" dataType="int" designDesc="Remove entries older than amount of seconds given here" state="implemented" />
      </Parameters>
      <Execution>
        <SequentialExecution>
          <MethodExecute name="EnsureUpdateOnStatusSummary" designDesc="Guarantee update on StatusSummary, retry if fails. Time-stamp blockify the IDs, placing ID aways highest in the graph. Remove expired blocks entirely." state="implemented">
            <Parameter name="Owner" />
            <Parameter name="UpdateTime" />
            <Parameter name="ChangedIDList" />
            <Parameter name="RemoveExpiredEntriesSeconds" />
          </MethodExecute>
        </SequentialExecution>
      </Execution>
    </Operation>
    <Operation name="DeleteConnectionWithStructures">
      <OperationSpec>
        <Description>
            Delete connection with its structures and transfer storage contents
          </Description>
      </OperationSpec>
      <Parameters>
        <Parameter name="ConnectionID" dataType="string" designDesc="Connection ID" state="implemented" />
        <Parameter name="IsLaunchedByRemoteDelete" dataType="bool" designDesc="Is the deletion launched by remote connection" state="implemented" />
      </Parameters>
      <Execution>
        <SequentialExecution>
          <TargetDefinition name="Connection" dataType="Connection" designDesc="Connection object" state="implemented">
            <Parameter name="ConnectionID" />
          </TargetDefinition>
          <MethodExecute name="CallDeleteOnOtherEndAndDeleteOtherEndDevice" designDesc="Call delete on other end - if this is active party. Otherwise delete device associated with this connection. Ignore failure regardless" state="implemented">
            <Parameter name="IsLaunchedByRemoteDelete" />
            <Target name="Connection" />
          </MethodExecute>
          <MethodExecute name="DeleteConnectionIntermediateContent" designDesc="Delete connection's intermediate content, including transfer connect" state="implemented">
            <Target name="Connection" />
          </MethodExecute>
          <MethodExecute name="DeleteConnectionProcesses" designDesc="Delete connection attached processes" state="implemented">
            <Target name="Connection" />
          </MethodExecute>
          <MethodExecute name="DeleteConnectionObject" designDesc="Delete the actual connection object" state="implemented">
            <Target name="Connection" />
          </MethodExecute>
        </SequentialExecution>
      </Execution>
    </Operation>
    <Operation name="InitiateIntegrationConnection">
      <OperationSpec>
        <Description>
            Initiates integration connection
          </Description>
      </OperationSpec>
      <Parameters>
        <Parameter name="Description" dataType="string" designDesc="Description of the connection" state="implemented" />
        <Parameter name="TargetBallHostName" dataType="string" designDesc="Target Ball instance host name" state="implemented" />
        <Parameter name="TargetGroupID" dataType="string" designDesc="Target group ID for the connection" state="implemented" />
      </Parameters>
      <Execution>
        <SequentialExecution>
          <TargetDefinition name="Connection" dataType="Connection" designDesc="Creates connection" state="implemented">
            <Parameter name="Description" />
          </TargetDefinition>
          <TargetDefinition name="DeviceForConnection" dataType="TheBall.CORE.AuthenticatedAsActiveDevice" designDesc="Device for the connection" state="implemented">
            <Parameter name="Description" />
            <Parameter name="TargetBallHostName" />
            <Parameter name="TargetGroupID" />
            <Target name="Connection" />
          </TargetDefinition>
          <MethodExecute name="StoreConnection" designDesc="Store connection object" state="implemented">
            <Target name="Connection" />
          </MethodExecute>
          <MethodExecute name="NegotiateDeviceConnection" designDesc="Negotiate device connection" state="implemented">
            <Target name="DeviceForConnection" />
          </MethodExecute>
        </SequentialExecution>
      </Execution>
    </Operation>
    <Operation name="ExecuteConnectionProcess">
      <OperationSpec>
        <Description>
            Executes connection's bound process by its name.
          </Description>
      </OperationSpec>
      <Parameters>
        <Parameter name="ConnectionID" dataType="string" designDesc="Connection ID" state="implemented" />
        <Parameter name="ConnectionProcessToExecute" dataType="string" designDesc="Pre-defined list of hardcoded names to match the connection process fields" state="implemented" />
      </Parameters>
      <Execution>
        <SequentialExecution>
          <TargetDefinition name="Connection" dataType="Connection" designDesc="Connection object" state="implemented">
            <Parameter name="ConnectionID" />
          </TargetDefinition>
          <MethodExecute name="PerformProcessExecution" designDesc="Execute the defined process" state="implemented">
            <Parameter name="ConnectionProcessToExecute" />
            <Target name="Connection" />
          </MethodExecute>
        </SequentialExecution>
      </Execution>
    </Operation>
    <Operation name="FinalizeConnectionAfterGroupAuthorization">
      <OperationSpec>
        <Description>
            Finalizes connection with negotiating connection ID pairs between participants.
          </Description>
      </OperationSpec>
      <Parameters>
        <Parameter name="ConnectionID" dataType="string" designDesc="Connection ID" state="implemented" />
      </Parameters>
      <Execution>
        <SequentialExecution>
          <TargetDefinition name="Connection" dataType="Connection" designDesc="Connection object for finalization" state="implemented">
            <Parameter name="ConnectionID" />
          </TargetDefinition>
          <TargetDefinition name="ConnectionCommunicationData" dataType="ConnectionCommunicationData" designDesc="Connection finalizing data model (UI/JSON serializable)" state="implemented">
            <Target name="Connection" />
          </TargetDefinition>
          <MethodExecute name="CallDeviceServiceForFinalizing" designDesc="Call device based service for finalizing" state="implemented">
            <Target name="Connection" />
            <Target name="ConnectionCommunicationData" />
          </MethodExecute>
          <MethodExecute name="UpdateConnectionWithCommunicationData" designDesc="Update received information to the connection" state="implemented">
            <Target name="Connection" />
            <Target name="ConnectionCommunicationData" />
          </MethodExecute>
          <MethodExecute name="StoreObject" designDesc="Store connection object" state="implemented">
            <Target name="Connection" />
          </MethodExecute>
          <OperationExecute name="CallCreateConnectionStructures" targetOperationName="CreateConnectionStructures" designDesc="Create connection structures" state="implemented">
            <Target name="Connection" />
          </OperationExecute>
        </SequentialExecution>
      </Execution>
    </Operation>
    <Operation name="CreateConnectionStructures">
      <OperationSpec>
        <Description>
            Create receiving connection structures. Called by active part after connection is authorized.
          </Description>
      </OperationSpec>
      <Parameters>
        <Parameter name="ConnectionID" dataType="string" designDesc="Connection communication data" state="implemented" />
      </Parameters>
      <Execution>
        <SequentialExecution>
          <TargetDefinition name="Connection" dataType="Connection" designDesc="This side connection entry" state="implemented">
            <Parameter name="ConnectionID" />
          </TargetDefinition>
          <TargetDefinition name="ProcessToListPackageContents" dataType="TheBall.CORE.Process" designDesc="Process to list package contents" state="implemented">
            <Target name="Connection" />
          </TargetDefinition>
          <TargetDefinition name="ProcessToProcessReceivedData" dataType="TheBall.CORE.Process" designDesc="Process to process received data" state="implemented">
            <Target name="Connection" />
          </TargetDefinition>
          <TargetDefinition name="ProcessToUpdateThisSideCategories" dataType="TheBall.CORE.Process" designDesc="Process to update this side categories" state="implemented">
            <Target name="Connection" />
          </TargetDefinition>
          <MethodExecute name="SetConnectionProcesses" designDesc="Set connection processes" state="implemented">
            <Target name="Connection" />
            <Target name="ProcessToListPackageContents" />
            <Target name="ProcessToProcessReceivedData" />
            <Target name="ProcessToUpdateThisSideCategories" />
          </MethodExecute>
          <MethodExecute name="StoreObject" designDesc="Store object" state="implemented">
            <Target name="Connection" />
          </MethodExecute>
        </SequentialExecution>
      </Execution>
      <OperationReturnValues>
        <ReturnValue name="UpdatedConnection" dataType="Connection" designDesc="Updated connection value" state="implemented" />
        <Target name="Connection" />
      </OperationReturnValues>
    </Operation>
    <Operation name="CreateReceivingConnectionStructures">
      <OperationSpec>
        <Description>
            Create receiving connection structures. Called by active part after connection is authorized.
          </Description>
      </OperationSpec>
      <Parameters>
        <Parameter name="ConnectionCommunicationData" dataType="ConnectionCommunicationData" designDesc="Connection communication data" state="implemented" />
      </Parameters>
      <Execution>
        <SequentialExecution>
          <TargetDefinition name="ThisSideConnection" dataType="Connection" designDesc="This side connection entry" state="implemented">
            <Parameter name="ConnectionCommunicationData" />
          </TargetDefinition>
          <MethodExecute name="StoreObject" designDesc="Store objects" state="implemented">
            <Target name="ThisSideConnection" />
          </MethodExecute>
          <OperationExecute name="CallCreateConnectionStructures" targetOperationName="CreateConnectionStructures" designDesc="Call operation to create connection structures" state="implemented">
            <Target name="ThisSideConnection" />
          </OperationExecute>
        </SequentialExecution>
      </Execution>
    </Operation>
    <Operation name="CreateReceivingConnection">
      <OperationSpec>
        <Description>
            Creates receiving connection, used for device initiated connection other end initiation.
          </Description>
      </OperationSpec>
      <Parameters>
        <Parameter name="Description" dataType="string" designDesc="Connection description" state="implemented" />
        <Parameter name="OtherSideConnectionID" dataType="string" designDesc="Other side connection ID" state="implemented" />
      </Parameters>
      <Execution>
        <SequentialExecution>
          <TargetDefinition name="Connection" dataType="Connection" designDesc="Created connection" state="implemented">
            <Parameter name="Description" />
            <Parameter name="OtherSideConnectionID" />
          </TargetDefinition>
          <MethodExecute name="StoreConnection" designDesc="Store connection object" state="implemented">
            <Target name="Connection" />
          </MethodExecute>
        </SequentialExecution>
      </Execution>
      <OperationReturnValues>
        <ReturnValue name="ConnectionID" dataType="string" designDesc="Connection ID of created connection" state="implemented" />
        <Target name="Connection" />
      </OperationReturnValues>
    </Operation>
    <Operation name="SynchronizeConnectionCategories">
      <OperationSpec>
        <Description>Update both side categories of connection up-to-date with each other</Description>
      </OperationSpec>
      <Parameters>
        <Parameter name="ConnectionID" dataType="string" designDesc="Connection ID" state="implemented" />
      </Parameters>
      <Execution>
        <SequentialExecution>
          <MethodExecute name="ExecuteProcessToUpdateThisSideCategories" designDesc="Execute process to update this side categories" state="implemented">
            <Parameter name="ConnectionID" />
          </MethodExecute>
          <TargetDefinition name="Connection" dataType="TheBall.Interface.Connection" designDesc="Connecton that contains this categories" state="implemented">
            <Parameter name="ConnectionID" />
          </TargetDefinition>
          <MethodExecute name="SyncCategoriesWithOtherSideCategories" designDesc="Get other side categories" state="implemented">
            <Target name="Connection" />
            <ReturnValue name="OtherSideCategories" dataType="Category[]" designDesc="Other side categories" state="implemented" />
          </MethodExecute>
          <MethodExecute name="UpdateOtherSideCategories" designDesc="Update connection's this side categories" state="implemented">
            <Target name="Connection" />
            <Target name="SyncCategoriesWithOtherSideCategoriesOutput" />
          </MethodExecute>
          <MethodExecute name="StoreObject" designDesc="Store connection object" state="implemented">
            <Target name="Connection" />
          </MethodExecute>
        </SequentialExecution>
      </Execution>
    </Operation>
  </Operations>
</OperationAbstraction>