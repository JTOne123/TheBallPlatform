<?xml version="1.0" encoding="utf-8"?>
<TheBallCoreAbstraction xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="TheBallCore_v1_0.xsd">
  <InstanceOfTheBall semanticDomainName="TheBall.Payments">
    <DigitalInterface>
      <InterfaceModel>
        <InterfaceObject name="CancelSubscriptionParams" designDesc="Cancel subscription parameters">
          <InterfaceItems>
            <InterfaceItem name="PlanName" logicalDataType="Text_Short"/>
          </InterfaceItems>
        </InterfaceObject>
        <InterfaceObject name="StripeWebhookData" designDesc="Stripe webhook data">
          <InterfaceItems>
            <InterfaceItem name="id" logicalDataType="Text_Short"/>
            <InterfaceItem name="livemode" logicalDataType="TrueOrFalse_Boolean"/>
            <InterfaceItem name="type" logicalDataType="Text_Short"/>
            <!--
            <InterfaceItem name="object" logicalDataType="Text_Short"/>
            -->
          </InterfaceItems>
        </InterfaceObject>
        <InterfaceObject name="ProductPurchaseInfo" designDesc="Product purchase info">
          <InterfaceItems>
            <InterfaceItem name="currentproduct" logicalDataType="Text_Short"/>
            <InterfaceItem name="expectedprice" logicalDataType="Number"/>
            <InterfaceItem name="currency" logicalDataType="Text_Short"/>
            <InterfaceItem name="isTestMode" logicalDataType="TrueOrFalse_Boolean"/>
          </InterfaceItems>
        </InterfaceObject>
        <InterfaceObject name="PaymentToken" designDesc="Payment authorized token">
          <InterfaceItems>
            <InterfaceItem name="id" logicalDataType="Text_Short"/>
            <InterfaceItem name="currentproduct" logicalDataType="Text_Short"/>
            <InterfaceItem name="expectedprice" logicalDataType="Number"/>
            <InterfaceItem name="currency" logicalDataType="Text_Short"/>
            <InterfaceItem name="email" logicalDataType="Text_Short"/>
            <InterfaceItem name="isTestMode" logicalDataType="TrueOrFalse_Boolean"/>
            <ObjectInstance name="card" interfaceObjectName="BillingAddress"/>
            <InterfaceItem name="couponId" logicalDataType="Text_Short"/>
          </InterfaceItems>
        </InterfaceObject>
        <InterfaceObject name="BillingAddress" designDesc="Stripe billing address relevant fields">
          <InterfaceItems>
            <InterfaceItem name="name" logicalDataType="Text_Short"/>
            <InterfaceItem name="address_city" logicalDataType="Text_Short"/>
            <InterfaceItem name="address_country" logicalDataType="Text_Short"/>
            <InterfaceItem name="address_line1" logicalDataType="Text_Short"/>
            <InterfaceItem name="address_line1_check" logicalDataType="Text_Short"/>
            <InterfaceItem name="address_zip" logicalDataType="Text_Short"/>
            <InterfaceItem name="address_zip_check" logicalDataType="Text_Short"/>
            <InterfaceItem name="cvc_check" logicalDataType="Text_Short"/>
            <InterfaceItem name="exp_month" logicalDataType="Text_Short"/>
            <InterfaceItem name="exp_year" logicalDataType="Text_Short"/>
            <InterfaceItem name="last4" logicalDataType="Text_Short"/>
          </InterfaceItems>
        </InterfaceObject>
        <InterfaceObject name="CustomerActivePlans" designDesc="Customer active plans">
          <InterfaceItems>
            <ObjectInstance name="PlanStatuses" interfaceObjectName="PlanStatus" isCollection="true"/>
          </InterfaceItems>
        </InterfaceObject>
        <InterfaceObject name="PlanStatus" designDesc="Subscription plan status">
          <InterfaceItems>
            <InterfaceItem name="name" logicalDataType="Text_Short"/>
            <InterfaceItem name="validuntil" logicalDataType="Time_DateTime"/>
            <InterfaceItem name="cancelatperiodend" logicalDataType="TrueOrFalse_Boolean"/>
          </InterfaceItems>
        </InterfaceObject>
      </InterfaceModel>
    </DigitalInterface>
    <InformationModel>
      <!--
      <InformationObject name="Payment" designDesc="Payment object">
        
      </InformationObject>
      -->
      <InformationObject name="GroupSubscriptionPlanCollection" designDesc="Collection of group subscription plans">
        <CollectionFor collectionType="Master" contentInformationObjectName="GroupSubscriptionPlan"/>
      </InformationObject>
      <InformationObject name="GroupSubscriptionPlan" designDesc="Group subscription plan item, including the group IDs" provideCreateMethod="false">
        <InformationItems>
          <InformationItem name="PlanName" logicalDataType="Text_Short"/>
          <InformationItem name="Description" logicalDataType="Text_Long"/>
          <InformationItem name="GroupIDs" logicalDataType="Text_Short" isCollection="true"/>
        </InformationItems>
      </InformationObject>
      <InformationObject name="SubscriptionPlanStatus" designDesc="Subscription plan status object" provideCreateMethod="false">
        <InformationItems>
          <InformationItem name="SubscriptionPlan" logicalDataType="ObjectLink" objectLinkTargetType="GroupSubscriptionPlan"/>
          <InformationItem name="ValidUntil" logicalDataType="Time_DateTime"/>
        </InformationItems>
      </InformationObject>
      <InformationObject name="CustomerAccountCollection" designDesc="Collection of customer accounts">
        <CollectionFor collectionType="Master" contentInformationObjectName="CustomerAccount"/>
      </InformationObject>
      <InformationObject name="CustomerAccount" designDesc="Payment identified customer, ID based on account">
        <InformationItems>
          <InformationItem name="StripeID" logicalDataType="Text_Short"/>
          <InformationItem name="IsTestAccount" logicalDataType="TrueOrFalse_Boolean"/>
          <InformationItem name="EmailAddress" logicalDataType="Text_Short"/>
          <InformationItem name="Description" logicalDataType="Text_Short"/>
          <InformationItem name="ActivePlans" logicalDataType="ObjectLink" objectLinkTargetType="SubscriptionPlanStatus" isCollection="true"/>
        </InformationItems>
      </InformationObject>
    </InformationModel>
    <Operations>
      <Operation name="GetAccountFromStripeCustomer">
        <OperationSpec>
          <Description>Get AccountID from Stripe ID</Description>
        </OperationSpec>
        <Parameters>
          <Parameter name="StripeCustomerID" dataType="string" designDesc="Stripe Customer ID" state="implemented"/>
          <Parameter name="IsTestAccount" dataType="bool" designDesc="Is Stripe test account" state="implemented"/>
        </Parameters>
        <Execution>
          <SequentialExecution>
            <TargetDefinition name="AllCustomerAccounts" dataType="CustomerAccount[]" designDesc="All customer accounts" state="implemented" />
            <TargetDefinition name="Account" dataType="CustomerAccount" designDesc="Stripe customer ID based account" state="implemented">
              <Parameter name="StripeCustomerID"/>
              <Parameter name="IsTestAccount"/>
              <Target name="AllCustomerAccounts"/>
            </TargetDefinition>
          </SequentialExecution>
        </Execution>
        <OperationReturnValues>
          <ReturnValue name="ResultAccount" dataType="CustomerAccount" designDesc="Customer account to return" state="implemented"/>
          <Target name="Account"/>
        </OperationReturnValues>
      </Operation>
      <Operation name="ProcessStripeWebhook">
        <OperationSpec>
          <Description>Process Stripe launched webhook</Description>
        </OperationSpec>
        <Parameters>
          <Parameter name="JSONObject" dataType="INT.StripeWebhookData" designDesc="Stripe webhook request data" state="implemented"/>
        </Parameters>
        <Execution>
          <SequentialExecution>
            <TargetDefinition name="EventID" dataType="string" designDesc="Stripe event id" state="implemented">
              <Parameter name="JSONObject"/>
            </TargetDefinition>
            <TargetDefinition name="IsTestMode" dataType="bool" designDesc="Stripe test mode status" state="implemented">
              <Parameter name="JSONObject"/>
            </TargetDefinition>
            <TargetDefinition name="EventData" dataType="Stripe.StripeEvent" designDesc="Stripe event object" state="implemented">
              <Target name="EventID"/>
              <Target name="IsTestMode"/>
            </TargetDefinition>
            <MethodExecute name="ProcessStripeEvent" designDesc="Process Stripe event" state="implemented" asyncSupportMode="AsyncOnly">
              <Target name="EventData"/>
              <Target name="IsTestMode"/>
            </MethodExecute>
          </SequentialExecution>
        </Execution>
      </Operation>
      <Operation name="ValidatePlanContainingGroups">
        <OperationSpec>
          <Description>Validate that plan contains groups</Description>
        </OperationSpec>
        <Parameters>
          <Parameter name="PlanName" dataType="string" designDesc="Plan name to validate for groups" state="implemented"/>
        </Parameters>
        <Execution>
          <SequentialExecution>
            <TargetDefinition dataType="GroupSubscriptionPlan" name="GroupSubscriptionPlan" designDesc="Group subscription plan" state="implemented">
              <Parameter name="PlanName"/>
            </TargetDefinition>
            <MethodExecute name="ValidateGroupsInPlan" designDesc="Validate groups exist (at least one) in plan" state="implemented">
              <Target name="GroupSubscriptionPlan"/>
            </MethodExecute>
          </SequentialExecution>
        </Execution>
      </Operation>
      <Operation name="CancelAccountPlan">
        <OperationSpec>
          <Description>Cancel account default plan at current period end</Description>
        </OperationSpec>
        <Parameters>
          <Parameter dataType="INT.CancelSubscriptionParams" name="CancelParameters" designDesc="Cancellation parameters" state="implemented"/>
        </Parameters>
        <Execution>
          <SequentialExecution>
            <TargetDefinition name="AccountID" dataType="string" designDesc="Active account ID" state="implemented" />
            <TargetDefinition dataType="CustomerAccount" name="CustomerAccount" designDesc="Customer account object based accountID. Created if missing" state="implemented" asyncSupportMode="AsyncOnly">
              <Target name="AccountID"/>
            </TargetDefinition>
            <TargetDefinition name="StripeCustomerID" dataType="string" designDesc="Stripe customer ID" state="implemented">
              <Target name="CustomerAccount"/>
            </TargetDefinition>
            <TargetDefinition name="IsTestMode" dataType="bool" designDesc="Is Stripe in test mode" state="implemented">
              <Target name="CustomerAccount"/>
            </TargetDefinition>
            <MethodExecute name="RemoveCustomerPaymentSource" designDesc="Remove current card from Stripe customer" state="implemented" asyncSupportMode="AsyncOnly">
              <Target name="StripeCustomerID"/>
              <Target name="IsTestMode"/>
            </MethodExecute>
            <TargetDefinition name="PlanName" dataType="string" designDesc="Plan name from the payment token" state="implemented">
              <Parameter name="CancelParameters"/>
            </TargetDefinition>
            <TargetDefinition name="CustomersActiveSubscriptions" dataType="Stripe.StripeSubscription[]" designDesc="Active Stripe subscriptions of customer" state="implemented" asyncSupportMode="AsyncOnly">
              <Target name="StripeCustomerID"/>
              <Target name="IsTestMode"/>
            </TargetDefinition>
            <MethodExecute name="CancelSubscriptionAtPeriodEnd" designDesc="Cancel current subscription at period end" state="implemented" asyncSupportMode="AsyncOnly">
              <Target name="StripeCustomerID"/>
              <Target name="IsTestMode"/>
              <Target name="PlanName"/>
              <Target name="CustomersActiveSubscriptions"/>
            </MethodExecute>
            <MethodExecute name="StoreObjects" designDesc="Store processed object(s)" state="implemented" asyncSupportMode="AsyncOnly">
              <Target name="CustomerAccount"/>
            </MethodExecute>
          </SequentialExecution>
        </Execution>
      </Operation>
      <Operation name="PurchaseProduct">
        <OperationSpec>
          <Description>Purchase and pay product for account</Description>
        </OperationSpec>
        <Parameters>
          <Parameter name="PurchaseInfo" dataType="INT.ProductPurchaseInfo" designDesc="Product purchase info" state="implemented"/>
        </Parameters>
        <Execution>
          <SequentialExecution>
            <TargetDefinition name="AccountID" dataType="string" designDesc="Active account ID" state="implemented" />
            <TargetDefinition name="CustomerAccount" dataType="CustomerAccount" designDesc="Customer account" asyncSupportMode="AsyncOnly" state="implemented">
              <Target name="AccountID"/>
            </TargetDefinition>
            <TargetDefinition name="StripeCustomerID" dataType="string" designDesc="Stripe customer ID" state="implemented">
              <Target name="CustomerAccount"/>
            </TargetDefinition>
            <TargetDefinition name="IsTestMode" dataType="bool" designDesc="Is Stripe in test mode" state="implemented">
              <Target name="CustomerAccount"/>
            </TargetDefinition>
            <TargetDefinition name="ProductName" dataType="string" designDesc="Product name from the purchase info" state="implemented">
              <Parameter name="PurchaseInfo"/>
            </TargetDefinition>
            <TargetDefinition name="ProductPrice" dataType="double" designDesc="Product price from the purchase info" state="implemented">
              <Parameter name="PurchaseInfo"/>
            </TargetDefinition>
            <TargetDefinition name="Currency" dataType="string" designDesc="Product currency from the purchase info" state="implemented">
              <Parameter name="PurchaseInfo"/>
            </TargetDefinition>
            <MethodExecute name="ValidateStripeProductAndPrice" designDesc="Validate product info from Stripe" state="implemented" asyncSupportMode="AsyncOnly">
              <Target name="ProductName"/>
              <Target name="ProductPrice"/>
              <Target name="IsTestMode"/>
            </MethodExecute>
            <MethodExecute name="ProcessPayment" designDesc="Process payment to Stripe" state="implemented" asyncSupportMode="AsyncOnly">
              <Parameter name="PurchaseInfo"/>
              <Target name="StripeCustomerID"/>
              <Target name="IsTestMode"/>
              <Target name="ProductName"/>
              <Target name="ProductPrice"/>
              <Target name="Currency"/>
            </MethodExecute>
            <!--
            <MethodExecute name="StoreObjects" designDesc="Store processed object(s)" state="implemented" asyncSupportMode="AsyncOnly">
              <Target name="CustomerAccount"/>
            </MethodExecute>
            -->
          </SequentialExecution>
        </Execution>
      </Operation>
      <Operation name="ActivateAccountPlan">
        <OperationSpec>
          <Description>Activate and pay account named plan</Description>
        </OperationSpec>
        <Parameters>
          <Parameter name="PaymentToken" dataType="INT.PaymentToken" designDesc="Obtain Stripe Token from request stream" state="implemented"  />
        </Parameters>
        <Execution>
          <SequentialExecution>
            <MethodExecute name="ValidateMatchingEmail" designDesc="Validate that account active email matches payment token email" state="implemented">
              <Parameter name="PaymentToken"/>
            </MethodExecute>
            <TargetDefinition name="AccountID" dataType="string" designDesc="Active account ID" state="implemented" />
            <TargetDefinition name="IsTokenTestMode" dataType="bool" designDesc="Is Token test mode token" state="implemented">
              <Parameter name="PaymentToken"/>
            </TargetDefinition>
            <TargetDefinition name="IsTestAccount" dataType="bool" designDesc="Retrieve account IsTestMode status, validated from list" state="implemented" asyncSupportMode="AsyncOnly">
              <Target name="AccountID"/>
            </TargetDefinition>
            <TargetDefinition name="IsTestMode" dataType="bool" designDesc="Validate account and token matching testmode, return if agree, throw exception if not" state="implemented">
              <Target name="IsTokenTestMode"/>
              <Target name="IsTestAccount"/>
            </TargetDefinition>
            <TargetDefinition dataType="CustomerAccount" name="CustomerAccount" designDesc="Customer account object based accountID. Created if missing. Validate that it matches istestmode" state="implemented" asyncSupportMode="AsyncOnly">
              <Target name="AccountID"/>
              <Target name="IsTestMode"/>
            </TargetDefinition>
            <MethodExecute name="UpdateStripeCustomerData" designDesc="Update Stripe customer data from payment info" state="implemented" asyncSupportMode="AsyncOnly">
              <Parameter name="PaymentToken"/>
              <Target name="CustomerAccount"/>
              <Target name="IsTestMode"/>
            </MethodExecute>
            <TargetDefinition name="StripeCustomerID" dataType="string" designDesc="Stripe customer ID" state="implemented">
              <Target name="CustomerAccount"/>
            </TargetDefinition>
            <TargetDefinition name="PlanName" dataType="string" designDesc="Plan name from the payment token" state="implemented">
              <Parameter name="PaymentToken"/>
            </TargetDefinition>
            <MethodExecute name="ValidateStripePlanName" designDesc="Validate plan name from Stripe" state="implemented" asyncSupportMode="AsyncOnly">
              <Target name="PlanName"/>
              <Target name="IsTestMode"/>
            </MethodExecute>
            <TargetDefinition name="CustomersActiveSubscriptions" dataType="Stripe.StripeSubscription[]" designDesc="Active Stripe subscriptions of customer" state="implemented" asyncSupportMode="AsyncOnly">
              <Target name="StripeCustomerID"/>
              <Target name="IsTestMode"/>
            </TargetDefinition>
            <MethodExecute name="ProcessPayment" designDesc="Process payment to Stripe, if lacking with current plan/subscription" state="implemented" asyncSupportMode="AsyncOnly">
              <Parameter name="PaymentToken"/>
              <Target name="StripeCustomerID"/>
              <Target name="IsTestMode"/>
              <Target name="PlanName"/>
              <Target name="CustomersActiveSubscriptions"/>
            </MethodExecute>
            <MethodExecute name="StoreObjects" designDesc="Store processed object(s)" state="implemented" asyncSupportMode="AsyncOnly">
              <Target name="CustomerAccount"/>
            </MethodExecute>
            <OperationExecute name="GrantAccessToPaidPlan" designDesc="Grant access to paid plan" state="implemented" targetOperationName="SyncEffectivePlanAccessesToAccount" asyncSupportMode="AsyncOnly">
              <Target name="AccountID"/>
            </OperationExecute>
          </SequentialExecution>
        </Execution>
      </Operation>
      <Operation name="ActivateAndPayGroupSubscriptionPlan">
        <OperationSpec>
          <Description>Activate and pay group subscription</Description>
        </OperationSpec>
        <Execution>
          <SequentialExecution>
            <TargetDefinition dataType="INT.PaymentToken" name="PaymentToken" designDesc="Obtain Stripe Token from request stream" state="implemented" />
            <MethodExecute name="ValidateMatchingEmail" designDesc="Validate that account active email matches payment token email" state="implemented">
              <Target name="PaymentToken"/>
            </MethodExecute>
            <TargetDefinition name="AccountID" dataType="string" designDesc="Active account ID" state="implemented" />
            <TargetDefinition dataType="CustomerAccount" name="CustomerAccount" designDesc="Customer account object based accountID. Created if missing" state="implemented" asyncSupportMode="AsyncOnly">
              <Target name="AccountID"/>
            </TargetDefinition>
            <MethodExecute name="UpdateStripeCustomerData" designDesc="Update Stripe customer data from payment info" state="implemented">
              <Target name="CustomerAccount"/>
              <Target name="PaymentToken"/>
            </MethodExecute>
            <TargetDefinition name="StripeCustomerID" dataType="string" designDesc="Stripe customer ID" state="implemented">
              <Target name="CustomerAccount"/>
            </TargetDefinition>
            <TargetDefinition name="PlanName" dataType="string" designDesc="Plan name from the payment token" state="implemented">
              <Target name="PaymentToken"/>
            </TargetDefinition>
            <OperationExecute name="ValidatePlanGroups" targetOperationName="ValidatePlanContainingGroups" designDesc="Validate plan before charging for payment" state="implemented">
              <Target name="PlanName"/>
            </OperationExecute>
            <MethodExecute name="ValidateStripePlanName" designDesc="Validate plan name from Stripe" state="implemented">
              <Target name="PlanName"/>
            </MethodExecute>
            <TargetDefinition name="CustomersActiveSubscriptions" dataType="Stripe.StripeSubscription[]" designDesc="Active Stripe subscriptions of customer" state="implemented">
              <Target name="StripeCustomerID"/>
            </TargetDefinition>
            <TargetDefinition name="CustomersActivePlanNames" dataType="string[]" designDesc="Customer's active plan names" state="implemented">
              <Target name="CustomersActiveSubscriptions"/>
            </TargetDefinition>
            <MethodExecute name="SyncCurrentCustomerActivePlans" designDesc="Sync current plans to customer account" state="implemented">
              <Target name="CustomerAccount"/>
              <Target name="CustomersActivePlanNames"/>
            </MethodExecute>
            <MethodExecute name="ProcessPayment" designDesc="Process payment to Stripe, if lacking with current plan/subscription" state="implemented">
              <Target name="StripeCustomerID"/>
              <Target name="PlanName"/>
              <Target name="CustomersActivePlanNames"/>
              <Target name="PaymentToken"/>
            </MethodExecute>
            <MethodExecute name="AddPlanAsActiveToCustomer" designDesc="Add plan to customer if missing (and thus payment was processed)" state="implemented">
              <Target name="CustomerAccount"/>
              <Target name="PlanName"/>
            </MethodExecute>
            <MethodExecute name="StoreObjects" designDesc="Store processed object(s)" state="implemented">
              <Target name="CustomerAccount"/>
            </MethodExecute>
            <OperationExecute name="GrantAccessToPaidPlan" designDesc="Grant access to paid plan" state="implemented" targetOperationName="SyncEffectivePlanAccessesToAccount" asyncSupportMode="AsyncOnly">
              <Target name="AccountID"/>
            </OperationExecute>
          </SequentialExecution>
        </Execution>
      </Operation>
      <Operation name="CancelGroupSubscriptionPlan">
        <OperationSpec>
          <Description>Cancel group paid subscription</Description>
        </OperationSpec>
        <Execution>
          <SequentialExecution>
            <TargetDefinition dataType="INT.CancelSubscriptionParams" name="CancelParams" designDesc="Obtain parameterse from request stream" state="implemented" />
            <TargetDefinition name="PlanName" dataType="string" designDesc="Plan Name" state="implemented">
              <Target name="CancelParams"/>
            </TargetDefinition>
            <TargetDefinition name="AccountID" dataType="string" designDesc="Account ID to grant access for" state="implemented" />
            <TargetDefinition dataType="CustomerAccount" name="CustomerAccount" designDesc="Customer account object based on account ID. Must be found" state="implemented">
              <Target name="AccountID"/>
            </TargetDefinition>
            <MethodExecute name="CancelSubscriptionPlan" designDesc="Cancel subscription plan on Stripe" state="implemented">
              <Target name="PlanName"/>
              <Target name="CustomerAccount"/>
            </MethodExecute>
            <OperationExecute name="RevokeAccessFromCanceledPlan" designDesc="Revoke access to canceled plan" state="implemented" targetOperationName="SyncEffectivePlanAccessesToAccount" asyncSupportMode="AsyncOnly">
              <Target name="AccountID"/>
            </OperationExecute>
          </SequentialExecution>
        </Execution>
      </Operation>
      <Operation name="SyncEffectivePlanAccessesToAccount">
        <OperationSpec>
          <Description>Grant plan access to account</Description>
        </OperationSpec>
        <Parameters>
          <Parameter name="AccountID" dataType="string" designDesc="Account ID to grant access for" state="implemented"/>
        </Parameters>
        <Execution>
          <SequentialExecution>
            <TargetDefinition name="Account" dataType="CustomerAccount" designDesc="Customer account" state="implemented" asyncSupportMode="AsyncOnly">
              <Parameter name="AccountID"/>
            </TargetDefinition>
            <TargetDefinition name="IsTestMode" dataType="bool" designDesc="Is Stripe in test mode" state="implemented">
              <Target name="Account"/>
            </TargetDefinition>
            <TargetDefinition name="CurrentPlansBeforeSync" dataType="GroupSubscriptionPlan[]" designDesc="Group subscription plans before syncing" state="implemented">
              <Target name="Account"/>
            </TargetDefinition>
            <TargetDefinition name="ActivePlanStatusesFromStripe" dataType="INT.PlanStatus[]" designDesc="Plan statuses of account - fetched from Stripe." state="implemented" asyncSupportMode="AsyncOnly">
              <Target name="Account"/>
              <Target name="IsTestMode"/>
            </TargetDefinition>
            <TargetDefinition name="ActivePlansFromStripe" dataType="GroupSubscriptionPlan[]" designDesc="Group subscription plans - based on Stripe accounts." state="implemented">
              <Target name="ActivePlanStatusesFromStripe"/>
            </TargetDefinition>
            <TargetDefinition name="GroupsToHaveAccessTo" dataType="string[]" designDesc="Group IDs of having access to" state="implemented">
              <Target name="ActivePlansFromStripe"/>
            </TargetDefinition>
            <TargetDefinition name="CurrentGroupAccesses" dataType="string[]" designDesc="Group IDs of current access" state="implemented">
              <Target name="CurrentPlansBeforeSync"/>
            </TargetDefinition>
            <TargetDefinition name="GroupsToAddAccessTo" dataType="string[]" designDesc="Group IDs to add access to" state="implemented">
              <Target name="GroupsToHaveAccessTo"/>
              <Target name="CurrentGroupAccesses"/>
            </TargetDefinition>
            <TargetDefinition name="GroupsToRevokeAccessFrom" dataType="string[]" designDesc="Group IDs to revoke access from" state="implemented">
              <Target name="GroupsToHaveAccessTo"/>
              <Target name="CurrentGroupAccesses"/>
            </TargetDefinition>
            <MethodExecute name="GrantAccessToGroups" designDesc="Grant access to missing group using GrantPaidAccessToGroup operation." state="implemented">
              <Parameter name="AccountID"/>
              <Target name="GroupsToAddAccessTo"/>
            </MethodExecute>
            <MethodExecute name="RevokeAccessFromGroups" designDesc="Revoke access from inactive plan groups using RevokePaidAccessFromGroup operation." state="implemented">
              <Parameter name="AccountID"/>
              <Target name="GroupsToRevokeAccessFrom"/>
            </MethodExecute>
            <MethodExecute name="SyncCurrentStripePlansToAccount" designDesc="Sync current Stripe plans to account" state="implemented" asyncSupportMode="AsyncOnly">
              <Target name="Account"/>
              <Target name="CurrentPlansBeforeSync"/>
              <Target name="ActivePlansFromStripe"/>
            </MethodExecute>
            <MethodExecute name="UpdateStatusesOnAccount" designDesc="Update statuses on account interface object" asyncSupportMode="AsyncOnly" state="implemented">
              <Parameter name="AccountID"/>
              <Target name="ActivePlanStatusesFromStripe"/>
            </MethodExecute>
          </SequentialExecution>
        </Execution>
      </Operation>
      <Operation name="GrantPaidAccessToGroup">
        <OperationSpec>
          <Description>Grant paid access to group</Description>
        </OperationSpec>
        <Parameters>
          <Parameter name="GroupID" dataType="string" designDesc="Group ID to grant access to" state="implemented"/>
          <Parameter name="AccountID" dataType="string" designDesc="Account ID to grant access for" state="implemented"/>
        </Parameters>
        <Execution>
          <SequentialExecution>
            <MethodExecute name="AddAccountToGroup" designDesc="Add account to group by inviting and confirming. Grant as visitor role." state="implemented">
              <Parameter name="GroupID"/>
              <Parameter name="AccountID"/>
            </MethodExecute>
          </SequentialExecution>
        </Execution>
      </Operation>
      <Operation name="RevokePaidAccessFromGroup">
        <OperationSpec>
          <Description>Revoke paid access to group</Description>
        </OperationSpec>
        <Parameters>
          <Parameter name="GroupID" dataType="string" designDesc="Group ID to revoke access from" state="implemented"/>
          <Parameter name="AccountID" dataType="string" designDesc="Account ID to revoke access from" state="implemented"/>
        </Parameters>
        <Execution>
          <SequentialExecution>
            <MethodExecute name="RemoveAccountFromGroup" designDesc="Remove account from group." state="implemented">
              <Parameter name="GroupID"/>
              <Parameter name="AccountID"/>
            </MethodExecute>
          </SequentialExecution>
        </Execution>
      </Operation>
      <Operation name="ProcessPayment">
        <OperationSpec>
          <Description>Process Stripe payment</Description>
        </OperationSpec>
        <Execution>
          <SequentialExecution>
            <TargetDefinition dataType="INT.PaymentToken" name="PaymentToken" designDesc="Obtain Stripe Token from request stream" state="implemented" />
            <MethodExecute name="ValidateMatchingEmail" designDesc="Validate that account active email matches payment token email" state="implemented">
              <Target name="PaymentToken"/>
            </MethodExecute>
            <TargetDefinition dataType="CustomerAccount" name="CustomerAccount" designDesc="Customer account object based on active account ID. Created if missing" state="implemented" asyncSupportMode="AsyncOnly" />
            <MethodExecute name="ProcessPayment" designDesc="Process payment to Stripe" state="implemented">
              <Target name="PaymentToken"/>
              <Target name="CustomerAccount"/>
            </MethodExecute>
          </SequentialExecution>
        </Execution>
      </Operation>
      <Operation name="FetchCustomersFromStripe">
        <OperationSpec>
          <Description>Fetch customers from Stripe</Description>
        </OperationSpec>
        <Parameters>
          <Parameter name="GroupID" dataType="string" designDesc="Group ID to fetch the customers to" state="implemented"/>
        </Parameters>
        <Execution>
          <SequentialExecution>
            <TargetDefinition dataType="TheBall.CORE.IContainerOwner" designDesc="Validate group ID as valid Payments managing group" name="Owner" state="implemented">
              <Parameter name="GroupID"/>
            </TargetDefinition>
            <TargetDefinition name="StripeCustomers" dataType="Stripe.StripeCustomer[]" designDesc="Stripe customers from service call" state="implemented" />
            <TargetDefinition name="CurrentCustomers" dataType="CustomerAccountCollection" designDesc="Current customer collection" state="implemented" asyncSupportMode="AsyncOnly">
              <Target name="Owner"/>
            </TargetDefinition>
            <TargetDefinition name="NewCustomersToCreate" dataType="CustomerAccount[]" designDesc="New customers to create" state="implemented">
              <Target name="Owner"/>
              <Target name="StripeCustomers"/>
              <Target name="CurrentCustomers"/>
            </TargetDefinition>
            <MethodExecute name="StoreObjects" designDesc="Store new customers" state="implemented" asyncSupportMode="AsyncOnly">
              <Target name="Owner"/>
              <Target name="NewCustomersToCreate"/>
            </MethodExecute>
          </SequentialExecution>
        </Execution>
      </Operation>
      <Operation name="AssociatePaymentToGroup">
        <OperationSpec>
          <Description>Associate payment to group</Description>
        </OperationSpec>
        <Parameters>
          <Parameter name="GroupID" dataType="string" designDesc="ID of the group to associate the payment to" state="implemented"/>
          <Parameter name="PaymentID" dataType="string" designDesc="ID of the payment to connect to group" state="implemented"/>
        </Parameters>
        <Execution>
          <SequentialExecution>
            <TargetDefinition name="GroupAsOwner" dataType="TheBall.CORE.IContainerOwner" designDesc="Group as owner" state="implemented">
              <Parameter name="GroupID"/>
            </TargetDefinition>
          </SequentialExecution>
        </Execution>
      </Operation>
    </Operations>
    
    <!--
    <Subscriptions />
    -->
  </InstanceOfTheBall>
</TheBallCoreAbstraction>