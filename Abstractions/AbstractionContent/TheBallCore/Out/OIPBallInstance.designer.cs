 


using DOM=AaltoGlobalImpact.OIP;
using System.Threading.Tasks;

namespace TheBall.Core {
	public static partial class OwnerInitializer
	{
		private static async Task DOMAININIT_AaltoGlobalImpact_OIP(IContainerOwner owner)
		{
			await DOM.DomainInformationSupport.EnsureMasterCollections(owner);
			await DOM.DomainInformationSupport.RefreshMasterCollections(owner);
		}
	}
}


namespace AaltoGlobalImpact.OIP { 
		using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.IO;
using System.Xml;
using System.Linq;
using System.Runtime.Serialization;
using Microsoft.WindowsAzure.Storage.Blob;
using ProtoBuf;
using TheBall;
using TheBall.Core;
using TheBall.Core.StorageCore;

namespace INT { 
					[DataContract]
			public partial class CategoryChildRanking
			{
				[DataMember]
				public string CategoryID { get; set; }
				[DataMember]
				public RankingItem[] RankingItems { get; set; }
			}

			[DataContract]
			public partial class RankingItem
			{
				[DataMember]
				public string ContentID { get; set; }
				[DataMember]
				public string ContentSemanticType { get; set; }
				[DataMember]
				public string RankName { get; set; }
				[DataMember]
				public string RankValue { get; set; }
			}

			[DataContract]
			public partial class ParentToChildren
			{
				[DataMember]
				public string id { get; set; }
				[DataMember]
				public ParentToChildren[] children { get; set; }
			}

 } 		public static class DomainInformationSupport
		{
            public static async Task EnsureMasterCollections(IContainerOwner owner)
            {
                {
                    var masterCollection = await AddressAndLocationCollection.GetMasterCollectionInstanceAsync(owner);
                    if(masterCollection == null)
                    {
                        masterCollection = AddressAndLocationCollection.CreateDefault();
                        masterCollection.RelativeLocation =
                            AddressAndLocationCollection.GetMasterCollectionLocation(owner);
                        await StorageSupport.StoreInformationAsync(masterCollection, owner);
                    }
					IInformationCollection collection = masterCollection;
                }
                {
                    var masterCollection = await ContentCategoryRankCollection.GetMasterCollectionInstanceAsync(owner);
                    if(masterCollection == null)
                    {
                        masterCollection = ContentCategoryRankCollection.CreateDefault();
                        masterCollection.RelativeLocation =
                            ContentCategoryRankCollection.GetMasterCollectionLocation(owner);
                        await StorageSupport.StoreInformationAsync(masterCollection, owner);
                    }
					IInformationCollection collection = masterCollection;
                }
                {
                    var masterCollection = await LinkToContentCollection.GetMasterCollectionInstanceAsync(owner);
                    if(masterCollection == null)
                    {
                        masterCollection = LinkToContentCollection.CreateDefault();
                        masterCollection.RelativeLocation =
                            LinkToContentCollection.GetMasterCollectionLocation(owner);
                        await StorageSupport.StoreInformationAsync(masterCollection, owner);
                    }
					IInformationCollection collection = masterCollection;
                }
                {
                    var masterCollection = await EmbeddedContentCollection.GetMasterCollectionInstanceAsync(owner);
                    if(masterCollection == null)
                    {
                        masterCollection = EmbeddedContentCollection.CreateDefault();
                        masterCollection.RelativeLocation =
                            EmbeddedContentCollection.GetMasterCollectionLocation(owner);
                        await StorageSupport.StoreInformationAsync(masterCollection, owner);
                    }
					IInformationCollection collection = masterCollection;
                }
                {
                    var masterCollection = await DynamicContentGroupCollection.GetMasterCollectionInstanceAsync(owner);
                    if(masterCollection == null)
                    {
                        masterCollection = DynamicContentGroupCollection.CreateDefault();
                        masterCollection.RelativeLocation =
                            DynamicContentGroupCollection.GetMasterCollectionLocation(owner);
                        await StorageSupport.StoreInformationAsync(masterCollection, owner);
                    }
					IInformationCollection collection = masterCollection;
                }
                {
                    var masterCollection = await DynamicContentCollection.GetMasterCollectionInstanceAsync(owner);
                    if(masterCollection == null)
                    {
                        masterCollection = DynamicContentCollection.CreateDefault();
                        masterCollection.RelativeLocation =
                            DynamicContentCollection.GetMasterCollectionLocation(owner);
                        await StorageSupport.StoreInformationAsync(masterCollection, owner);
                    }
					IInformationCollection collection = masterCollection;
                }
                {
                    var masterCollection = await AttachedToObjectCollection.GetMasterCollectionInstanceAsync(owner);
                    if(masterCollection == null)
                    {
                        masterCollection = AttachedToObjectCollection.CreateDefault();
                        masterCollection.RelativeLocation =
                            AttachedToObjectCollection.GetMasterCollectionLocation(owner);
                        await StorageSupport.StoreInformationAsync(masterCollection, owner);
                    }
					IInformationCollection collection = masterCollection;
                }
                {
                    var masterCollection = await CommentCollection.GetMasterCollectionInstanceAsync(owner);
                    if(masterCollection == null)
                    {
                        masterCollection = CommentCollection.CreateDefault();
                        masterCollection.RelativeLocation =
                            CommentCollection.GetMasterCollectionLocation(owner);
                        await StorageSupport.StoreInformationAsync(masterCollection, owner);
                    }
					IInformationCollection collection = masterCollection;
                }
                {
                    var masterCollection = await SelectionCollection.GetMasterCollectionInstanceAsync(owner);
                    if(masterCollection == null)
                    {
                        masterCollection = SelectionCollection.CreateDefault();
                        masterCollection.RelativeLocation =
                            SelectionCollection.GetMasterCollectionLocation(owner);
                        await StorageSupport.StoreInformationAsync(masterCollection, owner);
                    }
					IInformationCollection collection = masterCollection;
                }
                {
                    var masterCollection = await TextContentCollection.GetMasterCollectionInstanceAsync(owner);
                    if(masterCollection == null)
                    {
                        masterCollection = TextContentCollection.CreateDefault();
                        masterCollection.RelativeLocation =
                            TextContentCollection.GetMasterCollectionLocation(owner);
                        await StorageSupport.StoreInformationAsync(masterCollection, owner);
                    }
					IInformationCollection collection = masterCollection;
                }
                {
                    var masterCollection = await ImageCollection.GetMasterCollectionInstanceAsync(owner);
                    if(masterCollection == null)
                    {
                        masterCollection = ImageCollection.CreateDefault();
                        masterCollection.RelativeLocation =
                            ImageCollection.GetMasterCollectionLocation(owner);
                        await StorageSupport.StoreInformationAsync(masterCollection, owner);
                    }
					IInformationCollection collection = masterCollection;
                }
                {
                    var masterCollection = await BinaryFileCollection.GetMasterCollectionInstanceAsync(owner);
                    if(masterCollection == null)
                    {
                        masterCollection = BinaryFileCollection.CreateDefault();
                        masterCollection.RelativeLocation =
                            BinaryFileCollection.GetMasterCollectionLocation(owner);
                        await StorageSupport.StoreInformationAsync(masterCollection, owner);
                    }
					IInformationCollection collection = masterCollection;
                }
                {
                    var masterCollection = await CategoryCollection.GetMasterCollectionInstanceAsync(owner);
                    if(masterCollection == null)
                    {
                        masterCollection = CategoryCollection.CreateDefault();
                        masterCollection.RelativeLocation =
                            CategoryCollection.GetMasterCollectionLocation(owner);
                        await StorageSupport.StoreInformationAsync(masterCollection, owner);
                    }
					IInformationCollection collection = masterCollection;
                }
            }

            public static async Task RefreshMasterCollections(IContainerOwner owner)
            {
                {
                    IInformationCollection masterCollection = await AddressAndLocationCollection.GetMasterCollectionInstanceAsync(owner);
                    if (masterCollection == null)
                        throw new InvalidDataException("Master collection AddressAndLocationCollection missing for owner");
                    await masterCollection.RefreshContentAsync();
                    await StorageSupport.StoreInformationAsync((IInformationObject) masterCollection, owner);
                }
                {
                    IInformationCollection masterCollection = await ContentCategoryRankCollection.GetMasterCollectionInstanceAsync(owner);
                    if (masterCollection == null)
                        throw new InvalidDataException("Master collection ContentCategoryRankCollection missing for owner");
                    await masterCollection.RefreshContentAsync();
                    await StorageSupport.StoreInformationAsync((IInformationObject) masterCollection, owner);
                }
                {
                    IInformationCollection masterCollection = await LinkToContentCollection.GetMasterCollectionInstanceAsync(owner);
                    if (masterCollection == null)
                        throw new InvalidDataException("Master collection LinkToContentCollection missing for owner");
                    await masterCollection.RefreshContentAsync();
                    await StorageSupport.StoreInformationAsync((IInformationObject) masterCollection, owner);
                }
                {
                    IInformationCollection masterCollection = await EmbeddedContentCollection.GetMasterCollectionInstanceAsync(owner);
                    if (masterCollection == null)
                        throw new InvalidDataException("Master collection EmbeddedContentCollection missing for owner");
                    await masterCollection.RefreshContentAsync();
                    await StorageSupport.StoreInformationAsync((IInformationObject) masterCollection, owner);
                }
                {
                    IInformationCollection masterCollection = await DynamicContentGroupCollection.GetMasterCollectionInstanceAsync(owner);
                    if (masterCollection == null)
                        throw new InvalidDataException("Master collection DynamicContentGroupCollection missing for owner");
                    await masterCollection.RefreshContentAsync();
                    await StorageSupport.StoreInformationAsync((IInformationObject) masterCollection, owner);
                }
                {
                    IInformationCollection masterCollection = await DynamicContentCollection.GetMasterCollectionInstanceAsync(owner);
                    if (masterCollection == null)
                        throw new InvalidDataException("Master collection DynamicContentCollection missing for owner");
                    await masterCollection.RefreshContentAsync();
                    await StorageSupport.StoreInformationAsync((IInformationObject) masterCollection, owner);
                }
                {
                    IInformationCollection masterCollection = await AttachedToObjectCollection.GetMasterCollectionInstanceAsync(owner);
                    if (masterCollection == null)
                        throw new InvalidDataException("Master collection AttachedToObjectCollection missing for owner");
                    await masterCollection.RefreshContentAsync();
                    await StorageSupport.StoreInformationAsync((IInformationObject) masterCollection, owner);
                }
                {
                    IInformationCollection masterCollection = await CommentCollection.GetMasterCollectionInstanceAsync(owner);
                    if (masterCollection == null)
                        throw new InvalidDataException("Master collection CommentCollection missing for owner");
                    await masterCollection.RefreshContentAsync();
                    await StorageSupport.StoreInformationAsync((IInformationObject) masterCollection, owner);
                }
                {
                    IInformationCollection masterCollection = await SelectionCollection.GetMasterCollectionInstanceAsync(owner);
                    if (masterCollection == null)
                        throw new InvalidDataException("Master collection SelectionCollection missing for owner");
                    await masterCollection.RefreshContentAsync();
                    await StorageSupport.StoreInformationAsync((IInformationObject) masterCollection, owner);
                }
                {
                    IInformationCollection masterCollection = await TextContentCollection.GetMasterCollectionInstanceAsync(owner);
                    if (masterCollection == null)
                        throw new InvalidDataException("Master collection TextContentCollection missing for owner");
                    await masterCollection.RefreshContentAsync();
                    await StorageSupport.StoreInformationAsync((IInformationObject) masterCollection, owner);
                }
                {
                    IInformationCollection masterCollection = await ImageCollection.GetMasterCollectionInstanceAsync(owner);
                    if (masterCollection == null)
                        throw new InvalidDataException("Master collection ImageCollection missing for owner");
                    await masterCollection.RefreshContentAsync();
                    await StorageSupport.StoreInformationAsync((IInformationObject) masterCollection, owner);
                }
                {
                    IInformationCollection masterCollection = await BinaryFileCollection.GetMasterCollectionInstanceAsync(owner);
                    if (masterCollection == null)
                        throw new InvalidDataException("Master collection BinaryFileCollection missing for owner");
                    await masterCollection.RefreshContentAsync();
                    await StorageSupport.StoreInformationAsync((IInformationObject) masterCollection, owner);
                }
                {
                    IInformationCollection masterCollection = await CategoryCollection.GetMasterCollectionInstanceAsync(owner);
                    if (masterCollection == null)
                        throw new InvalidDataException("Master collection CategoryCollection missing for owner");
                    await masterCollection.RefreshContentAsync();
                    await StorageSupport.StoreInformationAsync((IInformationObject) masterCollection, owner);
                }
            }
		}
			[DataContract] 
			[Serializable]
			public partial class TBSystem : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public TBSystem()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "TBSystem";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/TBSystem/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(TBSystem), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<TBSystem>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: TBSystem");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(TBSystem), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/TBSystem/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/TBSystem/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((TBSystem) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(TBSystem));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static TBSystem DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(TBSystem));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (TBSystem) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "TBSystem", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "TBSystem", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref TBSystem customDemoObject);



				public static TBSystem CreateDefault()
				{
					var result = new TBSystem();
					return result;
				}
				/*
				public static TBSystem CreateDemoDefault()
				{
					TBSystem customDemo = null;
					TBSystem.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new TBSystem();
					result.InstanceName = @"TBSystem.InstanceName";

					result.AdminGroupID = @"TBSystem.AdminGroupID";

				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(InstanceName != _unmodified_InstanceName)
							return true;
						if(AdminGroupID != _unmodified_AdminGroupID)
							return true;
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
				}


				private void CopyContentFrom(TBSystem sourceObject)
				{
					InstanceName = sourceObject.InstanceName;
					AdminGroupID = sourceObject.AdminGroupID;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_InstanceName = InstanceName;
					_unmodified_AdminGroupID = AdminGroupID;
				
				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "InstanceName":
							InstanceName = value;
							break;
						case "AdminGroupID":
							AdminGroupID = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string InstanceName { get; set; }
			private string _unmodified_InstanceName;
			[DataMember] 
			public string AdminGroupID { get; set; }
			private string _unmodified_AdminGroupID;
			
			}
			[DataContract] 
			[Serializable]
			public partial class WebPublishInfo : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public WebPublishInfo()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "WebPublishInfo";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/WebPublishInfo/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(WebPublishInfo), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<WebPublishInfo>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: WebPublishInfo");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(WebPublishInfo), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/WebPublishInfo/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/WebPublishInfo/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((WebPublishInfo) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(WebPublishInfo));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static WebPublishInfo DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(WebPublishInfo));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (WebPublishInfo) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "WebPublishInfo", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "WebPublishInfo", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref WebPublishInfo customDemoObject);



				public static WebPublishInfo CreateDefault()
				{
					var result = new WebPublishInfo();
					result.ActivePublication = PublicationPackage.CreateDefault();
					result.Publications = PublicationPackageCollection.CreateDefault();
					return result;
				}
				/*
				public static WebPublishInfo CreateDemoDefault()
				{
					WebPublishInfo customDemo = null;
					WebPublishInfo.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new WebPublishInfo();
					result.PublishType = @"WebPublishInfo.PublishType";

					result.PublishContainer = @"WebPublishInfo.PublishContainer";

					result.ActivePublication = PublicationPackage.CreateDemoDefault();
					result.Publications = PublicationPackageCollection.CreateDemoDefault();
				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
					if(ActivePublication != null) {
						((IInformationObject) ActivePublication).UpdateCollections(masterInstance);
					}

					if(Publications != null) {
						((IInformationObject) Publications).UpdateCollections(masterInstance);
					}

				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					{ // Scoping block for variable name reusability
						IInformationObject item = ActivePublication;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					{ // Scoping block for variable name reusability
						IInformationObject item = Publications;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					{
						var item = ActivePublication;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = Publications;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					{
						var item = (IInformationObject) ActivePublication;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) Publications;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(PublishType != _unmodified_PublishType)
							return true;
						if(PublishContainer != _unmodified_PublishContainer)
							return true;
						if(ActivePublication != _unmodified_ActivePublication)
							return true;
						if(Publications != _unmodified_Publications)
							return true;
						{
							IInformationObject item = (IInformationObject) ActivePublication;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
						{
							IInformationObject item = (IInformationObject) Publications;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					if(ActivePublication != null) {
						if(ActivePublication.ID == replacingObject.ID)
							ActivePublication = (PublicationPackage) replacingObject;
						else {
							IInformationObject iObject = ActivePublication;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(Publications != null) {
						if(Publications.ID == replacingObject.ID)
							Publications = (PublicationPackageCollection) replacingObject;
						else {
							IInformationObject iObject = Publications;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}


				private void CopyContentFrom(WebPublishInfo sourceObject)
				{
					PublishType = sourceObject.PublishType;
					PublishContainer = sourceObject.PublishContainer;
					ActivePublication = sourceObject.ActivePublication;
					Publications = sourceObject.Publications;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_PublishType = PublishType;
					_unmodified_PublishContainer = PublishContainer;
				
					_unmodified_ActivePublication = ActivePublication;
					if(ActivePublication != null)
						((IInformationObject) ActivePublication).SetInstanceTreeValuesAsUnmodified();

					_unmodified_Publications = Publications;
					if(Publications != null)
						((IInformationObject) Publications).SetInstanceTreeValuesAsUnmodified();

				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "PublishType":
							PublishType = value;
							break;
						case "PublishContainer":
							PublishContainer = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string PublishType { get; set; }
			private string _unmodified_PublishType;
			[DataMember] 
			public string PublishContainer { get; set; }
			private string _unmodified_PublishContainer;
			[DataMember] 
			public PublicationPackage ActivePublication { get; set; }
			private PublicationPackage _unmodified_ActivePublication;
			[DataMember] 
			public PublicationPackageCollection Publications { get; set; }
			private PublicationPackageCollection _unmodified_Publications;
			
			}
			[DataContract] 
			[Serializable]
			public partial class PublicationPackageCollection : IInformationObject , IInformationCollection
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public PublicationPackageCollection()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "PublicationPackageCollection";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/PublicationPackageCollection/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(PublicationPackageCollection), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<PublicationPackageCollection>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: PublicationPackageCollection");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(PublicationPackageCollection), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/PublicationPackageCollection/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/PublicationPackageCollection/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((PublicationPackageCollection) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(PublicationPackageCollection));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static PublicationPackageCollection DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(PublicationPackageCollection));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (PublicationPackageCollection) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "PublicationPackageCollection", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "PublicationPackageCollection", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref PublicationPackageCollection customDemoObject);


				
				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.UpdateCollections(masterInstance);
					}
				}



				bool IInformationCollection.IsMasterCollection {
					get {
						return false;
					}
				}

				string IInformationCollection.GetMasterLocation()
				{
					throw new NotSupportedException("Master collection location only supported for master collections");
					
				}

				async Task<IInformationCollection> IInformationCollection.GetMasterInstanceAsync()
				{
					throw new NotSupportedException("Master collection instance only supported for master collections");
					
				}


				public string GetItemDirectory()
				{
					string dummyItemLocation = ObjectStorage.GetRelativeLocationFromID<PublicationPackage>("dummy");
					string nonOwnerDirectoryLocation = StorageSupport.GetParentDirectoryTarget(dummyItemLocation);
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					string ownerDirectoryLocation = StorageSupport.GetOwnerContentLocation(owner, nonOwnerDirectoryLocation);
					return ownerDirectoryLocation;
				}

				public async Task RefreshContentAsync()
				{
				}




                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }

				
		
				public static PublicationPackageCollection CreateDefault()
				{
					var result = new PublicationPackageCollection();
					return result;
				}

				/*
				public static PublicationPackageCollection CreateDemoDefault()
				{
					PublicationPackageCollection customDemo = null;
					PublicationPackageCollection.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new PublicationPackageCollection();
					result.CollectionContent.Add(PublicationPackage.CreateDemoDefault());
					//result.CollectionContent.Add(PublicationPackage.CreateDemoDefault());
					//result.CollectionContent.Add(PublicationPackage.CreateDemoDefault());
					return result;
				}
				*/

		
				[DataMember] public List<PublicationPackage> CollectionContent = new List<PublicationPackage>();
				private PublicationPackage[] _unmodified_CollectionContent;

				[DataMember] public bool IsCollectionFiltered;
				private bool _unmodified_IsCollectionFiltered;
				
				[DataMember] public List<string> OrderFilterIDList = new List<string>();
				private string[] _unmodified_OrderFilterIDList;

				public string SelectedIDCommaSeparated
				{
					get
					{
						string[] sourceArray;
						if (OrderFilterIDList != null)
							sourceArray = OrderFilterIDList.ToArray();
						else
							sourceArray = CollectionContent.Select(item => item.ID).ToArray();
						return String.Join(",", sourceArray);
					}
					set 
					{
						if (value == null)
							return;
						string[] valueArray = value.Split(',');
						OrderFilterIDList = new List<string>();
						OrderFilterIDList.AddRange(valueArray);
						OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
					}
				}

				public PublicationPackage[] GetIDSelectedArray()
				{
					if (IsCollectionFiltered == false || this.OrderFilterIDList == null)
						return CollectionContent.ToArray();
					return
						this.OrderFilterIDList.Select(id => CollectionContent.FirstOrDefault(item => item.ID == id)).Where(item => item != null).ToArray();
				}

				public void RefreshOrderAndFilterListFromContent()
                {
                    if (OrderFilterIDList == null)
                        return;
                    OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
                }

				public void ParsePropertyValue(string propertyName, string propertyValue)
				{
					switch(propertyName)
					{
						case "SelectedIDCommaSeparated":
							SelectedIDCommaSeparated = propertyValue;
							break;
						case "IsCollectionFiltered":
							IsCollectionFiltered = bool.Parse(propertyValue);
							break;
						default:
							throw new NotSupportedException("No ParsePropertyValue supported for property: " + propertyName);
					}
				}


				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					for(int i = 0; i < CollectionContent.Count; i++) // >
					{
						if(CollectionContent[i].ID == replacingObject.ID)
							CollectionContent[i] = (PublicationPackage )replacingObject;
						else { // Cannot have circular reference, so can be in else branch
							IInformationObject iObject = CollectionContent[i];
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}

				
				bool IInformationObject.IsInstanceTreeModified {
					get {
						bool collectionModified = CollectionContent.SequenceEqual(_unmodified_CollectionContent) == false;
						if(collectionModified)
							return true;
						//if((OrderFilterIDList == null && _unmodified_OrderFilterIDList != null) || _unmodified_OrderFilterIDList
						if(IsCollectionFiltered != _unmodified_IsCollectionFiltered)
							return true;
						// For non-master content
						foreach(IInformationObject item in CollectionContent)
						{
							bool itemTreeModified = item.IsInstanceTreeModified;
							if(itemTreeModified)
								return true;
						}
							
						return false;
					}
				}
				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_CollectionContent = CollectionContent.ToArray();
					_unmodified_IsCollectionFiltered = IsCollectionFiltered;
					if(OrderFilterIDList == null)
						_unmodified_OrderFilterIDList = null;
					else
						_unmodified_OrderFilterIDList = OrderFilterIDList.ToArray();
					foreach(IInformationObject iObject in CollectionContent)
						iObject.SetInstanceTreeValuesAsUnmodified();
				}

				private void CopyContentFrom(PublicationPackageCollection sourceObject)
				{
					CollectionContent = sourceObject.CollectionContent;
					_unmodified_CollectionContent = sourceObject._unmodified_CollectionContent;
				}
				
				private object FindFromObjectTree(string objectId)
				{
					foreach(var item in CollectionContent)
					{
						object result = item.FindObjectByID(objectId);
						if(result != null)
							return result;
					}
					return null;
				}

				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					foreach(IInformationObject iObject in CollectionContent)
						iObject.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
				}


				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						bool doAdd = true;
						if(filterOnFalse != null)
							doAdd = filterOnFalse(iObject);
						if(doAdd) {
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
				}


			
			}
			[DataContract] 
			[Serializable]
			public partial class PublicationPackage : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public PublicationPackage()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "PublicationPackage";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/PublicationPackage/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(PublicationPackage), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<PublicationPackage>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: PublicationPackage");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(PublicationPackage), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/PublicationPackage/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/PublicationPackage/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((PublicationPackage) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(PublicationPackage));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static PublicationPackage DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(PublicationPackage));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (PublicationPackage) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "PublicationPackage", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "PublicationPackage", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref PublicationPackage customDemoObject);



				public static PublicationPackage CreateDefault()
				{
					var result = new PublicationPackage();
					return result;
				}
				/*
				public static PublicationPackage CreateDemoDefault()
				{
					PublicationPackage customDemo = null;
					PublicationPackage.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new PublicationPackage();
					result.PackageName = @"PublicationPackage.PackageName";

				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(PackageName != _unmodified_PackageName)
							return true;
						if(PublicationTime != _unmodified_PublicationTime)
							return true;
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
				}


				private void CopyContentFrom(PublicationPackage sourceObject)
				{
					PackageName = sourceObject.PackageName;
					PublicationTime = sourceObject.PublicationTime;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_PackageName = PackageName;
					_unmodified_PublicationTime = PublicationTime;
				
				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "PackageName":
							PackageName = value;
							break;
						case "PublicationTime":
							PublicationTime = DateTime.Parse(value);
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string PackageName { get; set; }
			private string _unmodified_PackageName;
			[DataMember] 
			public DateTime PublicationTime { get; set; }
			private DateTime _unmodified_PublicationTime;
			
			}
			[DataContract] 
			[Serializable]
			public partial class TBRLoginRoot : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public TBRLoginRoot()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "TBRLoginRoot";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/TBRLoginRoot/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(TBRLoginRoot), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<TBRLoginRoot>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: TBRLoginRoot");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(TBRLoginRoot), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/TBRLoginRoot/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/TBRLoginRoot/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((TBRLoginRoot) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(TBRLoginRoot));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static TBRLoginRoot DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(TBRLoginRoot));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (TBRLoginRoot) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "TBRLoginRoot", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "TBRLoginRoot", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref TBRLoginRoot customDemoObject);



				public static TBRLoginRoot CreateDefault()
				{
					var result = new TBRLoginRoot();
					result.Account = TBAccount.CreateDefault();
					return result;
				}
				/*
				public static TBRLoginRoot CreateDemoDefault()
				{
					TBRLoginRoot customDemo = null;
					TBRLoginRoot.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new TBRLoginRoot();
					result.DomainName = @"TBRLoginRoot.DomainName";

					result.Account = TBAccount.CreateDemoDefault();
				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
					if(Account != null) {
						((IInformationObject) Account).UpdateCollections(masterInstance);
					}

				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					{ // Scoping block for variable name reusability
						IInformationObject item = Account;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					{
						var item = Account;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					{
						var item = (IInformationObject) Account;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(DomainName != _unmodified_DomainName)
							return true;
						if(Account != _unmodified_Account)
							return true;
						{
							IInformationObject item = (IInformationObject) Account;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					if(Account != null) {
						if(Account.ID == replacingObject.ID)
							Account = (TBAccount) replacingObject;
						else {
							IInformationObject iObject = Account;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}


				private void CopyContentFrom(TBRLoginRoot sourceObject)
				{
					DomainName = sourceObject.DomainName;
					Account = sourceObject.Account;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_DomainName = DomainName;
				
					_unmodified_Account = Account;
					if(Account != null)
						((IInformationObject) Account).SetInstanceTreeValuesAsUnmodified();

				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "DomainName":
							DomainName = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string DomainName { get; set; }
			private string _unmodified_DomainName;
			[DataMember] 
			public TBAccount Account { get; set; }
			private TBAccount _unmodified_Account;
			
			}
			[DataContract] 
			[Serializable]
			public partial class TBRAccountRoot : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public TBRAccountRoot()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "TBRAccountRoot";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/TBRAccountRoot/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(TBRAccountRoot), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<TBRAccountRoot>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: TBRAccountRoot");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(TBRAccountRoot), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/TBRAccountRoot/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/TBRAccountRoot/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((TBRAccountRoot) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(TBRAccountRoot));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static TBRAccountRoot DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(TBRAccountRoot));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (TBRAccountRoot) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "TBRAccountRoot", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "TBRAccountRoot", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref TBRAccountRoot customDemoObject);



				public static TBRAccountRoot CreateDefault()
				{
					var result = new TBRAccountRoot();
					result.Account = TBAccount.CreateDefault();
					return result;
				}
				/*
				public static TBRAccountRoot CreateDemoDefault()
				{
					TBRAccountRoot customDemo = null;
					TBRAccountRoot.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new TBRAccountRoot();
					result.Account = TBAccount.CreateDemoDefault();
				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
					if(Account != null) {
						((IInformationObject) Account).UpdateCollections(masterInstance);
					}

				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					{ // Scoping block for variable name reusability
						IInformationObject item = Account;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					{
						var item = Account;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					{
						var item = (IInformationObject) Account;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(Account != _unmodified_Account)
							return true;
						{
							IInformationObject item = (IInformationObject) Account;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					if(Account != null) {
						if(Account.ID == replacingObject.ID)
							Account = (TBAccount) replacingObject;
						else {
							IInformationObject iObject = Account;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}


				private void CopyContentFrom(TBRAccountRoot sourceObject)
				{
					Account = sourceObject.Account;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
				
					_unmodified_Account = Account;
					if(Account != null)
						((IInformationObject) Account).SetInstanceTreeValuesAsUnmodified();

				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public TBAccount Account { get; set; }
			private TBAccount _unmodified_Account;
			
			}
			[DataContract] 
			[Serializable]
			public partial class TBRGroupRoot : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public TBRGroupRoot()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "TBRGroupRoot";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/TBRGroupRoot/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(TBRGroupRoot), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<TBRGroupRoot>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: TBRGroupRoot");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(TBRGroupRoot), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/TBRGroupRoot/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/TBRGroupRoot/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((TBRGroupRoot) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(TBRGroupRoot));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static TBRGroupRoot DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(TBRGroupRoot));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (TBRGroupRoot) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "TBRGroupRoot", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "TBRGroupRoot", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref TBRGroupRoot customDemoObject);



				public static TBRGroupRoot CreateDefault()
				{
					var result = new TBRGroupRoot();
					result.Group = TBCollaboratingGroup.CreateDefault();
					return result;
				}
				/*
				public static TBRGroupRoot CreateDemoDefault()
				{
					TBRGroupRoot customDemo = null;
					TBRGroupRoot.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new TBRGroupRoot();
					result.Group = TBCollaboratingGroup.CreateDemoDefault();
				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
					if(Group != null) {
						((IInformationObject) Group).UpdateCollections(masterInstance);
					}

				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					{ // Scoping block for variable name reusability
						IInformationObject item = Group;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					{
						var item = Group;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					{
						var item = (IInformationObject) Group;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(Group != _unmodified_Group)
							return true;
						{
							IInformationObject item = (IInformationObject) Group;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					if(Group != null) {
						if(Group.ID == replacingObject.ID)
							Group = (TBCollaboratingGroup) replacingObject;
						else {
							IInformationObject iObject = Group;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}


				private void CopyContentFrom(TBRGroupRoot sourceObject)
				{
					Group = sourceObject.Group;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
				
					_unmodified_Group = Group;
					if(Group != null)
						((IInformationObject) Group).SetInstanceTreeValuesAsUnmodified();

				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public TBCollaboratingGroup Group { get; set; }
			private TBCollaboratingGroup _unmodified_Group;
			
			}
			[DataContract] 
			[Serializable]
			public partial class TBRLoginGroupRoot : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public TBRLoginGroupRoot()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "TBRLoginGroupRoot";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/TBRLoginGroupRoot/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(TBRLoginGroupRoot), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<TBRLoginGroupRoot>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: TBRLoginGroupRoot");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(TBRLoginGroupRoot), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/TBRLoginGroupRoot/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/TBRLoginGroupRoot/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((TBRLoginGroupRoot) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(TBRLoginGroupRoot));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static TBRLoginGroupRoot DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(TBRLoginGroupRoot));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (TBRLoginGroupRoot) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "TBRLoginGroupRoot", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "TBRLoginGroupRoot", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref TBRLoginGroupRoot customDemoObject);



				public static TBRLoginGroupRoot CreateDefault()
				{
					var result = new TBRLoginGroupRoot();
					return result;
				}
				/*
				public static TBRLoginGroupRoot CreateDemoDefault()
				{
					TBRLoginGroupRoot customDemo = null;
					TBRLoginGroupRoot.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new TBRLoginGroupRoot();
					result.Role = @"TBRLoginGroupRoot.Role";

					result.GroupID = @"TBRLoginGroupRoot.GroupID";

				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(Role != _unmodified_Role)
							return true;
						if(GroupID != _unmodified_GroupID)
							return true;
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
				}


				private void CopyContentFrom(TBRLoginGroupRoot sourceObject)
				{
					Role = sourceObject.Role;
					GroupID = sourceObject.GroupID;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_Role = Role;
					_unmodified_GroupID = GroupID;
				
				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "Role":
							Role = value;
							break;
						case "GroupID":
							GroupID = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string Role { get; set; }
			private string _unmodified_Role;
			[DataMember] 
			public string GroupID { get; set; }
			private string _unmodified_GroupID;
			
			}
			[DataContract] 
			[Serializable]
			public partial class TBREmailRoot : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public TBREmailRoot()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "TBREmailRoot";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/TBREmailRoot/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(TBREmailRoot), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<TBREmailRoot>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: TBREmailRoot");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(TBREmailRoot), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/TBREmailRoot/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/TBREmailRoot/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((TBREmailRoot) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(TBREmailRoot));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static TBREmailRoot DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(TBREmailRoot));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (TBREmailRoot) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "TBREmailRoot", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "TBREmailRoot", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref TBREmailRoot customDemoObject);



				public static TBREmailRoot CreateDefault()
				{
					var result = new TBREmailRoot();
					result.Account = TBAccount.CreateDefault();
					return result;
				}
				/*
				public static TBREmailRoot CreateDemoDefault()
				{
					TBREmailRoot customDemo = null;
					TBREmailRoot.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new TBREmailRoot();
					result.Account = TBAccount.CreateDemoDefault();
				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
					if(Account != null) {
						((IInformationObject) Account).UpdateCollections(masterInstance);
					}

				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					{ // Scoping block for variable name reusability
						IInformationObject item = Account;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					{
						var item = Account;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					{
						var item = (IInformationObject) Account;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(Account != _unmodified_Account)
							return true;
						{
							IInformationObject item = (IInformationObject) Account;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					if(Account != null) {
						if(Account.ID == replacingObject.ID)
							Account = (TBAccount) replacingObject;
						else {
							IInformationObject iObject = Account;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}


				private void CopyContentFrom(TBREmailRoot sourceObject)
				{
					Account = sourceObject.Account;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
				
					_unmodified_Account = Account;
					if(Account != null)
						((IInformationObject) Account).SetInstanceTreeValuesAsUnmodified();

				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public TBAccount Account { get; set; }
			private TBAccount _unmodified_Account;
			
			}
			[DataContract] 
			[Serializable]
			public partial class TBAccount : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public TBAccount()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "TBAccount";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/TBAccount/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(TBAccount), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<TBAccount>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: TBAccount");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(TBAccount), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/TBAccount/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/TBAccount/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((TBAccount) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(TBAccount));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static TBAccount DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(TBAccount));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (TBAccount) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "TBAccount", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "TBAccount", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref TBAccount customDemoObject);



				public static TBAccount CreateDefault()
				{
					var result = new TBAccount();
					result.Emails = TBEmailCollection.CreateDefault();
					result.Logins = TBLoginInfoCollection.CreateDefault();
					result.GroupRoleCollection = TBAccountCollaborationGroupCollection.CreateDefault();
					return result;
				}
				/*
				public static TBAccount CreateDemoDefault()
				{
					TBAccount customDemo = null;
					TBAccount.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new TBAccount();
					result.Emails = TBEmailCollection.CreateDemoDefault();
					result.Logins = TBLoginInfoCollection.CreateDemoDefault();
					result.GroupRoleCollection = TBAccountCollaborationGroupCollection.CreateDemoDefault();
				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
					if(Emails != null) {
						((IInformationObject) Emails).UpdateCollections(masterInstance);
					}

					if(Logins != null) {
						((IInformationObject) Logins).UpdateCollections(masterInstance);
					}

					if(GroupRoleCollection != null) {
						((IInformationObject) GroupRoleCollection).UpdateCollections(masterInstance);
					}

				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					{ // Scoping block for variable name reusability
						IInformationObject item = Emails;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					{ // Scoping block for variable name reusability
						IInformationObject item = Logins;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					{ // Scoping block for variable name reusability
						IInformationObject item = GroupRoleCollection;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					{
						var item = Emails;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = Logins;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = GroupRoleCollection;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					{
						var item = (IInformationObject) Emails;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) Logins;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) GroupRoleCollection;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(Emails != _unmodified_Emails)
							return true;
						if(Logins != _unmodified_Logins)
							return true;
						if(GroupRoleCollection != _unmodified_GroupRoleCollection)
							return true;
						{
							IInformationObject item = (IInformationObject) Emails;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
						{
							IInformationObject item = (IInformationObject) Logins;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
						{
							IInformationObject item = (IInformationObject) GroupRoleCollection;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					if(Emails != null) {
						if(Emails.ID == replacingObject.ID)
							Emails = (TBEmailCollection) replacingObject;
						else {
							IInformationObject iObject = Emails;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(Logins != null) {
						if(Logins.ID == replacingObject.ID)
							Logins = (TBLoginInfoCollection) replacingObject;
						else {
							IInformationObject iObject = Logins;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(GroupRoleCollection != null) {
						if(GroupRoleCollection.ID == replacingObject.ID)
							GroupRoleCollection = (TBAccountCollaborationGroupCollection) replacingObject;
						else {
							IInformationObject iObject = GroupRoleCollection;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}


				private void CopyContentFrom(TBAccount sourceObject)
				{
					Emails = sourceObject.Emails;
					Logins = sourceObject.Logins;
					GroupRoleCollection = sourceObject.GroupRoleCollection;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
				
					_unmodified_Emails = Emails;
					if(Emails != null)
						((IInformationObject) Emails).SetInstanceTreeValuesAsUnmodified();

					_unmodified_Logins = Logins;
					if(Logins != null)
						((IInformationObject) Logins).SetInstanceTreeValuesAsUnmodified();

					_unmodified_GroupRoleCollection = GroupRoleCollection;
					if(GroupRoleCollection != null)
						((IInformationObject) GroupRoleCollection).SetInstanceTreeValuesAsUnmodified();

				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public TBEmailCollection Emails { get; set; }
			private TBEmailCollection _unmodified_Emails;
			[DataMember] 
			public TBLoginInfoCollection Logins { get; set; }
			private TBLoginInfoCollection _unmodified_Logins;
			[DataMember] 
			public TBAccountCollaborationGroupCollection GroupRoleCollection { get; set; }
			private TBAccountCollaborationGroupCollection _unmodified_GroupRoleCollection;
			
			}
			[DataContract] 
			[Serializable]
			public partial class TBAccountCollaborationGroup : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public TBAccountCollaborationGroup()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "TBAccountCollaborationGroup";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/TBAccountCollaborationGroup/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(TBAccountCollaborationGroup), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<TBAccountCollaborationGroup>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: TBAccountCollaborationGroup");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(TBAccountCollaborationGroup), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/TBAccountCollaborationGroup/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/TBAccountCollaborationGroup/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((TBAccountCollaborationGroup) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(TBAccountCollaborationGroup));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static TBAccountCollaborationGroup DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(TBAccountCollaborationGroup));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (TBAccountCollaborationGroup) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "TBAccountCollaborationGroup", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "TBAccountCollaborationGroup", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref TBAccountCollaborationGroup customDemoObject);



				public static TBAccountCollaborationGroup CreateDefault()
				{
					var result = new TBAccountCollaborationGroup();
					return result;
				}
				/*
				public static TBAccountCollaborationGroup CreateDemoDefault()
				{
					TBAccountCollaborationGroup customDemo = null;
					TBAccountCollaborationGroup.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new TBAccountCollaborationGroup();
					result.GroupID = @"TBAccountCollaborationGroup.GroupID";

					result.GroupRole = @"TBAccountCollaborationGroup.GroupRole";

					result.RoleStatus = @"TBAccountCollaborationGroup.RoleStatus";

				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(GroupID != _unmodified_GroupID)
							return true;
						if(GroupRole != _unmodified_GroupRole)
							return true;
						if(RoleStatus != _unmodified_RoleStatus)
							return true;
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
				}


				private void CopyContentFrom(TBAccountCollaborationGroup sourceObject)
				{
					GroupID = sourceObject.GroupID;
					GroupRole = sourceObject.GroupRole;
					RoleStatus = sourceObject.RoleStatus;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_GroupID = GroupID;
					_unmodified_GroupRole = GroupRole;
					_unmodified_RoleStatus = RoleStatus;
				
				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "GroupID":
							GroupID = value;
							break;
						case "GroupRole":
							GroupRole = value;
							break;
						case "RoleStatus":
							RoleStatus = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string GroupID { get; set; }
			private string _unmodified_GroupID;
			[DataMember] 
			public string GroupRole { get; set; }
			private string _unmodified_GroupRole;
			[DataMember] 
			public string RoleStatus { get; set; }
			private string _unmodified_RoleStatus;
			
			}
			[DataContract] 
			[Serializable]
			public partial class TBAccountCollaborationGroupCollection : IInformationObject , IInformationCollection
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public TBAccountCollaborationGroupCollection()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "TBAccountCollaborationGroupCollection";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/TBAccountCollaborationGroupCollection/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(TBAccountCollaborationGroupCollection), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<TBAccountCollaborationGroupCollection>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: TBAccountCollaborationGroupCollection");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(TBAccountCollaborationGroupCollection), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/TBAccountCollaborationGroupCollection/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/TBAccountCollaborationGroupCollection/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((TBAccountCollaborationGroupCollection) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(TBAccountCollaborationGroupCollection));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static TBAccountCollaborationGroupCollection DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(TBAccountCollaborationGroupCollection));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (TBAccountCollaborationGroupCollection) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "TBAccountCollaborationGroupCollection", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "TBAccountCollaborationGroupCollection", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref TBAccountCollaborationGroupCollection customDemoObject);


				
				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.UpdateCollections(masterInstance);
					}
				}



				bool IInformationCollection.IsMasterCollection {
					get {
						return false;
					}
				}

				string IInformationCollection.GetMasterLocation()
				{
					throw new NotSupportedException("Master collection location only supported for master collections");
					
				}

				async Task<IInformationCollection> IInformationCollection.GetMasterInstanceAsync()
				{
					throw new NotSupportedException("Master collection instance only supported for master collections");
					
				}


				public string GetItemDirectory()
				{
					string dummyItemLocation = ObjectStorage.GetRelativeLocationFromID<TBAccountCollaborationGroup>("dummy");
					string nonOwnerDirectoryLocation = StorageSupport.GetParentDirectoryTarget(dummyItemLocation);
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					string ownerDirectoryLocation = StorageSupport.GetOwnerContentLocation(owner, nonOwnerDirectoryLocation);
					return ownerDirectoryLocation;
				}

				public async Task RefreshContentAsync()
				{
				}




                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }

				
		
				public static TBAccountCollaborationGroupCollection CreateDefault()
				{
					var result = new TBAccountCollaborationGroupCollection();
					return result;
				}

				/*
				public static TBAccountCollaborationGroupCollection CreateDemoDefault()
				{
					TBAccountCollaborationGroupCollection customDemo = null;
					TBAccountCollaborationGroupCollection.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new TBAccountCollaborationGroupCollection();
					result.CollectionContent.Add(TBAccountCollaborationGroup.CreateDemoDefault());
					//result.CollectionContent.Add(TBAccountCollaborationGroup.CreateDemoDefault());
					//result.CollectionContent.Add(TBAccountCollaborationGroup.CreateDemoDefault());
					return result;
				}
				*/

		
				[DataMember] public List<TBAccountCollaborationGroup> CollectionContent = new List<TBAccountCollaborationGroup>();
				private TBAccountCollaborationGroup[] _unmodified_CollectionContent;

				[DataMember] public bool IsCollectionFiltered;
				private bool _unmodified_IsCollectionFiltered;
				
				[DataMember] public List<string> OrderFilterIDList = new List<string>();
				private string[] _unmodified_OrderFilterIDList;

				public string SelectedIDCommaSeparated
				{
					get
					{
						string[] sourceArray;
						if (OrderFilterIDList != null)
							sourceArray = OrderFilterIDList.ToArray();
						else
							sourceArray = CollectionContent.Select(item => item.ID).ToArray();
						return String.Join(",", sourceArray);
					}
					set 
					{
						if (value == null)
							return;
						string[] valueArray = value.Split(',');
						OrderFilterIDList = new List<string>();
						OrderFilterIDList.AddRange(valueArray);
						OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
					}
				}

				public TBAccountCollaborationGroup[] GetIDSelectedArray()
				{
					if (IsCollectionFiltered == false || this.OrderFilterIDList == null)
						return CollectionContent.ToArray();
					return
						this.OrderFilterIDList.Select(id => CollectionContent.FirstOrDefault(item => item.ID == id)).Where(item => item != null).ToArray();
				}

				public void RefreshOrderAndFilterListFromContent()
                {
                    if (OrderFilterIDList == null)
                        return;
                    OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
                }

				public void ParsePropertyValue(string propertyName, string propertyValue)
				{
					switch(propertyName)
					{
						case "SelectedIDCommaSeparated":
							SelectedIDCommaSeparated = propertyValue;
							break;
						case "IsCollectionFiltered":
							IsCollectionFiltered = bool.Parse(propertyValue);
							break;
						default:
							throw new NotSupportedException("No ParsePropertyValue supported for property: " + propertyName);
					}
				}


				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					for(int i = 0; i < CollectionContent.Count; i++) // >
					{
						if(CollectionContent[i].ID == replacingObject.ID)
							CollectionContent[i] = (TBAccountCollaborationGroup )replacingObject;
						else { // Cannot have circular reference, so can be in else branch
							IInformationObject iObject = CollectionContent[i];
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}

				
				bool IInformationObject.IsInstanceTreeModified {
					get {
						bool collectionModified = CollectionContent.SequenceEqual(_unmodified_CollectionContent) == false;
						if(collectionModified)
							return true;
						//if((OrderFilterIDList == null && _unmodified_OrderFilterIDList != null) || _unmodified_OrderFilterIDList
						if(IsCollectionFiltered != _unmodified_IsCollectionFiltered)
							return true;
						// For non-master content
						foreach(IInformationObject item in CollectionContent)
						{
							bool itemTreeModified = item.IsInstanceTreeModified;
							if(itemTreeModified)
								return true;
						}
							
						return false;
					}
				}
				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_CollectionContent = CollectionContent.ToArray();
					_unmodified_IsCollectionFiltered = IsCollectionFiltered;
					if(OrderFilterIDList == null)
						_unmodified_OrderFilterIDList = null;
					else
						_unmodified_OrderFilterIDList = OrderFilterIDList.ToArray();
					foreach(IInformationObject iObject in CollectionContent)
						iObject.SetInstanceTreeValuesAsUnmodified();
				}

				private void CopyContentFrom(TBAccountCollaborationGroupCollection sourceObject)
				{
					CollectionContent = sourceObject.CollectionContent;
					_unmodified_CollectionContent = sourceObject._unmodified_CollectionContent;
				}
				
				private object FindFromObjectTree(string objectId)
				{
					foreach(var item in CollectionContent)
					{
						object result = item.FindObjectByID(objectId);
						if(result != null)
							return result;
					}
					return null;
				}

				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					foreach(IInformationObject iObject in CollectionContent)
						iObject.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
				}


				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						bool doAdd = true;
						if(filterOnFalse != null)
							doAdd = filterOnFalse(iObject);
						if(doAdd) {
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
				}


			
			}
			[DataContract] 
			[Serializable]
			public partial class TBLoginInfo : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public TBLoginInfo()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "TBLoginInfo";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/TBLoginInfo/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(TBLoginInfo), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<TBLoginInfo>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: TBLoginInfo");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(TBLoginInfo), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/TBLoginInfo/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/TBLoginInfo/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((TBLoginInfo) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(TBLoginInfo));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static TBLoginInfo DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(TBLoginInfo));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (TBLoginInfo) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "TBLoginInfo", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "TBLoginInfo", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref TBLoginInfo customDemoObject);



				public static TBLoginInfo CreateDefault()
				{
					var result = new TBLoginInfo();
					return result;
				}
				/*
				public static TBLoginInfo CreateDemoDefault()
				{
					TBLoginInfo customDemo = null;
					TBLoginInfo.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new TBLoginInfo();
					result.OpenIDUrl = @"TBLoginInfo.OpenIDUrl";

				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(OpenIDUrl != _unmodified_OpenIDUrl)
							return true;
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
				}


				private void CopyContentFrom(TBLoginInfo sourceObject)
				{
					OpenIDUrl = sourceObject.OpenIDUrl;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_OpenIDUrl = OpenIDUrl;
				
				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "OpenIDUrl":
							OpenIDUrl = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string OpenIDUrl { get; set; }
			private string _unmodified_OpenIDUrl;
			
			}
			[DataContract] 
			[Serializable]
			public partial class TBLoginInfoCollection : IInformationObject , IInformationCollection
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public TBLoginInfoCollection()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "TBLoginInfoCollection";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/TBLoginInfoCollection/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(TBLoginInfoCollection), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<TBLoginInfoCollection>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: TBLoginInfoCollection");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(TBLoginInfoCollection), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/TBLoginInfoCollection/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/TBLoginInfoCollection/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((TBLoginInfoCollection) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(TBLoginInfoCollection));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static TBLoginInfoCollection DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(TBLoginInfoCollection));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (TBLoginInfoCollection) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "TBLoginInfoCollection", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "TBLoginInfoCollection", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref TBLoginInfoCollection customDemoObject);


				
				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.UpdateCollections(masterInstance);
					}
				}



				bool IInformationCollection.IsMasterCollection {
					get {
						return false;
					}
				}

				string IInformationCollection.GetMasterLocation()
				{
					throw new NotSupportedException("Master collection location only supported for master collections");
					
				}

				async Task<IInformationCollection> IInformationCollection.GetMasterInstanceAsync()
				{
					throw new NotSupportedException("Master collection instance only supported for master collections");
					
				}


				public string GetItemDirectory()
				{
					string dummyItemLocation = ObjectStorage.GetRelativeLocationFromID<TBLoginInfo>("dummy");
					string nonOwnerDirectoryLocation = StorageSupport.GetParentDirectoryTarget(dummyItemLocation);
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					string ownerDirectoryLocation = StorageSupport.GetOwnerContentLocation(owner, nonOwnerDirectoryLocation);
					return ownerDirectoryLocation;
				}

				public async Task RefreshContentAsync()
				{
				}




                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }

				
		
				public static TBLoginInfoCollection CreateDefault()
				{
					var result = new TBLoginInfoCollection();
					return result;
				}

				/*
				public static TBLoginInfoCollection CreateDemoDefault()
				{
					TBLoginInfoCollection customDemo = null;
					TBLoginInfoCollection.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new TBLoginInfoCollection();
					result.CollectionContent.Add(TBLoginInfo.CreateDemoDefault());
					//result.CollectionContent.Add(TBLoginInfo.CreateDemoDefault());
					//result.CollectionContent.Add(TBLoginInfo.CreateDemoDefault());
					return result;
				}
				*/

		
				[DataMember] public List<TBLoginInfo> CollectionContent = new List<TBLoginInfo>();
				private TBLoginInfo[] _unmodified_CollectionContent;

				[DataMember] public bool IsCollectionFiltered;
				private bool _unmodified_IsCollectionFiltered;
				
				[DataMember] public List<string> OrderFilterIDList = new List<string>();
				private string[] _unmodified_OrderFilterIDList;

				public string SelectedIDCommaSeparated
				{
					get
					{
						string[] sourceArray;
						if (OrderFilterIDList != null)
							sourceArray = OrderFilterIDList.ToArray();
						else
							sourceArray = CollectionContent.Select(item => item.ID).ToArray();
						return String.Join(",", sourceArray);
					}
					set 
					{
						if (value == null)
							return;
						string[] valueArray = value.Split(',');
						OrderFilterIDList = new List<string>();
						OrderFilterIDList.AddRange(valueArray);
						OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
					}
				}

				public TBLoginInfo[] GetIDSelectedArray()
				{
					if (IsCollectionFiltered == false || this.OrderFilterIDList == null)
						return CollectionContent.ToArray();
					return
						this.OrderFilterIDList.Select(id => CollectionContent.FirstOrDefault(item => item.ID == id)).Where(item => item != null).ToArray();
				}

				public void RefreshOrderAndFilterListFromContent()
                {
                    if (OrderFilterIDList == null)
                        return;
                    OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
                }

				public void ParsePropertyValue(string propertyName, string propertyValue)
				{
					switch(propertyName)
					{
						case "SelectedIDCommaSeparated":
							SelectedIDCommaSeparated = propertyValue;
							break;
						case "IsCollectionFiltered":
							IsCollectionFiltered = bool.Parse(propertyValue);
							break;
						default:
							throw new NotSupportedException("No ParsePropertyValue supported for property: " + propertyName);
					}
				}


				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					for(int i = 0; i < CollectionContent.Count; i++) // >
					{
						if(CollectionContent[i].ID == replacingObject.ID)
							CollectionContent[i] = (TBLoginInfo )replacingObject;
						else { // Cannot have circular reference, so can be in else branch
							IInformationObject iObject = CollectionContent[i];
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}

				
				bool IInformationObject.IsInstanceTreeModified {
					get {
						bool collectionModified = CollectionContent.SequenceEqual(_unmodified_CollectionContent) == false;
						if(collectionModified)
							return true;
						//if((OrderFilterIDList == null && _unmodified_OrderFilterIDList != null) || _unmodified_OrderFilterIDList
						if(IsCollectionFiltered != _unmodified_IsCollectionFiltered)
							return true;
						// For non-master content
						foreach(IInformationObject item in CollectionContent)
						{
							bool itemTreeModified = item.IsInstanceTreeModified;
							if(itemTreeModified)
								return true;
						}
							
						return false;
					}
				}
				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_CollectionContent = CollectionContent.ToArray();
					_unmodified_IsCollectionFiltered = IsCollectionFiltered;
					if(OrderFilterIDList == null)
						_unmodified_OrderFilterIDList = null;
					else
						_unmodified_OrderFilterIDList = OrderFilterIDList.ToArray();
					foreach(IInformationObject iObject in CollectionContent)
						iObject.SetInstanceTreeValuesAsUnmodified();
				}

				private void CopyContentFrom(TBLoginInfoCollection sourceObject)
				{
					CollectionContent = sourceObject.CollectionContent;
					_unmodified_CollectionContent = sourceObject._unmodified_CollectionContent;
				}
				
				private object FindFromObjectTree(string objectId)
				{
					foreach(var item in CollectionContent)
					{
						object result = item.FindObjectByID(objectId);
						if(result != null)
							return result;
					}
					return null;
				}

				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					foreach(IInformationObject iObject in CollectionContent)
						iObject.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
				}


				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						bool doAdd = true;
						if(filterOnFalse != null)
							doAdd = filterOnFalse(iObject);
						if(doAdd) {
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
				}


			
			}
			[DataContract] 
			[Serializable]
			public partial class TBEmail : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public TBEmail()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "TBEmail";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/TBEmail/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(TBEmail), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<TBEmail>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: TBEmail");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(TBEmail), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/TBEmail/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/TBEmail/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((TBEmail) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(TBEmail));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static TBEmail DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(TBEmail));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (TBEmail) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "TBEmail", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "TBEmail", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref TBEmail customDemoObject);



				public static TBEmail CreateDefault()
				{
					var result = new TBEmail();
					return result;
				}
				/*
				public static TBEmail CreateDemoDefault()
				{
					TBEmail customDemo = null;
					TBEmail.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new TBEmail();
					result.EmailAddress = @"TBEmail.EmailAddress";

				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(EmailAddress != _unmodified_EmailAddress)
							return true;
						if(ValidatedAt != _unmodified_ValidatedAt)
							return true;
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
				}


				private void CopyContentFrom(TBEmail sourceObject)
				{
					EmailAddress = sourceObject.EmailAddress;
					ValidatedAt = sourceObject.ValidatedAt;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_EmailAddress = EmailAddress;
					_unmodified_ValidatedAt = ValidatedAt;
				
				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "EmailAddress":
							EmailAddress = value;
							break;
						case "ValidatedAt":
							ValidatedAt = DateTime.Parse(value);
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string EmailAddress { get; set; }
			private string _unmodified_EmailAddress;
			[DataMember] 
			public DateTime ValidatedAt { get; set; }
			private DateTime _unmodified_ValidatedAt;
			
			}
			[DataContract] 
			[Serializable]
			public partial class TBEmailCollection : IInformationObject , IInformationCollection
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public TBEmailCollection()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "TBEmailCollection";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/TBEmailCollection/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(TBEmailCollection), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<TBEmailCollection>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: TBEmailCollection");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(TBEmailCollection), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/TBEmailCollection/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/TBEmailCollection/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((TBEmailCollection) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(TBEmailCollection));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static TBEmailCollection DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(TBEmailCollection));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (TBEmailCollection) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "TBEmailCollection", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "TBEmailCollection", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref TBEmailCollection customDemoObject);


				
				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.UpdateCollections(masterInstance);
					}
				}



				bool IInformationCollection.IsMasterCollection {
					get {
						return false;
					}
				}

				string IInformationCollection.GetMasterLocation()
				{
					throw new NotSupportedException("Master collection location only supported for master collections");
					
				}

				async Task<IInformationCollection> IInformationCollection.GetMasterInstanceAsync()
				{
					throw new NotSupportedException("Master collection instance only supported for master collections");
					
				}


				public string GetItemDirectory()
				{
					string dummyItemLocation = ObjectStorage.GetRelativeLocationFromID<TBEmail>("dummy");
					string nonOwnerDirectoryLocation = StorageSupport.GetParentDirectoryTarget(dummyItemLocation);
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					string ownerDirectoryLocation = StorageSupport.GetOwnerContentLocation(owner, nonOwnerDirectoryLocation);
					return ownerDirectoryLocation;
				}

				public async Task RefreshContentAsync()
				{
				}




                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }

				
		
				public static TBEmailCollection CreateDefault()
				{
					var result = new TBEmailCollection();
					return result;
				}

				/*
				public static TBEmailCollection CreateDemoDefault()
				{
					TBEmailCollection customDemo = null;
					TBEmailCollection.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new TBEmailCollection();
					result.CollectionContent.Add(TBEmail.CreateDemoDefault());
					//result.CollectionContent.Add(TBEmail.CreateDemoDefault());
					//result.CollectionContent.Add(TBEmail.CreateDemoDefault());
					return result;
				}
				*/

		
				[DataMember] public List<TBEmail> CollectionContent = new List<TBEmail>();
				private TBEmail[] _unmodified_CollectionContent;

				[DataMember] public bool IsCollectionFiltered;
				private bool _unmodified_IsCollectionFiltered;
				
				[DataMember] public List<string> OrderFilterIDList = new List<string>();
				private string[] _unmodified_OrderFilterIDList;

				public string SelectedIDCommaSeparated
				{
					get
					{
						string[] sourceArray;
						if (OrderFilterIDList != null)
							sourceArray = OrderFilterIDList.ToArray();
						else
							sourceArray = CollectionContent.Select(item => item.ID).ToArray();
						return String.Join(",", sourceArray);
					}
					set 
					{
						if (value == null)
							return;
						string[] valueArray = value.Split(',');
						OrderFilterIDList = new List<string>();
						OrderFilterIDList.AddRange(valueArray);
						OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
					}
				}

				public TBEmail[] GetIDSelectedArray()
				{
					if (IsCollectionFiltered == false || this.OrderFilterIDList == null)
						return CollectionContent.ToArray();
					return
						this.OrderFilterIDList.Select(id => CollectionContent.FirstOrDefault(item => item.ID == id)).Where(item => item != null).ToArray();
				}

				public void RefreshOrderAndFilterListFromContent()
                {
                    if (OrderFilterIDList == null)
                        return;
                    OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
                }

				public void ParsePropertyValue(string propertyName, string propertyValue)
				{
					switch(propertyName)
					{
						case "SelectedIDCommaSeparated":
							SelectedIDCommaSeparated = propertyValue;
							break;
						case "IsCollectionFiltered":
							IsCollectionFiltered = bool.Parse(propertyValue);
							break;
						default:
							throw new NotSupportedException("No ParsePropertyValue supported for property: " + propertyName);
					}
				}


				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					for(int i = 0; i < CollectionContent.Count; i++) // >
					{
						if(CollectionContent[i].ID == replacingObject.ID)
							CollectionContent[i] = (TBEmail )replacingObject;
						else { // Cannot have circular reference, so can be in else branch
							IInformationObject iObject = CollectionContent[i];
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}

				
				bool IInformationObject.IsInstanceTreeModified {
					get {
						bool collectionModified = CollectionContent.SequenceEqual(_unmodified_CollectionContent) == false;
						if(collectionModified)
							return true;
						//if((OrderFilterIDList == null && _unmodified_OrderFilterIDList != null) || _unmodified_OrderFilterIDList
						if(IsCollectionFiltered != _unmodified_IsCollectionFiltered)
							return true;
						// For non-master content
						foreach(IInformationObject item in CollectionContent)
						{
							bool itemTreeModified = item.IsInstanceTreeModified;
							if(itemTreeModified)
								return true;
						}
							
						return false;
					}
				}
				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_CollectionContent = CollectionContent.ToArray();
					_unmodified_IsCollectionFiltered = IsCollectionFiltered;
					if(OrderFilterIDList == null)
						_unmodified_OrderFilterIDList = null;
					else
						_unmodified_OrderFilterIDList = OrderFilterIDList.ToArray();
					foreach(IInformationObject iObject in CollectionContent)
						iObject.SetInstanceTreeValuesAsUnmodified();
				}

				private void CopyContentFrom(TBEmailCollection sourceObject)
				{
					CollectionContent = sourceObject.CollectionContent;
					_unmodified_CollectionContent = sourceObject._unmodified_CollectionContent;
				}
				
				private object FindFromObjectTree(string objectId)
				{
					foreach(var item in CollectionContent)
					{
						object result = item.FindObjectByID(objectId);
						if(result != null)
							return result;
					}
					return null;
				}

				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					foreach(IInformationObject iObject in CollectionContent)
						iObject.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
				}


				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						bool doAdd = true;
						if(filterOnFalse != null)
							doAdd = filterOnFalse(iObject);
						if(doAdd) {
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
				}


			
			}
			[DataContract] 
			[Serializable]
			public partial class TBCollaboratorRole : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public TBCollaboratorRole()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "TBCollaboratorRole";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/TBCollaboratorRole/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(TBCollaboratorRole), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<TBCollaboratorRole>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: TBCollaboratorRole");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(TBCollaboratorRole), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/TBCollaboratorRole/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/TBCollaboratorRole/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((TBCollaboratorRole) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(TBCollaboratorRole));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static TBCollaboratorRole DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(TBCollaboratorRole));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (TBCollaboratorRole) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "TBCollaboratorRole", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "TBCollaboratorRole", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref TBCollaboratorRole customDemoObject);



				public static TBCollaboratorRole CreateDefault()
				{
					var result = new TBCollaboratorRole();
					result.Email = TBEmail.CreateDefault();
					return result;
				}
				/*
				public static TBCollaboratorRole CreateDemoDefault()
				{
					TBCollaboratorRole customDemo = null;
					TBCollaboratorRole.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new TBCollaboratorRole();
					result.Email = TBEmail.CreateDemoDefault();
					result.Role = @"TBCollaboratorRole.Role";

					result.RoleStatus = @"TBCollaboratorRole.RoleStatus";

				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
					if(Email != null) {
						((IInformationObject) Email).UpdateCollections(masterInstance);
					}

				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					{ // Scoping block for variable name reusability
						IInformationObject item = Email;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					{
						var item = Email;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					{
						var item = (IInformationObject) Email;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(Email != _unmodified_Email)
							return true;
						if(Role != _unmodified_Role)
							return true;
						if(RoleStatus != _unmodified_RoleStatus)
							return true;
						{
							IInformationObject item = (IInformationObject) Email;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					if(Email != null) {
						if(Email.ID == replacingObject.ID)
							Email = (TBEmail) replacingObject;
						else {
							IInformationObject iObject = Email;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}


				private void CopyContentFrom(TBCollaboratorRole sourceObject)
				{
					Email = sourceObject.Email;
					Role = sourceObject.Role;
					RoleStatus = sourceObject.RoleStatus;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_Role = Role;
					_unmodified_RoleStatus = RoleStatus;
				
					_unmodified_Email = Email;
					if(Email != null)
						((IInformationObject) Email).SetInstanceTreeValuesAsUnmodified();

				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "Role":
							Role = value;
							break;
						case "RoleStatus":
							RoleStatus = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public TBEmail Email { get; set; }
			private TBEmail _unmodified_Email;
			[DataMember] 
			public string Role { get; set; }
			private string _unmodified_Role;
			[DataMember] 
			public string RoleStatus { get; set; }
			private string _unmodified_RoleStatus;
			
			}
			[DataContract] 
			[Serializable]
			public partial class TBCollaboratorRoleCollection : IInformationObject , IInformationCollection
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public TBCollaboratorRoleCollection()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "TBCollaboratorRoleCollection";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/TBCollaboratorRoleCollection/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(TBCollaboratorRoleCollection), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<TBCollaboratorRoleCollection>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: TBCollaboratorRoleCollection");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(TBCollaboratorRoleCollection), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/TBCollaboratorRoleCollection/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/TBCollaboratorRoleCollection/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((TBCollaboratorRoleCollection) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(TBCollaboratorRoleCollection));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static TBCollaboratorRoleCollection DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(TBCollaboratorRoleCollection));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (TBCollaboratorRoleCollection) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "TBCollaboratorRoleCollection", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "TBCollaboratorRoleCollection", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref TBCollaboratorRoleCollection customDemoObject);


				
				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.UpdateCollections(masterInstance);
					}
				}



				bool IInformationCollection.IsMasterCollection {
					get {
						return false;
					}
				}

				string IInformationCollection.GetMasterLocation()
				{
					throw new NotSupportedException("Master collection location only supported for master collections");
					
				}

				async Task<IInformationCollection> IInformationCollection.GetMasterInstanceAsync()
				{
					throw new NotSupportedException("Master collection instance only supported for master collections");
					
				}


				public string GetItemDirectory()
				{
					string dummyItemLocation = ObjectStorage.GetRelativeLocationFromID<TBCollaboratorRole>("dummy");
					string nonOwnerDirectoryLocation = StorageSupport.GetParentDirectoryTarget(dummyItemLocation);
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					string ownerDirectoryLocation = StorageSupport.GetOwnerContentLocation(owner, nonOwnerDirectoryLocation);
					return ownerDirectoryLocation;
				}

				public async Task RefreshContentAsync()
				{
				}




                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }

				
		
				public static TBCollaboratorRoleCollection CreateDefault()
				{
					var result = new TBCollaboratorRoleCollection();
					return result;
				}

				/*
				public static TBCollaboratorRoleCollection CreateDemoDefault()
				{
					TBCollaboratorRoleCollection customDemo = null;
					TBCollaboratorRoleCollection.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new TBCollaboratorRoleCollection();
					result.CollectionContent.Add(TBCollaboratorRole.CreateDemoDefault());
					//result.CollectionContent.Add(TBCollaboratorRole.CreateDemoDefault());
					//result.CollectionContent.Add(TBCollaboratorRole.CreateDemoDefault());
					return result;
				}
				*/

		
				[DataMember] public List<TBCollaboratorRole> CollectionContent = new List<TBCollaboratorRole>();
				private TBCollaboratorRole[] _unmodified_CollectionContent;

				[DataMember] public bool IsCollectionFiltered;
				private bool _unmodified_IsCollectionFiltered;
				
				[DataMember] public List<string> OrderFilterIDList = new List<string>();
				private string[] _unmodified_OrderFilterIDList;

				public string SelectedIDCommaSeparated
				{
					get
					{
						string[] sourceArray;
						if (OrderFilterIDList != null)
							sourceArray = OrderFilterIDList.ToArray();
						else
							sourceArray = CollectionContent.Select(item => item.ID).ToArray();
						return String.Join(",", sourceArray);
					}
					set 
					{
						if (value == null)
							return;
						string[] valueArray = value.Split(',');
						OrderFilterIDList = new List<string>();
						OrderFilterIDList.AddRange(valueArray);
						OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
					}
				}

				public TBCollaboratorRole[] GetIDSelectedArray()
				{
					if (IsCollectionFiltered == false || this.OrderFilterIDList == null)
						return CollectionContent.ToArray();
					return
						this.OrderFilterIDList.Select(id => CollectionContent.FirstOrDefault(item => item.ID == id)).Where(item => item != null).ToArray();
				}

				public void RefreshOrderAndFilterListFromContent()
                {
                    if (OrderFilterIDList == null)
                        return;
                    OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
                }

				public void ParsePropertyValue(string propertyName, string propertyValue)
				{
					switch(propertyName)
					{
						case "SelectedIDCommaSeparated":
							SelectedIDCommaSeparated = propertyValue;
							break;
						case "IsCollectionFiltered":
							IsCollectionFiltered = bool.Parse(propertyValue);
							break;
						default:
							throw new NotSupportedException("No ParsePropertyValue supported for property: " + propertyName);
					}
				}


				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					for(int i = 0; i < CollectionContent.Count; i++) // >
					{
						if(CollectionContent[i].ID == replacingObject.ID)
							CollectionContent[i] = (TBCollaboratorRole )replacingObject;
						else { // Cannot have circular reference, so can be in else branch
							IInformationObject iObject = CollectionContent[i];
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}

				
				bool IInformationObject.IsInstanceTreeModified {
					get {
						bool collectionModified = CollectionContent.SequenceEqual(_unmodified_CollectionContent) == false;
						if(collectionModified)
							return true;
						//if((OrderFilterIDList == null && _unmodified_OrderFilterIDList != null) || _unmodified_OrderFilterIDList
						if(IsCollectionFiltered != _unmodified_IsCollectionFiltered)
							return true;
						// For non-master content
						foreach(IInformationObject item in CollectionContent)
						{
							bool itemTreeModified = item.IsInstanceTreeModified;
							if(itemTreeModified)
								return true;
						}
							
						return false;
					}
				}
				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_CollectionContent = CollectionContent.ToArray();
					_unmodified_IsCollectionFiltered = IsCollectionFiltered;
					if(OrderFilterIDList == null)
						_unmodified_OrderFilterIDList = null;
					else
						_unmodified_OrderFilterIDList = OrderFilterIDList.ToArray();
					foreach(IInformationObject iObject in CollectionContent)
						iObject.SetInstanceTreeValuesAsUnmodified();
				}

				private void CopyContentFrom(TBCollaboratorRoleCollection sourceObject)
				{
					CollectionContent = sourceObject.CollectionContent;
					_unmodified_CollectionContent = sourceObject._unmodified_CollectionContent;
				}
				
				private object FindFromObjectTree(string objectId)
				{
					foreach(var item in CollectionContent)
					{
						object result = item.FindObjectByID(objectId);
						if(result != null)
							return result;
					}
					return null;
				}

				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					foreach(IInformationObject iObject in CollectionContent)
						iObject.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
				}


				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						bool doAdd = true;
						if(filterOnFalse != null)
							doAdd = filterOnFalse(iObject);
						if(doAdd) {
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
				}


			
			}
			[DataContract] 
			[Serializable]
			public partial class TBCollaboratingGroup : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public TBCollaboratingGroup()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "TBCollaboratingGroup";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/TBCollaboratingGroup/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(TBCollaboratingGroup), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<TBCollaboratingGroup>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: TBCollaboratingGroup");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(TBCollaboratingGroup), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/TBCollaboratingGroup/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/TBCollaboratingGroup/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((TBCollaboratingGroup) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(TBCollaboratingGroup));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static TBCollaboratingGroup DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(TBCollaboratingGroup));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (TBCollaboratingGroup) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "TBCollaboratingGroup", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "TBCollaboratingGroup", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref TBCollaboratingGroup customDemoObject);



				public static TBCollaboratingGroup CreateDefault()
				{
					var result = new TBCollaboratingGroup();
					result.Roles = TBCollaboratorRoleCollection.CreateDefault();
					return result;
				}
				/*
				public static TBCollaboratingGroup CreateDemoDefault()
				{
					TBCollaboratingGroup customDemo = null;
					TBCollaboratingGroup.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new TBCollaboratingGroup();
					result.Title = @"TBCollaboratingGroup.Title";

					result.Roles = TBCollaboratorRoleCollection.CreateDemoDefault();
				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
					if(Roles != null) {
						((IInformationObject) Roles).UpdateCollections(masterInstance);
					}

				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					{ // Scoping block for variable name reusability
						IInformationObject item = Roles;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					{
						var item = Roles;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					{
						var item = (IInformationObject) Roles;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(Title != _unmodified_Title)
							return true;
						if(Roles != _unmodified_Roles)
							return true;
						{
							IInformationObject item = (IInformationObject) Roles;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					if(Roles != null) {
						if(Roles.ID == replacingObject.ID)
							Roles = (TBCollaboratorRoleCollection) replacingObject;
						else {
							IInformationObject iObject = Roles;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}


				private void CopyContentFrom(TBCollaboratingGroup sourceObject)
				{
					Title = sourceObject.Title;
					Roles = sourceObject.Roles;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_Title = Title;
				
					_unmodified_Roles = Roles;
					if(Roles != null)
						((IInformationObject) Roles).SetInstanceTreeValuesAsUnmodified();

				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "Title":
							Title = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string Title { get; set; }
			private string _unmodified_Title;
			[DataMember] 
			public TBCollaboratorRoleCollection Roles { get; set; }
			private TBCollaboratorRoleCollection _unmodified_Roles;
			
			}
			[DataContract] 
			[Serializable]
			public partial class TBEmailValidation : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public TBEmailValidation()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "TBEmailValidation";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/TBEmailValidation/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(TBEmailValidation), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<TBEmailValidation>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: TBEmailValidation");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(TBEmailValidation), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/TBEmailValidation/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/TBEmailValidation/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((TBEmailValidation) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(TBEmailValidation));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static TBEmailValidation DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(TBEmailValidation));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (TBEmailValidation) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "TBEmailValidation", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "TBEmailValidation", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref TBEmailValidation customDemoObject);



				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
					if(GroupJoinConfirmation != null) {
						((IInformationObject) GroupJoinConfirmation).UpdateCollections(masterInstance);
					}

					if(DeviceJoinConfirmation != null) {
						((IInformationObject) DeviceJoinConfirmation).UpdateCollections(masterInstance);
					}

					if(InformationInputConfirmation != null) {
						((IInformationObject) InformationInputConfirmation).UpdateCollections(masterInstance);
					}

					if(InformationOutputConfirmation != null) {
						((IInformationObject) InformationOutputConfirmation).UpdateCollections(masterInstance);
					}

					if(MergeAccountsConfirmation != null) {
						((IInformationObject) MergeAccountsConfirmation).UpdateCollections(masterInstance);
					}

				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					{ // Scoping block for variable name reusability
						IInformationObject item = GroupJoinConfirmation;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					{ // Scoping block for variable name reusability
						IInformationObject item = DeviceJoinConfirmation;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					{ // Scoping block for variable name reusability
						IInformationObject item = InformationInputConfirmation;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					{ // Scoping block for variable name reusability
						IInformationObject item = InformationOutputConfirmation;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					{ // Scoping block for variable name reusability
						IInformationObject item = MergeAccountsConfirmation;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					{
						var item = GroupJoinConfirmation;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = DeviceJoinConfirmation;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = InformationInputConfirmation;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = InformationOutputConfirmation;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = MergeAccountsConfirmation;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					{
						var item = (IInformationObject) GroupJoinConfirmation;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) DeviceJoinConfirmation;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) InformationInputConfirmation;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) InformationOutputConfirmation;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) MergeAccountsConfirmation;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(Email != _unmodified_Email)
							return true;
						if(AccountID != _unmodified_AccountID)
							return true;
						if(ValidUntil != _unmodified_ValidUntil)
							return true;
						if(GroupJoinConfirmation != _unmodified_GroupJoinConfirmation)
							return true;
						if(DeviceJoinConfirmation != _unmodified_DeviceJoinConfirmation)
							return true;
						if(InformationInputConfirmation != _unmodified_InformationInputConfirmation)
							return true;
						if(InformationOutputConfirmation != _unmodified_InformationOutputConfirmation)
							return true;
						if(MergeAccountsConfirmation != _unmodified_MergeAccountsConfirmation)
							return true;
						if(RedirectUrlAfterValidation != _unmodified_RedirectUrlAfterValidation)
							return true;
						{
							IInformationObject item = (IInformationObject) GroupJoinConfirmation;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
						{
							IInformationObject item = (IInformationObject) DeviceJoinConfirmation;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
						{
							IInformationObject item = (IInformationObject) InformationInputConfirmation;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
						{
							IInformationObject item = (IInformationObject) InformationOutputConfirmation;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
						{
							IInformationObject item = (IInformationObject) MergeAccountsConfirmation;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					if(GroupJoinConfirmation != null) {
						if(GroupJoinConfirmation.ID == replacingObject.ID)
							GroupJoinConfirmation = (TBGroupJoinConfirmation) replacingObject;
						else {
							IInformationObject iObject = GroupJoinConfirmation;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(DeviceJoinConfirmation != null) {
						if(DeviceJoinConfirmation.ID == replacingObject.ID)
							DeviceJoinConfirmation = (TBDeviceJoinConfirmation) replacingObject;
						else {
							IInformationObject iObject = DeviceJoinConfirmation;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(InformationInputConfirmation != null) {
						if(InformationInputConfirmation.ID == replacingObject.ID)
							InformationInputConfirmation = (TBInformationInputConfirmation) replacingObject;
						else {
							IInformationObject iObject = InformationInputConfirmation;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(InformationOutputConfirmation != null) {
						if(InformationOutputConfirmation.ID == replacingObject.ID)
							InformationOutputConfirmation = (TBInformationOutputConfirmation) replacingObject;
						else {
							IInformationObject iObject = InformationOutputConfirmation;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(MergeAccountsConfirmation != null) {
						if(MergeAccountsConfirmation.ID == replacingObject.ID)
							MergeAccountsConfirmation = (TBMergeAccountConfirmation) replacingObject;
						else {
							IInformationObject iObject = MergeAccountsConfirmation;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}


				private void CopyContentFrom(TBEmailValidation sourceObject)
				{
					Email = sourceObject.Email;
					AccountID = sourceObject.AccountID;
					ValidUntil = sourceObject.ValidUntil;
					GroupJoinConfirmation = sourceObject.GroupJoinConfirmation;
					DeviceJoinConfirmation = sourceObject.DeviceJoinConfirmation;
					InformationInputConfirmation = sourceObject.InformationInputConfirmation;
					InformationOutputConfirmation = sourceObject.InformationOutputConfirmation;
					MergeAccountsConfirmation = sourceObject.MergeAccountsConfirmation;
					RedirectUrlAfterValidation = sourceObject.RedirectUrlAfterValidation;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_Email = Email;
					_unmodified_AccountID = AccountID;
					_unmodified_ValidUntil = ValidUntil;
					_unmodified_RedirectUrlAfterValidation = RedirectUrlAfterValidation;
				
					_unmodified_GroupJoinConfirmation = GroupJoinConfirmation;
					if(GroupJoinConfirmation != null)
						((IInformationObject) GroupJoinConfirmation).SetInstanceTreeValuesAsUnmodified();

					_unmodified_DeviceJoinConfirmation = DeviceJoinConfirmation;
					if(DeviceJoinConfirmation != null)
						((IInformationObject) DeviceJoinConfirmation).SetInstanceTreeValuesAsUnmodified();

					_unmodified_InformationInputConfirmation = InformationInputConfirmation;
					if(InformationInputConfirmation != null)
						((IInformationObject) InformationInputConfirmation).SetInstanceTreeValuesAsUnmodified();

					_unmodified_InformationOutputConfirmation = InformationOutputConfirmation;
					if(InformationOutputConfirmation != null)
						((IInformationObject) InformationOutputConfirmation).SetInstanceTreeValuesAsUnmodified();

					_unmodified_MergeAccountsConfirmation = MergeAccountsConfirmation;
					if(MergeAccountsConfirmation != null)
						((IInformationObject) MergeAccountsConfirmation).SetInstanceTreeValuesAsUnmodified();

				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "Email":
							Email = value;
							break;
						case "AccountID":
							AccountID = value;
							break;
						case "ValidUntil":
							ValidUntil = DateTime.Parse(value);
							break;
						case "RedirectUrlAfterValidation":
							RedirectUrlAfterValidation = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string Email { get; set; }
			private string _unmodified_Email;
			[DataMember] 
			public string AccountID { get; set; }
			private string _unmodified_AccountID;
			[DataMember] 
			public DateTime ValidUntil { get; set; }
			private DateTime _unmodified_ValidUntil;
			[DataMember] 
			public TBGroupJoinConfirmation GroupJoinConfirmation { get; set; }
			private TBGroupJoinConfirmation _unmodified_GroupJoinConfirmation;
			[DataMember] 
			public TBDeviceJoinConfirmation DeviceJoinConfirmation { get; set; }
			private TBDeviceJoinConfirmation _unmodified_DeviceJoinConfirmation;
			[DataMember] 
			public TBInformationInputConfirmation InformationInputConfirmation { get; set; }
			private TBInformationInputConfirmation _unmodified_InformationInputConfirmation;
			[DataMember] 
			public TBInformationOutputConfirmation InformationOutputConfirmation { get; set; }
			private TBInformationOutputConfirmation _unmodified_InformationOutputConfirmation;
			[DataMember] 
			public TBMergeAccountConfirmation MergeAccountsConfirmation { get; set; }
			private TBMergeAccountConfirmation _unmodified_MergeAccountsConfirmation;
			[DataMember] 
			public string RedirectUrlAfterValidation { get; set; }
			private string _unmodified_RedirectUrlAfterValidation;
			
			}
			[DataContract] 
			[Serializable]
			public partial class TBMergeAccountConfirmation : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public TBMergeAccountConfirmation()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "TBMergeAccountConfirmation";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/TBMergeAccountConfirmation/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(TBMergeAccountConfirmation), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<TBMergeAccountConfirmation>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: TBMergeAccountConfirmation");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(TBMergeAccountConfirmation), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/TBMergeAccountConfirmation/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/TBMergeAccountConfirmation/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((TBMergeAccountConfirmation) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(TBMergeAccountConfirmation));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static TBMergeAccountConfirmation DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(TBMergeAccountConfirmation));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (TBMergeAccountConfirmation) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "TBMergeAccountConfirmation", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "TBMergeAccountConfirmation", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref TBMergeAccountConfirmation customDemoObject);



				public static TBMergeAccountConfirmation CreateDefault()
				{
					var result = new TBMergeAccountConfirmation();
					return result;
				}
				/*
				public static TBMergeAccountConfirmation CreateDemoDefault()
				{
					TBMergeAccountConfirmation customDemo = null;
					TBMergeAccountConfirmation.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new TBMergeAccountConfirmation();
					result.AccountToBeMergedID = @"TBMergeAccountConfirmation.AccountToBeMergedID";

					result.AccountToMergeToID = @"TBMergeAccountConfirmation.AccountToMergeToID";

				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(AccountToBeMergedID != _unmodified_AccountToBeMergedID)
							return true;
						if(AccountToMergeToID != _unmodified_AccountToMergeToID)
							return true;
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
				}


				private void CopyContentFrom(TBMergeAccountConfirmation sourceObject)
				{
					AccountToBeMergedID = sourceObject.AccountToBeMergedID;
					AccountToMergeToID = sourceObject.AccountToMergeToID;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_AccountToBeMergedID = AccountToBeMergedID;
					_unmodified_AccountToMergeToID = AccountToMergeToID;
				
				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "AccountToBeMergedID":
							AccountToBeMergedID = value;
							break;
						case "AccountToMergeToID":
							AccountToMergeToID = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string AccountToBeMergedID { get; set; }
			private string _unmodified_AccountToBeMergedID;
			[DataMember] 
			public string AccountToMergeToID { get; set; }
			private string _unmodified_AccountToMergeToID;
			
			}
			[DataContract] 
			[Serializable]
			public partial class TBGroupJoinConfirmation : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public TBGroupJoinConfirmation()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "TBGroupJoinConfirmation";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/TBGroupJoinConfirmation/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(TBGroupJoinConfirmation), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<TBGroupJoinConfirmation>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: TBGroupJoinConfirmation");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(TBGroupJoinConfirmation), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/TBGroupJoinConfirmation/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/TBGroupJoinConfirmation/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((TBGroupJoinConfirmation) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(TBGroupJoinConfirmation));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static TBGroupJoinConfirmation DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(TBGroupJoinConfirmation));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (TBGroupJoinConfirmation) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "TBGroupJoinConfirmation", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "TBGroupJoinConfirmation", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref TBGroupJoinConfirmation customDemoObject);



				public static TBGroupJoinConfirmation CreateDefault()
				{
					var result = new TBGroupJoinConfirmation();
					return result;
				}
				/*
				public static TBGroupJoinConfirmation CreateDemoDefault()
				{
					TBGroupJoinConfirmation customDemo = null;
					TBGroupJoinConfirmation.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new TBGroupJoinConfirmation();
					result.GroupID = @"TBGroupJoinConfirmation.GroupID";

					result.InvitationMode = @"TBGroupJoinConfirmation.InvitationMode";

				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(GroupID != _unmodified_GroupID)
							return true;
						if(InvitationMode != _unmodified_InvitationMode)
							return true;
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
				}


				private void CopyContentFrom(TBGroupJoinConfirmation sourceObject)
				{
					GroupID = sourceObject.GroupID;
					InvitationMode = sourceObject.InvitationMode;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_GroupID = GroupID;
					_unmodified_InvitationMode = InvitationMode;
				
				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "GroupID":
							GroupID = value;
							break;
						case "InvitationMode":
							InvitationMode = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string GroupID { get; set; }
			private string _unmodified_GroupID;
			[DataMember] 
			public string InvitationMode { get; set; }
			private string _unmodified_InvitationMode;
			
			}
			[DataContract] 
			[Serializable]
			public partial class TBDeviceJoinConfirmation : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public TBDeviceJoinConfirmation()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "TBDeviceJoinConfirmation";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/TBDeviceJoinConfirmation/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(TBDeviceJoinConfirmation), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<TBDeviceJoinConfirmation>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: TBDeviceJoinConfirmation");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(TBDeviceJoinConfirmation), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/TBDeviceJoinConfirmation/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/TBDeviceJoinConfirmation/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((TBDeviceJoinConfirmation) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(TBDeviceJoinConfirmation));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static TBDeviceJoinConfirmation DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(TBDeviceJoinConfirmation));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (TBDeviceJoinConfirmation) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "TBDeviceJoinConfirmation", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "TBDeviceJoinConfirmation", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref TBDeviceJoinConfirmation customDemoObject);



				public static TBDeviceJoinConfirmation CreateDefault()
				{
					var result = new TBDeviceJoinConfirmation();
					return result;
				}
				/*
				public static TBDeviceJoinConfirmation CreateDemoDefault()
				{
					TBDeviceJoinConfirmation customDemo = null;
					TBDeviceJoinConfirmation.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new TBDeviceJoinConfirmation();
					result.GroupID = @"TBDeviceJoinConfirmation.GroupID";

					result.AccountID = @"TBDeviceJoinConfirmation.AccountID";

					result.DeviceMembershipID = @"TBDeviceJoinConfirmation.DeviceMembershipID";

				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(GroupID != _unmodified_GroupID)
							return true;
						if(AccountID != _unmodified_AccountID)
							return true;
						if(DeviceMembershipID != _unmodified_DeviceMembershipID)
							return true;
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
				}


				private void CopyContentFrom(TBDeviceJoinConfirmation sourceObject)
				{
					GroupID = sourceObject.GroupID;
					AccountID = sourceObject.AccountID;
					DeviceMembershipID = sourceObject.DeviceMembershipID;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_GroupID = GroupID;
					_unmodified_AccountID = AccountID;
					_unmodified_DeviceMembershipID = DeviceMembershipID;
				
				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "GroupID":
							GroupID = value;
							break;
						case "AccountID":
							AccountID = value;
							break;
						case "DeviceMembershipID":
							DeviceMembershipID = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string GroupID { get; set; }
			private string _unmodified_GroupID;
			[DataMember] 
			public string AccountID { get; set; }
			private string _unmodified_AccountID;
			[DataMember] 
			public string DeviceMembershipID { get; set; }
			private string _unmodified_DeviceMembershipID;
			
			}
			[DataContract] 
			[Serializable]
			public partial class TBInformationInputConfirmation : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public TBInformationInputConfirmation()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "TBInformationInputConfirmation";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/TBInformationInputConfirmation/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(TBInformationInputConfirmation), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<TBInformationInputConfirmation>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: TBInformationInputConfirmation");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(TBInformationInputConfirmation), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/TBInformationInputConfirmation/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/TBInformationInputConfirmation/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((TBInformationInputConfirmation) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(TBInformationInputConfirmation));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static TBInformationInputConfirmation DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(TBInformationInputConfirmation));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (TBInformationInputConfirmation) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "TBInformationInputConfirmation", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "TBInformationInputConfirmation", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref TBInformationInputConfirmation customDemoObject);



				public static TBInformationInputConfirmation CreateDefault()
				{
					var result = new TBInformationInputConfirmation();
					return result;
				}
				/*
				public static TBInformationInputConfirmation CreateDemoDefault()
				{
					TBInformationInputConfirmation customDemo = null;
					TBInformationInputConfirmation.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new TBInformationInputConfirmation();
					result.GroupID = @"TBInformationInputConfirmation.GroupID";

					result.AccountID = @"TBInformationInputConfirmation.AccountID";

					result.InformationInputID = @"TBInformationInputConfirmation.InformationInputID";

				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(GroupID != _unmodified_GroupID)
							return true;
						if(AccountID != _unmodified_AccountID)
							return true;
						if(InformationInputID != _unmodified_InformationInputID)
							return true;
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
				}


				private void CopyContentFrom(TBInformationInputConfirmation sourceObject)
				{
					GroupID = sourceObject.GroupID;
					AccountID = sourceObject.AccountID;
					InformationInputID = sourceObject.InformationInputID;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_GroupID = GroupID;
					_unmodified_AccountID = AccountID;
					_unmodified_InformationInputID = InformationInputID;
				
				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "GroupID":
							GroupID = value;
							break;
						case "AccountID":
							AccountID = value;
							break;
						case "InformationInputID":
							InformationInputID = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string GroupID { get; set; }
			private string _unmodified_GroupID;
			[DataMember] 
			public string AccountID { get; set; }
			private string _unmodified_AccountID;
			[DataMember] 
			public string InformationInputID { get; set; }
			private string _unmodified_InformationInputID;
			
			}
			[DataContract] 
			[Serializable]
			public partial class TBInformationOutputConfirmation : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public TBInformationOutputConfirmation()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "TBInformationOutputConfirmation";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/TBInformationOutputConfirmation/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(TBInformationOutputConfirmation), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<TBInformationOutputConfirmation>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: TBInformationOutputConfirmation");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(TBInformationOutputConfirmation), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/TBInformationOutputConfirmation/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/TBInformationOutputConfirmation/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((TBInformationOutputConfirmation) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(TBInformationOutputConfirmation));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static TBInformationOutputConfirmation DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(TBInformationOutputConfirmation));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (TBInformationOutputConfirmation) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "TBInformationOutputConfirmation", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "TBInformationOutputConfirmation", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref TBInformationOutputConfirmation customDemoObject);



				public static TBInformationOutputConfirmation CreateDefault()
				{
					var result = new TBInformationOutputConfirmation();
					return result;
				}
				/*
				public static TBInformationOutputConfirmation CreateDemoDefault()
				{
					TBInformationOutputConfirmation customDemo = null;
					TBInformationOutputConfirmation.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new TBInformationOutputConfirmation();
					result.GroupID = @"TBInformationOutputConfirmation.GroupID";

					result.AccountID = @"TBInformationOutputConfirmation.AccountID";

					result.InformationOutputID = @"TBInformationOutputConfirmation.InformationOutputID";

				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(GroupID != _unmodified_GroupID)
							return true;
						if(AccountID != _unmodified_AccountID)
							return true;
						if(InformationOutputID != _unmodified_InformationOutputID)
							return true;
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
				}


				private void CopyContentFrom(TBInformationOutputConfirmation sourceObject)
				{
					GroupID = sourceObject.GroupID;
					AccountID = sourceObject.AccountID;
					InformationOutputID = sourceObject.InformationOutputID;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_GroupID = GroupID;
					_unmodified_AccountID = AccountID;
					_unmodified_InformationOutputID = InformationOutputID;
				
				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "GroupID":
							GroupID = value;
							break;
						case "AccountID":
							AccountID = value;
							break;
						case "InformationOutputID":
							InformationOutputID = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string GroupID { get; set; }
			private string _unmodified_GroupID;
			[DataMember] 
			public string AccountID { get; set; }
			private string _unmodified_AccountID;
			[DataMember] 
			public string InformationOutputID { get; set; }
			private string _unmodified_InformationOutputID;
			
			}
			[DataContract] 
			[Serializable]
			public partial class LoginProvider : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public LoginProvider()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "LoginProvider";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/LoginProvider/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(LoginProvider), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<LoginProvider>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: LoginProvider");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(LoginProvider), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/LoginProvider/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/LoginProvider/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((LoginProvider) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(LoginProvider));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static LoginProvider DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(LoginProvider));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (LoginProvider) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "LoginProvider", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "LoginProvider", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref LoginProvider customDemoObject);



				public static LoginProvider CreateDefault()
				{
					var result = new LoginProvider();
					return result;
				}
				/*
				public static LoginProvider CreateDemoDefault()
				{
					LoginProvider customDemo = null;
					LoginProvider.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new LoginProvider();
					result.ProviderName = @"LoginProvider.ProviderName";

					result.ProviderIconClass = @"LoginProvider.ProviderIconClass";

					result.ProviderType = @"LoginProvider.ProviderType";

					result.ProviderUrl = @"LoginProvider.ProviderUrl";

					result.ReturnUrl = @"LoginProvider.ReturnUrl";

				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(ProviderName != _unmodified_ProviderName)
							return true;
						if(ProviderIconClass != _unmodified_ProviderIconClass)
							return true;
						if(ProviderType != _unmodified_ProviderType)
							return true;
						if(ProviderUrl != _unmodified_ProviderUrl)
							return true;
						if(ReturnUrl != _unmodified_ReturnUrl)
							return true;
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
				}


				private void CopyContentFrom(LoginProvider sourceObject)
				{
					ProviderName = sourceObject.ProviderName;
					ProviderIconClass = sourceObject.ProviderIconClass;
					ProviderType = sourceObject.ProviderType;
					ProviderUrl = sourceObject.ProviderUrl;
					ReturnUrl = sourceObject.ReturnUrl;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_ProviderName = ProviderName;
					_unmodified_ProviderIconClass = ProviderIconClass;
					_unmodified_ProviderType = ProviderType;
					_unmodified_ProviderUrl = ProviderUrl;
					_unmodified_ReturnUrl = ReturnUrl;
				
				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "ProviderName":
							ProviderName = value;
							break;
						case "ProviderIconClass":
							ProviderIconClass = value;
							break;
						case "ProviderType":
							ProviderType = value;
							break;
						case "ProviderUrl":
							ProviderUrl = value;
							break;
						case "ReturnUrl":
							ReturnUrl = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string ProviderName { get; set; }
			private string _unmodified_ProviderName;
			[DataMember] 
			public string ProviderIconClass { get; set; }
			private string _unmodified_ProviderIconClass;
			[DataMember] 
			public string ProviderType { get; set; }
			private string _unmodified_ProviderType;
			[DataMember] 
			public string ProviderUrl { get; set; }
			private string _unmodified_ProviderUrl;
			[DataMember] 
			public string ReturnUrl { get; set; }
			private string _unmodified_ReturnUrl;
			
			}
			[DataContract] 
			[Serializable]
			public partial class LoginProviderCollection : IInformationObject , IInformationCollection
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public LoginProviderCollection()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "LoginProviderCollection";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/LoginProviderCollection/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(LoginProviderCollection), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<LoginProviderCollection>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: LoginProviderCollection");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(LoginProviderCollection), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/LoginProviderCollection/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/LoginProviderCollection/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((LoginProviderCollection) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(LoginProviderCollection));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static LoginProviderCollection DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(LoginProviderCollection));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (LoginProviderCollection) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "LoginProviderCollection", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "LoginProviderCollection", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref LoginProviderCollection customDemoObject);


				
				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.UpdateCollections(masterInstance);
					}
				}



				bool IInformationCollection.IsMasterCollection {
					get {
						return false;
					}
				}

				string IInformationCollection.GetMasterLocation()
				{
					throw new NotSupportedException("Master collection location only supported for master collections");
					
				}

				async Task<IInformationCollection> IInformationCollection.GetMasterInstanceAsync()
				{
					throw new NotSupportedException("Master collection instance only supported for master collections");
					
				}


				public string GetItemDirectory()
				{
					string dummyItemLocation = ObjectStorage.GetRelativeLocationFromID<LoginProvider>("dummy");
					string nonOwnerDirectoryLocation = StorageSupport.GetParentDirectoryTarget(dummyItemLocation);
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					string ownerDirectoryLocation = StorageSupport.GetOwnerContentLocation(owner, nonOwnerDirectoryLocation);
					return ownerDirectoryLocation;
				}

				public async Task RefreshContentAsync()
				{
				}




                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }

				
		
				public static LoginProviderCollection CreateDefault()
				{
					var result = new LoginProviderCollection();
					return result;
				}

				/*
				public static LoginProviderCollection CreateDemoDefault()
				{
					LoginProviderCollection customDemo = null;
					LoginProviderCollection.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new LoginProviderCollection();
					result.CollectionContent.Add(LoginProvider.CreateDemoDefault());
					//result.CollectionContent.Add(LoginProvider.CreateDemoDefault());
					//result.CollectionContent.Add(LoginProvider.CreateDemoDefault());
					return result;
				}
				*/

		
				[DataMember] public List<LoginProvider> CollectionContent = new List<LoginProvider>();
				private LoginProvider[] _unmodified_CollectionContent;

				[DataMember] public bool IsCollectionFiltered;
				private bool _unmodified_IsCollectionFiltered;
				
				[DataMember] public List<string> OrderFilterIDList = new List<string>();
				private string[] _unmodified_OrderFilterIDList;

				public string SelectedIDCommaSeparated
				{
					get
					{
						string[] sourceArray;
						if (OrderFilterIDList != null)
							sourceArray = OrderFilterIDList.ToArray();
						else
							sourceArray = CollectionContent.Select(item => item.ID).ToArray();
						return String.Join(",", sourceArray);
					}
					set 
					{
						if (value == null)
							return;
						string[] valueArray = value.Split(',');
						OrderFilterIDList = new List<string>();
						OrderFilterIDList.AddRange(valueArray);
						OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
					}
				}

				public LoginProvider[] GetIDSelectedArray()
				{
					if (IsCollectionFiltered == false || this.OrderFilterIDList == null)
						return CollectionContent.ToArray();
					return
						this.OrderFilterIDList.Select(id => CollectionContent.FirstOrDefault(item => item.ID == id)).Where(item => item != null).ToArray();
				}

				public void RefreshOrderAndFilterListFromContent()
                {
                    if (OrderFilterIDList == null)
                        return;
                    OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
                }

				public void ParsePropertyValue(string propertyName, string propertyValue)
				{
					switch(propertyName)
					{
						case "SelectedIDCommaSeparated":
							SelectedIDCommaSeparated = propertyValue;
							break;
						case "IsCollectionFiltered":
							IsCollectionFiltered = bool.Parse(propertyValue);
							break;
						default:
							throw new NotSupportedException("No ParsePropertyValue supported for property: " + propertyName);
					}
				}


				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					for(int i = 0; i < CollectionContent.Count; i++) // >
					{
						if(CollectionContent[i].ID == replacingObject.ID)
							CollectionContent[i] = (LoginProvider )replacingObject;
						else { // Cannot have circular reference, so can be in else branch
							IInformationObject iObject = CollectionContent[i];
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}

				
				bool IInformationObject.IsInstanceTreeModified {
					get {
						bool collectionModified = CollectionContent.SequenceEqual(_unmodified_CollectionContent) == false;
						if(collectionModified)
							return true;
						//if((OrderFilterIDList == null && _unmodified_OrderFilterIDList != null) || _unmodified_OrderFilterIDList
						if(IsCollectionFiltered != _unmodified_IsCollectionFiltered)
							return true;
						// For non-master content
						foreach(IInformationObject item in CollectionContent)
						{
							bool itemTreeModified = item.IsInstanceTreeModified;
							if(itemTreeModified)
								return true;
						}
							
						return false;
					}
				}
				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_CollectionContent = CollectionContent.ToArray();
					_unmodified_IsCollectionFiltered = IsCollectionFiltered;
					if(OrderFilterIDList == null)
						_unmodified_OrderFilterIDList = null;
					else
						_unmodified_OrderFilterIDList = OrderFilterIDList.ToArray();
					foreach(IInformationObject iObject in CollectionContent)
						iObject.SetInstanceTreeValuesAsUnmodified();
				}

				private void CopyContentFrom(LoginProviderCollection sourceObject)
				{
					CollectionContent = sourceObject.CollectionContent;
					_unmodified_CollectionContent = sourceObject._unmodified_CollectionContent;
				}
				
				private object FindFromObjectTree(string objectId)
				{
					foreach(var item in CollectionContent)
					{
						object result = item.FindObjectByID(objectId);
						if(result != null)
							return result;
					}
					return null;
				}

				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					foreach(IInformationObject iObject in CollectionContent)
						iObject.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
				}


				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						bool doAdd = true;
						if(filterOnFalse != null)
							doAdd = filterOnFalse(iObject);
						if(doAdd) {
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
				}


			
			}
			[DataContract] 
			[Serializable]
			public partial class TBPRegisterEmail : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public TBPRegisterEmail()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "TBPRegisterEmail";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/TBPRegisterEmail/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(TBPRegisterEmail), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<TBPRegisterEmail>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: TBPRegisterEmail");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(TBPRegisterEmail), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/TBPRegisterEmail/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/TBPRegisterEmail/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((TBPRegisterEmail) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(TBPRegisterEmail));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static TBPRegisterEmail DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(TBPRegisterEmail));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (TBPRegisterEmail) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "TBPRegisterEmail", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "TBPRegisterEmail", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref TBPRegisterEmail customDemoObject);



				public static TBPRegisterEmail CreateDefault()
				{
					var result = new TBPRegisterEmail();
					return result;
				}
				/*
				public static TBPRegisterEmail CreateDemoDefault()
				{
					TBPRegisterEmail customDemo = null;
					TBPRegisterEmail.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new TBPRegisterEmail();
					result.EmailAddress = @"TBPRegisterEmail.EmailAddress";

				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(EmailAddress != _unmodified_EmailAddress)
							return true;
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
				}


				private void CopyContentFrom(TBPRegisterEmail sourceObject)
				{
					EmailAddress = sourceObject.EmailAddress;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_EmailAddress = EmailAddress;
				
				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "EmailAddress":
							EmailAddress = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string EmailAddress { get; set; }
			private string _unmodified_EmailAddress;
			
			}
			[DataContract] 
			[Serializable]
			public partial class AccountSummary : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public AccountSummary()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "AccountSummary";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/AccountSummary/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(AccountSummary), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<AccountSummary>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: AccountSummary");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(AccountSummary), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/AccountSummary/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/AccountSummary/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((AccountSummary) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(AccountSummary));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static AccountSummary DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(AccountSummary));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (AccountSummary) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "AccountSummary", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "AccountSummary", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref AccountSummary customDemoObject);



				public static AccountSummary CreateDefault()
				{
					var result = new AccountSummary();
					result.GroupSummary = GroupSummaryContainer.CreateDefault();
					return result;
				}
				/*
				public static AccountSummary CreateDemoDefault()
				{
					AccountSummary customDemo = null;
					AccountSummary.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new AccountSummary();
					result.GroupSummary = GroupSummaryContainer.CreateDemoDefault();
				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
					if(GroupSummary != null) {
						((IInformationObject) GroupSummary).UpdateCollections(masterInstance);
					}

				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					{ // Scoping block for variable name reusability
						IInformationObject item = GroupSummary;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					{
						var item = GroupSummary;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					{
						var item = (IInformationObject) GroupSummary;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(GroupSummary != _unmodified_GroupSummary)
							return true;
						{
							IInformationObject item = (IInformationObject) GroupSummary;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					if(GroupSummary != null) {
						if(GroupSummary.ID == replacingObject.ID)
							GroupSummary = (GroupSummaryContainer) replacingObject;
						else {
							IInformationObject iObject = GroupSummary;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}


				private void CopyContentFrom(AccountSummary sourceObject)
				{
					GroupSummary = sourceObject.GroupSummary;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
				
					_unmodified_GroupSummary = GroupSummary;
					if(GroupSummary != null)
						((IInformationObject) GroupSummary).SetInstanceTreeValuesAsUnmodified();

				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public GroupSummaryContainer GroupSummary { get; set; }
			private GroupSummaryContainer _unmodified_GroupSummary;
			
			}
			[DataContract] 
			[Serializable]
			public partial class AccountContainer : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public AccountContainer()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "AccountContainer";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/AccountContainer/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(AccountContainer), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<AccountContainer>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: AccountContainer");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(AccountContainer), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/AccountContainer/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/AccountContainer/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((AccountContainer) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(AccountContainer));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static AccountContainer DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(AccountContainer));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (AccountContainer) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "AccountContainer", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "AccountContainer", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref AccountContainer customDemoObject);



				public static AccountContainer CreateDefault()
				{
					var result = new AccountContainer();
					result.AccountModule = AccountModule.CreateDefault();
					result.AccountSummary = AccountSummary.CreateDefault();
					return result;
				}
				/*
				public static AccountContainer CreateDemoDefault()
				{
					AccountContainer customDemo = null;
					AccountContainer.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new AccountContainer();
					result.AccountModule = AccountModule.CreateDemoDefault();
					result.AccountSummary = AccountSummary.CreateDemoDefault();
				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
					if(AccountModule != null) {
						((IInformationObject) AccountModule).UpdateCollections(masterInstance);
					}

					if(AccountSummary != null) {
						((IInformationObject) AccountSummary).UpdateCollections(masterInstance);
					}

				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					{ // Scoping block for variable name reusability
						IInformationObject item = AccountModule;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					{ // Scoping block for variable name reusability
						IInformationObject item = AccountSummary;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					{
						var item = AccountModule;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = AccountSummary;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					{
						var item = (IInformationObject) AccountModule;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) AccountSummary;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(AccountModule != _unmodified_AccountModule)
							return true;
						if(AccountSummary != _unmodified_AccountSummary)
							return true;
						{
							IInformationObject item = (IInformationObject) AccountModule;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
						{
							IInformationObject item = (IInformationObject) AccountSummary;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					if(AccountModule != null) {
						if(AccountModule.ID == replacingObject.ID)
							AccountModule = (AccountModule) replacingObject;
						else {
							IInformationObject iObject = AccountModule;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(AccountSummary != null) {
						if(AccountSummary.ID == replacingObject.ID)
							AccountSummary = (AccountSummary) replacingObject;
						else {
							IInformationObject iObject = AccountSummary;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}


				private void CopyContentFrom(AccountContainer sourceObject)
				{
					AccountModule = sourceObject.AccountModule;
					AccountSummary = sourceObject.AccountSummary;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
				
					_unmodified_AccountModule = AccountModule;
					if(AccountModule != null)
						((IInformationObject) AccountModule).SetInstanceTreeValuesAsUnmodified();

					_unmodified_AccountSummary = AccountSummary;
					if(AccountSummary != null)
						((IInformationObject) AccountSummary).SetInstanceTreeValuesAsUnmodified();

				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public AccountModule AccountModule { get; set; }
			private AccountModule _unmodified_AccountModule;
			[DataMember] 
			public AccountSummary AccountSummary { get; set; }
			private AccountSummary _unmodified_AccountSummary;
			
			}
			[DataContract] 
			[Serializable]
			public partial class AccountModule : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public AccountModule()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "AccountModule";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/AccountModule/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(AccountModule), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<AccountModule>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: AccountModule");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(AccountModule), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/AccountModule/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/AccountModule/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((AccountModule) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(AccountModule));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static AccountModule DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(AccountModule));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (AccountModule) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "AccountModule", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "AccountModule", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref AccountModule customDemoObject);



				public static AccountModule CreateDefault()
				{
					var result = new AccountModule();
					result.Profile = AccountProfile.CreateDefault();
					result.Security = AccountSecurity.CreateDefault();
					result.Roles = AccountRoles.CreateDefault();
					result.LocationCollection = AddressAndLocationCollection.CreateDefault();
					return result;
				}
				/*
				public static AccountModule CreateDemoDefault()
				{
					AccountModule customDemo = null;
					AccountModule.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new AccountModule();
					result.Profile = AccountProfile.CreateDemoDefault();
					result.Security = AccountSecurity.CreateDemoDefault();
					result.Roles = AccountRoles.CreateDemoDefault();
					result.LocationCollection = AddressAndLocationCollection.CreateDemoDefault();
				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
					if(Profile != null) {
						((IInformationObject) Profile).UpdateCollections(masterInstance);
					}

					if(Security != null) {
						((IInformationObject) Security).UpdateCollections(masterInstance);
					}

					if(Roles != null) {
						((IInformationObject) Roles).UpdateCollections(masterInstance);
					}

					if(masterInstance is AddressAndLocationCollection) {
						AaltoGlobalImpact.OIP.CollectionUpdateImplementation.Update_AccountModule_LocationCollection(this, localCollection:LocationCollection, masterCollection:(AddressAndLocationCollection) masterInstance);
					} else if(LocationCollection != null) {
						((IInformationObject) LocationCollection).UpdateCollections(masterInstance);
					}
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					{ // Scoping block for variable name reusability
						IInformationObject item = Profile;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					{ // Scoping block for variable name reusability
						IInformationObject item = Security;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					{ // Scoping block for variable name reusability
						IInformationObject item = Roles;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					{ // Scoping block for variable name reusability
						IInformationObject item = LocationCollection;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					{
						var item = Profile;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = Security;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = Roles;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = LocationCollection;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					{
						var item = (IInformationObject) Profile;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) Security;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) Roles;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) LocationCollection;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(Profile != _unmodified_Profile)
							return true;
						if(Security != _unmodified_Security)
							return true;
						if(Roles != _unmodified_Roles)
							return true;
						if(LocationCollection != _unmodified_LocationCollection)
							return true;
						{
							IInformationObject item = (IInformationObject) Profile;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
						{
							IInformationObject item = (IInformationObject) Security;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
						{
							IInformationObject item = (IInformationObject) Roles;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
						{
							IInformationObject item = (IInformationObject) LocationCollection;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					if(Profile != null) {
						if(Profile.ID == replacingObject.ID)
							Profile = (AccountProfile) replacingObject;
						else {
							IInformationObject iObject = Profile;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(Security != null) {
						if(Security.ID == replacingObject.ID)
							Security = (AccountSecurity) replacingObject;
						else {
							IInformationObject iObject = Security;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(Roles != null) {
						if(Roles.ID == replacingObject.ID)
							Roles = (AccountRoles) replacingObject;
						else {
							IInformationObject iObject = Roles;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(LocationCollection != null) {
						if(LocationCollection.ID == replacingObject.ID)
							LocationCollection = (AddressAndLocationCollection) replacingObject;
						else {
							IInformationObject iObject = LocationCollection;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}


				private void CopyContentFrom(AccountModule sourceObject)
				{
					Profile = sourceObject.Profile;
					Security = sourceObject.Security;
					Roles = sourceObject.Roles;
					LocationCollection = sourceObject.LocationCollection;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
				
					_unmodified_Profile = Profile;
					if(Profile != null)
						((IInformationObject) Profile).SetInstanceTreeValuesAsUnmodified();

					_unmodified_Security = Security;
					if(Security != null)
						((IInformationObject) Security).SetInstanceTreeValuesAsUnmodified();

					_unmodified_Roles = Roles;
					if(Roles != null)
						((IInformationObject) Roles).SetInstanceTreeValuesAsUnmodified();

					_unmodified_LocationCollection = LocationCollection;
					if(LocationCollection != null)
						((IInformationObject) LocationCollection).SetInstanceTreeValuesAsUnmodified();

				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public AccountProfile Profile { get; set; }
			private AccountProfile _unmodified_Profile;
			[DataMember] 
			public AccountSecurity Security { get; set; }
			private AccountSecurity _unmodified_Security;
			[DataMember] 
			public AccountRoles Roles { get; set; }
			private AccountRoles _unmodified_Roles;
			[DataMember] 
			public AddressAndLocationCollection LocationCollection { get; set; }
			private AddressAndLocationCollection _unmodified_LocationCollection;
			
			}
			[DataContract] 
			[Serializable]
			public partial class LocationContainer : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public LocationContainer()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "LocationContainer";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/LocationContainer/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(LocationContainer), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<LocationContainer>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: LocationContainer");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(LocationContainer), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/LocationContainer/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/LocationContainer/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((LocationContainer) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(LocationContainer));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static LocationContainer DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(LocationContainer));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (LocationContainer) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "LocationContainer", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "LocationContainer", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref LocationContainer customDemoObject);



				public static LocationContainer CreateDefault()
				{
					var result = new LocationContainer();
					result.Locations = AddressAndLocationCollection.CreateDefault();
					return result;
				}
				/*
				public static LocationContainer CreateDemoDefault()
				{
					LocationContainer customDemo = null;
					LocationContainer.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new LocationContainer();
					result.Locations = AddressAndLocationCollection.CreateDemoDefault();
				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
					if(masterInstance is AddressAndLocationCollection) {
						AaltoGlobalImpact.OIP.CollectionUpdateImplementation.Update_LocationContainer_Locations(this, localCollection:Locations, masterCollection:(AddressAndLocationCollection) masterInstance);
					} else if(Locations != null) {
						((IInformationObject) Locations).UpdateCollections(masterInstance);
					}
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					{ // Scoping block for variable name reusability
						IInformationObject item = Locations;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					{
						var item = Locations;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					{
						var item = (IInformationObject) Locations;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(Locations != _unmodified_Locations)
							return true;
						{
							IInformationObject item = (IInformationObject) Locations;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					if(Locations != null) {
						if(Locations.ID == replacingObject.ID)
							Locations = (AddressAndLocationCollection) replacingObject;
						else {
							IInformationObject iObject = Locations;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}


				private void CopyContentFrom(LocationContainer sourceObject)
				{
					Locations = sourceObject.Locations;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
				
					_unmodified_Locations = Locations;
					if(Locations != null)
						((IInformationObject) Locations).SetInstanceTreeValuesAsUnmodified();

				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public AddressAndLocationCollection Locations { get; set; }
			private AddressAndLocationCollection _unmodified_Locations;
			
			}
			[DataContract] 
			[Serializable]
			public partial class AddressAndLocationCollection : IInformationObject , IInformationCollection
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public AddressAndLocationCollection()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "AddressAndLocationCollection";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/AddressAndLocationCollection/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(AddressAndLocationCollection), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<AddressAndLocationCollection>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: AddressAndLocationCollection");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(AddressAndLocationCollection), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/AddressAndLocationCollection/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/AddressAndLocationCollection/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((AddressAndLocationCollection) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(AddressAndLocationCollection));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static AddressAndLocationCollection DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(AddressAndLocationCollection));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (AddressAndLocationCollection) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "AddressAndLocationCollection", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "AddressAndLocationCollection", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref AddressAndLocationCollection customDemoObject);


				
				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
				}



				bool IInformationCollection.IsMasterCollection {
					get {
						return true;
					}
				}

				string IInformationCollection.GetMasterLocation()
				{
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					return GetMasterCollectionLocation(owner);
					
				}

				async Task<IInformationCollection> IInformationCollection.GetMasterInstanceAsync()
				{
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					return await GetMasterCollectionInstanceAsync(owner);
					
				}


				public string GetItemDirectory()
				{
					string dummyItemLocation = ObjectStorage.GetRelativeLocationFromID<AddressAndLocation>("dummy");
					string nonOwnerDirectoryLocation = StorageSupport.GetParentDirectoryTarget(dummyItemLocation);
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					string ownerDirectoryLocation = StorageSupport.GetOwnerContentLocation(owner, nonOwnerDirectoryLocation);
					return ownerDirectoryLocation;
				}

				public async Task RefreshContentAsync()
				{
					// DirectoryToMaster
					string itemDirectory = GetItemDirectory();
					IInformationObject[] informationObjects = await StorageSupport.RetrieveInformationObjectsAsync(itemDirectory,
																								 typeof(AddressAndLocation));
                    Array.ForEach(informationObjects, io => io.MasterETag = io.ETag);
					CollectionContent.Clear();
					CollectionContent.AddRange(informationObjects.Select(obj => (AddressAndLocation) obj));
            
				}

				public static async Task<AddressAndLocationCollection> GetMasterCollectionInstanceAsync(IContainerOwner owner)
				{
					return await ObjectStorage.RetrieveFromOwnerContentA<AddressAndLocationCollection>(owner, "MasterCollection");
				}
				public static string GetMasterCollectionLocation(IContainerOwner owner)
				{
					return StorageSupport.GetOwnerContentLocation(owner, "AaltoGlobalImpact.OIP/AddressAndLocationCollection/" + "MasterCollection");
				}



                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }

				
		
				public static AddressAndLocationCollection CreateDefault()
				{
					var result = new AddressAndLocationCollection();
					return result;
				}

				/*
				public static AddressAndLocationCollection CreateDemoDefault()
				{
					AddressAndLocationCollection customDemo = null;
					AddressAndLocationCollection.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new AddressAndLocationCollection();
					result.CollectionContent.Add(AddressAndLocation.CreateDemoDefault());
					//result.CollectionContent.Add(AddressAndLocation.CreateDemoDefault());
					//result.CollectionContent.Add(AddressAndLocation.CreateDemoDefault());
					return result;
				}
				*/

		
				[DataMember] public List<AddressAndLocation> CollectionContent = new List<AddressAndLocation>();
				private AddressAndLocation[] _unmodified_CollectionContent;

				[DataMember] public bool IsCollectionFiltered;
				private bool _unmodified_IsCollectionFiltered;
				
				[DataMember] public List<string> OrderFilterIDList = new List<string>();
				private string[] _unmodified_OrderFilterIDList;

				public string SelectedIDCommaSeparated
				{
					get
					{
						string[] sourceArray;
						if (OrderFilterIDList != null)
							sourceArray = OrderFilterIDList.ToArray();
						else
							sourceArray = CollectionContent.Select(item => item.ID).ToArray();
						return String.Join(",", sourceArray);
					}
					set 
					{
						if (value == null)
							return;
						string[] valueArray = value.Split(',');
						OrderFilterIDList = new List<string>();
						OrderFilterIDList.AddRange(valueArray);
						OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
					}
				}

				public AddressAndLocation[] GetIDSelectedArray()
				{
					if (IsCollectionFiltered == false || this.OrderFilterIDList == null)
						return CollectionContent.ToArray();
					return
						this.OrderFilterIDList.Select(id => CollectionContent.FirstOrDefault(item => item.ID == id)).Where(item => item != null).ToArray();
				}

				public void RefreshOrderAndFilterListFromContent()
                {
                    if (OrderFilterIDList == null)
                        return;
                    OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
                }

				public void ParsePropertyValue(string propertyName, string propertyValue)
				{
					switch(propertyName)
					{
						case "SelectedIDCommaSeparated":
							SelectedIDCommaSeparated = propertyValue;
							break;
						case "IsCollectionFiltered":
							IsCollectionFiltered = bool.Parse(propertyValue);
							break;
						default:
							throw new NotSupportedException("No ParsePropertyValue supported for property: " + propertyName);
					}
				}


				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					for(int i = 0; i < CollectionContent.Count; i++) // >
					{
						if(CollectionContent[i].ID == replacingObject.ID)
							CollectionContent[i] = (AddressAndLocation )replacingObject;
						else { // Cannot have circular reference, so can be in else branch
							IInformationObject iObject = CollectionContent[i];
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}

				
				bool IInformationObject.IsInstanceTreeModified {
					get {
						bool collectionModified = CollectionContent.SequenceEqual(_unmodified_CollectionContent) == false;
						if(collectionModified)
							return true;
						//if((OrderFilterIDList == null && _unmodified_OrderFilterIDList != null) || _unmodified_OrderFilterIDList
						if(IsCollectionFiltered != _unmodified_IsCollectionFiltered)
							return true;
						return false;
					}
				}
				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_CollectionContent = CollectionContent.ToArray();
					_unmodified_IsCollectionFiltered = IsCollectionFiltered;
					if(OrderFilterIDList == null)
						_unmodified_OrderFilterIDList = null;
					else
						_unmodified_OrderFilterIDList = OrderFilterIDList.ToArray();
					foreach(IInformationObject iObject in CollectionContent)
						iObject.SetInstanceTreeValuesAsUnmodified();
				}

				private void CopyContentFrom(AddressAndLocationCollection sourceObject)
				{
					CollectionContent = sourceObject.CollectionContent;
					_unmodified_CollectionContent = sourceObject._unmodified_CollectionContent;
				}
				
				private object FindFromObjectTree(string objectId)
				{
					foreach(var item in CollectionContent)
					{
						object result = item.FindObjectByID(objectId);
						if(result != null)
							return result;
					}
					return null;
				}

				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					if(searchWithinCurrentMasterOnly == false) {
						foreach(IInformationObject iObject in CollectionContent)
							iObject.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
					}
				}


				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						bool doAdd = true;
						if(filterOnFalse != null)
							doAdd = filterOnFalse(iObject);
						if(doAdd) {
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
				}


			
			}
			[DataContract] 
			[Serializable]
			public partial class AddressAndLocation : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public AddressAndLocation()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "AddressAndLocation";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/AddressAndLocation/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(AddressAndLocation), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<AddressAndLocation>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: AddressAndLocation");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(AddressAndLocation), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/AddressAndLocation/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/AddressAndLocation/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return true;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((AddressAndLocation) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(AddressAndLocation));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static AddressAndLocation DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(AddressAndLocation));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (AddressAndLocation) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "AddressAndLocation", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "AddressAndLocation", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref AddressAndLocation customDemoObject);



				public static AddressAndLocation CreateDefault()
				{
					var result = new AddressAndLocation();
					result.ReferenceToInformation = ReferenceToInformation.CreateDefault();
					result.Address = StreetAddress.CreateDefault();
					result.Location = Location.CreateDefault();
					return result;
				}
				/*
				public static AddressAndLocation CreateDemoDefault()
				{
					AddressAndLocation customDemo = null;
					AddressAndLocation.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new AddressAndLocation();
					result.ReferenceToInformation = ReferenceToInformation.CreateDemoDefault();
					result.Address = StreetAddress.CreateDemoDefault();
					result.Location = Location.CreateDemoDefault();
				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
					if(Address != null) {
						((IInformationObject) Address).UpdateCollections(masterInstance);
					}

					if(Location != null) {
						((IInformationObject) Location).UpdateCollections(masterInstance);
					}

				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					{ // Scoping block for variable name reusability
						IInformationObject item = Address;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					{ // Scoping block for variable name reusability
						IInformationObject item = Location;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					if(searchWithinCurrentMasterOnly == false)
					{
						{
							IInformationObject item = ReferenceToInformation;
							if(item != null)
							{
								item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
							}
						}
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					{
						var item = ReferenceToInformation;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = Address;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = Location;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					{
						var item = (IInformationObject) ReferenceToInformation;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) Address;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) Location;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(ReferenceToInformation != _unmodified_ReferenceToInformation)
							return true;
						if(Address != _unmodified_Address)
							return true;
						if(Location != _unmodified_Location)
							return true;
						{
							IInformationObject item = (IInformationObject) Address;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
						{
							IInformationObject item = (IInformationObject) Location;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					if(ReferenceToInformation != null) {
						if(ReferenceToInformation.ID == replacingObject.ID)
							ReferenceToInformation = (ReferenceToInformation) replacingObject;
						else {
							IInformationObject iObject = ReferenceToInformation;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(Address != null) {
						if(Address.ID == replacingObject.ID)
							Address = (StreetAddress) replacingObject;
						else {
							IInformationObject iObject = Address;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(Location != null) {
						if(Location.ID == replacingObject.ID)
							Location = (Location) replacingObject;
						else {
							IInformationObject iObject = Location;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}


				private void CopyContentFrom(AddressAndLocation sourceObject)
				{
					ReferenceToInformation = sourceObject.ReferenceToInformation;
					Address = sourceObject.Address;
					Location = sourceObject.Location;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
				
					_unmodified_ReferenceToInformation = ReferenceToInformation;
					if(ReferenceToInformation != null)
						((IInformationObject) ReferenceToInformation).SetInstanceTreeValuesAsUnmodified();

					_unmodified_Address = Address;
					if(Address != null)
						((IInformationObject) Address).SetInstanceTreeValuesAsUnmodified();

					_unmodified_Location = Location;
					if(Location != null)
						((IInformationObject) Location).SetInstanceTreeValuesAsUnmodified();

				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public ReferenceToInformation ReferenceToInformation { get; set; }
			private ReferenceToInformation _unmodified_ReferenceToInformation;
			[DataMember] 
			public StreetAddress Address { get; set; }
			private StreetAddress _unmodified_Address;
			[DataMember] 
			public Location Location { get; set; }
			private Location _unmodified_Location;
			
			}
			[DataContract] 
			[Serializable]
			public partial class StreetAddress : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public StreetAddress()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "StreetAddress";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/StreetAddress/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(StreetAddress), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<StreetAddress>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: StreetAddress");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(StreetAddress), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/StreetAddress/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/StreetAddress/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((StreetAddress) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(StreetAddress));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static StreetAddress DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(StreetAddress));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (StreetAddress) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "StreetAddress", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "StreetAddress", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref StreetAddress customDemoObject);



				public static StreetAddress CreateDefault()
				{
					var result = new StreetAddress();
					return result;
				}
				/*
				public static StreetAddress CreateDemoDefault()
				{
					StreetAddress customDemo = null;
					StreetAddress.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new StreetAddress();
					result.Street = @"StreetAddress.Street";

					result.ZipCode = @"StreetAddress.ZipCode";

					result.Town = @"StreetAddress.Town";

					result.Country = @"StreetAddress.Country";

				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(Street != _unmodified_Street)
							return true;
						if(ZipCode != _unmodified_ZipCode)
							return true;
						if(Town != _unmodified_Town)
							return true;
						if(Country != _unmodified_Country)
							return true;
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
				}


				private void CopyContentFrom(StreetAddress sourceObject)
				{
					Street = sourceObject.Street;
					ZipCode = sourceObject.ZipCode;
					Town = sourceObject.Town;
					Country = sourceObject.Country;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_Street = Street;
					_unmodified_ZipCode = ZipCode;
					_unmodified_Town = Town;
					_unmodified_Country = Country;
				
				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "Street":
							Street = value;
							break;
						case "ZipCode":
							ZipCode = value;
							break;
						case "Town":
							Town = value;
							break;
						case "Country":
							Country = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string Street { get; set; }
			private string _unmodified_Street;
			[DataMember] 
			public string ZipCode { get; set; }
			private string _unmodified_ZipCode;
			[DataMember] 
			public string Town { get; set; }
			private string _unmodified_Town;
			[DataMember] 
			public string Country { get; set; }
			private string _unmodified_Country;
			
			}
			[DataContract] 
			[Serializable]
			public partial class AccountProfile : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public AccountProfile()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "AccountProfile";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/AccountProfile/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(AccountProfile), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<AccountProfile>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: AccountProfile");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(AccountProfile), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/AccountProfile/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/AccountProfile/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((AccountProfile) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(AccountProfile));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static AccountProfile DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(AccountProfile));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (AccountProfile) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "AccountProfile", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "AccountProfile", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref AccountProfile customDemoObject);



				public static AccountProfile CreateDefault()
				{
					var result = new AccountProfile();
					result.ProfileImage = Image.CreateDefault();
					result.Address = StreetAddress.CreateDefault();
					return result;
				}
				/*
				public static AccountProfile CreateDemoDefault()
				{
					AccountProfile customDemo = null;
					AccountProfile.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new AccountProfile();
					result.ProfileImage = Image.CreateDemoDefault();
					result.FirstName = @"AccountProfile.FirstName";

					result.LastName = @"AccountProfile.LastName";

					result.Address = StreetAddress.CreateDemoDefault();
					result.SimplifiedAccountEmail = @"AccountProfile.SimplifiedAccountEmail";

					result.SimplifiedAccountGroupID = @"AccountProfile.SimplifiedAccountGroupID";

				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
					if(Address != null) {
						((IInformationObject) Address).UpdateCollections(masterInstance);
					}

				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					{ // Scoping block for variable name reusability
						IInformationObject item = Address;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					if(searchWithinCurrentMasterOnly == false)
					{
						{
							IInformationObject item = ProfileImage;
							if(item != null)
							{
								item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
							}
						}
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					{
						var item = ProfileImage;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = Address;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					{
						var item = (IInformationObject) ProfileImage;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) Address;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(ProfileImage != _unmodified_ProfileImage)
							return true;
						if(FirstName != _unmodified_FirstName)
							return true;
						if(LastName != _unmodified_LastName)
							return true;
						if(Address != _unmodified_Address)
							return true;
						if(IsSimplifiedAccount != _unmodified_IsSimplifiedAccount)
							return true;
						if(SimplifiedAccountEmail != _unmodified_SimplifiedAccountEmail)
							return true;
						if(SimplifiedAccountGroupID != _unmodified_SimplifiedAccountGroupID)
							return true;
						{
							IInformationObject item = (IInformationObject) Address;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					if(ProfileImage != null) {
						if(ProfileImage.ID == replacingObject.ID)
							ProfileImage = (Image) replacingObject;
						else {
							IInformationObject iObject = ProfileImage;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(Address != null) {
						if(Address.ID == replacingObject.ID)
							Address = (StreetAddress) replacingObject;
						else {
							IInformationObject iObject = Address;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}


				private void CopyContentFrom(AccountProfile sourceObject)
				{
					ProfileImage = sourceObject.ProfileImage;
					FirstName = sourceObject.FirstName;
					LastName = sourceObject.LastName;
					Address = sourceObject.Address;
					IsSimplifiedAccount = sourceObject.IsSimplifiedAccount;
					SimplifiedAccountEmail = sourceObject.SimplifiedAccountEmail;
					SimplifiedAccountGroupID = sourceObject.SimplifiedAccountGroupID;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_FirstName = FirstName;
					_unmodified_LastName = LastName;
					_unmodified_IsSimplifiedAccount = IsSimplifiedAccount;
					_unmodified_SimplifiedAccountEmail = SimplifiedAccountEmail;
					_unmodified_SimplifiedAccountGroupID = SimplifiedAccountGroupID;
				
					_unmodified_ProfileImage = ProfileImage;
					if(ProfileImage != null)
						((IInformationObject) ProfileImage).SetInstanceTreeValuesAsUnmodified();

					_unmodified_Address = Address;
					if(Address != null)
						((IInformationObject) Address).SetInstanceTreeValuesAsUnmodified();

				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "FirstName":
							FirstName = value;
							break;
						case "LastName":
							LastName = value;
							break;
						case "IsSimplifiedAccount":
							IsSimplifiedAccount = bool.Parse(value);
							break;
						case "SimplifiedAccountEmail":
							SimplifiedAccountEmail = value;
							break;
						case "SimplifiedAccountGroupID":
							SimplifiedAccountGroupID = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public Image ProfileImage { get; set; }
			private Image _unmodified_ProfileImage;
			[DataMember] 
			public string FirstName { get; set; }
			private string _unmodified_FirstName;
			[DataMember] 
			public string LastName { get; set; }
			private string _unmodified_LastName;
			[DataMember] 
			public StreetAddress Address { get; set; }
			private StreetAddress _unmodified_Address;
			[DataMember] 
			public bool IsSimplifiedAccount { get; set; }
			private bool _unmodified_IsSimplifiedAccount;
			[DataMember] 
			public string SimplifiedAccountEmail { get; set; }
			private string _unmodified_SimplifiedAccountEmail;
			[DataMember] 
			public string SimplifiedAccountGroupID { get; set; }
			private string _unmodified_SimplifiedAccountGroupID;
			
			}
			[DataContract] 
			[Serializable]
			public partial class AccountSecurity : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public AccountSecurity()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "AccountSecurity";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/AccountSecurity/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(AccountSecurity), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<AccountSecurity>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: AccountSecurity");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(AccountSecurity), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/AccountSecurity/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/AccountSecurity/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((AccountSecurity) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(AccountSecurity));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static AccountSecurity DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(AccountSecurity));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (AccountSecurity) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "AccountSecurity", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "AccountSecurity", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref AccountSecurity customDemoObject);



				public static AccountSecurity CreateDefault()
				{
					var result = new AccountSecurity();
					result.LoginInfoCollection = TBLoginInfoCollection.CreateDefault();
					result.EmailCollection = TBEmailCollection.CreateDefault();
					return result;
				}
				/*
				public static AccountSecurity CreateDemoDefault()
				{
					AccountSecurity customDemo = null;
					AccountSecurity.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new AccountSecurity();
					result.LoginInfoCollection = TBLoginInfoCollection.CreateDemoDefault();
					result.EmailCollection = TBEmailCollection.CreateDemoDefault();
				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
					if(LoginInfoCollection != null) {
						((IInformationObject) LoginInfoCollection).UpdateCollections(masterInstance);
					}

					if(EmailCollection != null) {
						((IInformationObject) EmailCollection).UpdateCollections(masterInstance);
					}

				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					{ // Scoping block for variable name reusability
						IInformationObject item = LoginInfoCollection;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					{ // Scoping block for variable name reusability
						IInformationObject item = EmailCollection;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					{
						var item = LoginInfoCollection;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = EmailCollection;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					{
						var item = (IInformationObject) LoginInfoCollection;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) EmailCollection;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(LoginInfoCollection != _unmodified_LoginInfoCollection)
							return true;
						if(EmailCollection != _unmodified_EmailCollection)
							return true;
						{
							IInformationObject item = (IInformationObject) LoginInfoCollection;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
						{
							IInformationObject item = (IInformationObject) EmailCollection;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					if(LoginInfoCollection != null) {
						if(LoginInfoCollection.ID == replacingObject.ID)
							LoginInfoCollection = (TBLoginInfoCollection) replacingObject;
						else {
							IInformationObject iObject = LoginInfoCollection;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(EmailCollection != null) {
						if(EmailCollection.ID == replacingObject.ID)
							EmailCollection = (TBEmailCollection) replacingObject;
						else {
							IInformationObject iObject = EmailCollection;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}


				private void CopyContentFrom(AccountSecurity sourceObject)
				{
					LoginInfoCollection = sourceObject.LoginInfoCollection;
					EmailCollection = sourceObject.EmailCollection;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
				
					_unmodified_LoginInfoCollection = LoginInfoCollection;
					if(LoginInfoCollection != null)
						((IInformationObject) LoginInfoCollection).SetInstanceTreeValuesAsUnmodified();

					_unmodified_EmailCollection = EmailCollection;
					if(EmailCollection != null)
						((IInformationObject) EmailCollection).SetInstanceTreeValuesAsUnmodified();

				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public TBLoginInfoCollection LoginInfoCollection { get; set; }
			private TBLoginInfoCollection _unmodified_LoginInfoCollection;
			[DataMember] 
			public TBEmailCollection EmailCollection { get; set; }
			private TBEmailCollection _unmodified_EmailCollection;
			
			}
			[DataContract] 
			[Serializable]
			public partial class AccountRoles : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public AccountRoles()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "AccountRoles";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/AccountRoles/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(AccountRoles), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<AccountRoles>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: AccountRoles");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(AccountRoles), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/AccountRoles/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/AccountRoles/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((AccountRoles) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(AccountRoles));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static AccountRoles DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(AccountRoles));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (AccountRoles) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "AccountRoles", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "AccountRoles", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref AccountRoles customDemoObject);



				public static AccountRoles CreateDefault()
				{
					var result = new AccountRoles();
					result.ModeratorInGroups = ReferenceCollection.CreateDefault();
					result.MemberInGroups = ReferenceCollection.CreateDefault();
					return result;
				}
				/*
				public static AccountRoles CreateDemoDefault()
				{
					AccountRoles customDemo = null;
					AccountRoles.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new AccountRoles();
					result.ModeratorInGroups = ReferenceCollection.CreateDemoDefault();
					result.MemberInGroups = ReferenceCollection.CreateDemoDefault();
					result.OrganizationsImPartOf = @"AccountRoles.OrganizationsImPartOf
AccountRoles.OrganizationsImPartOf
AccountRoles.OrganizationsImPartOf
AccountRoles.OrganizationsImPartOf
AccountRoles.OrganizationsImPartOf
";

				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
					if(ModeratorInGroups != null) {
						((IInformationObject) ModeratorInGroups).UpdateCollections(masterInstance);
					}

					if(MemberInGroups != null) {
						((IInformationObject) MemberInGroups).UpdateCollections(masterInstance);
					}

				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					{ // Scoping block for variable name reusability
						IInformationObject item = ModeratorInGroups;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					{ // Scoping block for variable name reusability
						IInformationObject item = MemberInGroups;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					{
						var item = ModeratorInGroups;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = MemberInGroups;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					{
						var item = (IInformationObject) ModeratorInGroups;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) MemberInGroups;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(ModeratorInGroups != _unmodified_ModeratorInGroups)
							return true;
						if(MemberInGroups != _unmodified_MemberInGroups)
							return true;
						if(OrganizationsImPartOf != _unmodified_OrganizationsImPartOf)
							return true;
						{
							IInformationObject item = (IInformationObject) ModeratorInGroups;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
						{
							IInformationObject item = (IInformationObject) MemberInGroups;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					if(ModeratorInGroups != null) {
						if(ModeratorInGroups.ID == replacingObject.ID)
							ModeratorInGroups = (ReferenceCollection) replacingObject;
						else {
							IInformationObject iObject = ModeratorInGroups;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(MemberInGroups != null) {
						if(MemberInGroups.ID == replacingObject.ID)
							MemberInGroups = (ReferenceCollection) replacingObject;
						else {
							IInformationObject iObject = MemberInGroups;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}


				private void CopyContentFrom(AccountRoles sourceObject)
				{
					ModeratorInGroups = sourceObject.ModeratorInGroups;
					MemberInGroups = sourceObject.MemberInGroups;
					OrganizationsImPartOf = sourceObject.OrganizationsImPartOf;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_OrganizationsImPartOf = OrganizationsImPartOf;
				
					_unmodified_ModeratorInGroups = ModeratorInGroups;
					if(ModeratorInGroups != null)
						((IInformationObject) ModeratorInGroups).SetInstanceTreeValuesAsUnmodified();

					_unmodified_MemberInGroups = MemberInGroups;
					if(MemberInGroups != null)
						((IInformationObject) MemberInGroups).SetInstanceTreeValuesAsUnmodified();

				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "OrganizationsImPartOf":
							OrganizationsImPartOf = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public ReferenceCollection ModeratorInGroups { get; set; }
			private ReferenceCollection _unmodified_ModeratorInGroups;
			[DataMember] 
			public ReferenceCollection MemberInGroups { get; set; }
			private ReferenceCollection _unmodified_MemberInGroups;
			[DataMember] 
			public string OrganizationsImPartOf { get; set; }
			private string _unmodified_OrganizationsImPartOf;
			
			}
			[DataContract] 
			[Serializable]
			public partial class PersonalInfoVisibility : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public PersonalInfoVisibility()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "PersonalInfoVisibility";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/PersonalInfoVisibility/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(PersonalInfoVisibility), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<PersonalInfoVisibility>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: PersonalInfoVisibility");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(PersonalInfoVisibility), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/PersonalInfoVisibility/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/PersonalInfoVisibility/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((PersonalInfoVisibility) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(PersonalInfoVisibility));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static PersonalInfoVisibility DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(PersonalInfoVisibility));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (PersonalInfoVisibility) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "PersonalInfoVisibility", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "PersonalInfoVisibility", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref PersonalInfoVisibility customDemoObject);



				public static PersonalInfoVisibility CreateDefault()
				{
					var result = new PersonalInfoVisibility();
					return result;
				}
				/*
				public static PersonalInfoVisibility CreateDemoDefault()
				{
					PersonalInfoVisibility customDemo = null;
					PersonalInfoVisibility.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new PersonalInfoVisibility();
					result.NoOne_Network_All = @"PersonalInfoVisibility.NoOne_Network_All";

				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(NoOne_Network_All != _unmodified_NoOne_Network_All)
							return true;
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
				}


				private void CopyContentFrom(PersonalInfoVisibility sourceObject)
				{
					NoOne_Network_All = sourceObject.NoOne_Network_All;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_NoOne_Network_All = NoOne_Network_All;
				
				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "NoOne_Network_All":
							NoOne_Network_All = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string NoOne_Network_All { get; set; }
			private string _unmodified_NoOne_Network_All;
			
			}
			[DataContract] 
			[Serializable]
			public partial class ReferenceToInformation : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public ReferenceToInformation()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "ReferenceToInformation";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/ReferenceToInformation/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(ReferenceToInformation), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<ReferenceToInformation>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: ReferenceToInformation");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(ReferenceToInformation), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/ReferenceToInformation/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/ReferenceToInformation/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return true;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((ReferenceToInformation) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(ReferenceToInformation));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static ReferenceToInformation DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(ReferenceToInformation));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (ReferenceToInformation) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "ReferenceToInformation", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "ReferenceToInformation", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref ReferenceToInformation customDemoObject);



				public static ReferenceToInformation CreateDefault()
				{
					var result = new ReferenceToInformation();
					return result;
				}
				/*
				public static ReferenceToInformation CreateDemoDefault()
				{
					ReferenceToInformation customDemo = null;
					ReferenceToInformation.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new ReferenceToInformation();
					result.Title = @"ReferenceToInformation.Title";

					result.URL = @"ReferenceToInformation.URL";

				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(Title != _unmodified_Title)
							return true;
						if(URL != _unmodified_URL)
							return true;
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
				}


				private void CopyContentFrom(ReferenceToInformation sourceObject)
				{
					Title = sourceObject.Title;
					URL = sourceObject.URL;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_Title = Title;
					_unmodified_URL = URL;
				
				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "Title":
							Title = value;
							break;
						case "URL":
							URL = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string Title { get; set; }
			private string _unmodified_Title;
			[DataMember] 
			public string URL { get; set; }
			private string _unmodified_URL;
			
			}
			[DataContract] 
			[Serializable]
			public partial class ReferenceCollection : IInformationObject , IInformationCollection
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public ReferenceCollection()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "ReferenceCollection";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/ReferenceCollection/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(ReferenceCollection), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<ReferenceCollection>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: ReferenceCollection");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(ReferenceCollection), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/ReferenceCollection/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/ReferenceCollection/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((ReferenceCollection) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(ReferenceCollection));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static ReferenceCollection DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(ReferenceCollection));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (ReferenceCollection) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "ReferenceCollection", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "ReferenceCollection", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref ReferenceCollection customDemoObject);


				
				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
				}



				bool IInformationCollection.IsMasterCollection {
					get {
						return false;
					}
				}

				string IInformationCollection.GetMasterLocation()
				{
					throw new NotSupportedException("Master collection location only supported for master collections");
					
				}

				async Task<IInformationCollection> IInformationCollection.GetMasterInstanceAsync()
				{
					throw new NotSupportedException("Master collection instance only supported for master collections");
					
				}


				public string GetItemDirectory()
				{
					string dummyItemLocation = ObjectStorage.GetRelativeLocationFromID<ReferenceToInformation>("dummy");
					string nonOwnerDirectoryLocation = StorageSupport.GetParentDirectoryTarget(dummyItemLocation);
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					string ownerDirectoryLocation = StorageSupport.GetOwnerContentLocation(owner, nonOwnerDirectoryLocation);
					return ownerDirectoryLocation;
				}

				public async Task RefreshContentAsync()
				{
				}




                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }

				
		
				public static ReferenceCollection CreateDefault()
				{
					var result = new ReferenceCollection();
					return result;
				}

				/*
				public static ReferenceCollection CreateDemoDefault()
				{
					ReferenceCollection customDemo = null;
					ReferenceCollection.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new ReferenceCollection();
					result.CollectionContent.Add(ReferenceToInformation.CreateDemoDefault());
					//result.CollectionContent.Add(ReferenceToInformation.CreateDemoDefault());
					//result.CollectionContent.Add(ReferenceToInformation.CreateDemoDefault());
					return result;
				}
				*/

		
				[DataMember] public List<ReferenceToInformation> CollectionContent = new List<ReferenceToInformation>();
				private ReferenceToInformation[] _unmodified_CollectionContent;

				[DataMember] public bool IsCollectionFiltered;
				private bool _unmodified_IsCollectionFiltered;
				
				[DataMember] public List<string> OrderFilterIDList = new List<string>();
				private string[] _unmodified_OrderFilterIDList;

				public string SelectedIDCommaSeparated
				{
					get
					{
						string[] sourceArray;
						if (OrderFilterIDList != null)
							sourceArray = OrderFilterIDList.ToArray();
						else
							sourceArray = CollectionContent.Select(item => item.ID).ToArray();
						return String.Join(",", sourceArray);
					}
					set 
					{
						if (value == null)
							return;
						string[] valueArray = value.Split(',');
						OrderFilterIDList = new List<string>();
						OrderFilterIDList.AddRange(valueArray);
						OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
					}
				}

				public ReferenceToInformation[] GetIDSelectedArray()
				{
					if (IsCollectionFiltered == false || this.OrderFilterIDList == null)
						return CollectionContent.ToArray();
					return
						this.OrderFilterIDList.Select(id => CollectionContent.FirstOrDefault(item => item.ID == id)).Where(item => item != null).ToArray();
				}

				public void RefreshOrderAndFilterListFromContent()
                {
                    if (OrderFilterIDList == null)
                        return;
                    OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
                }

				public void ParsePropertyValue(string propertyName, string propertyValue)
				{
					switch(propertyName)
					{
						case "SelectedIDCommaSeparated":
							SelectedIDCommaSeparated = propertyValue;
							break;
						case "IsCollectionFiltered":
							IsCollectionFiltered = bool.Parse(propertyValue);
							break;
						default:
							throw new NotSupportedException("No ParsePropertyValue supported for property: " + propertyName);
					}
				}


				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					for(int i = 0; i < CollectionContent.Count; i++) // >
					{
						if(CollectionContent[i].ID == replacingObject.ID)
							CollectionContent[i] = (ReferenceToInformation )replacingObject;
						else { // Cannot have circular reference, so can be in else branch
							IInformationObject iObject = CollectionContent[i];
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}

				
				bool IInformationObject.IsInstanceTreeModified {
					get {
						bool collectionModified = CollectionContent.SequenceEqual(_unmodified_CollectionContent) == false;
						if(collectionModified)
							return true;
						//if((OrderFilterIDList == null && _unmodified_OrderFilterIDList != null) || _unmodified_OrderFilterIDList
						if(IsCollectionFiltered != _unmodified_IsCollectionFiltered)
							return true;
						return false;
					}
				}
				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_CollectionContent = CollectionContent.ToArray();
					_unmodified_IsCollectionFiltered = IsCollectionFiltered;
					if(OrderFilterIDList == null)
						_unmodified_OrderFilterIDList = null;
					else
						_unmodified_OrderFilterIDList = OrderFilterIDList.ToArray();
					foreach(IInformationObject iObject in CollectionContent)
						iObject.SetInstanceTreeValuesAsUnmodified();
				}

				private void CopyContentFrom(ReferenceCollection sourceObject)
				{
					CollectionContent = sourceObject.CollectionContent;
					_unmodified_CollectionContent = sourceObject._unmodified_CollectionContent;
				}
				
				private object FindFromObjectTree(string objectId)
				{
					foreach(var item in CollectionContent)
					{
						object result = item.FindObjectByID(objectId);
						if(result != null)
							return result;
					}
					return null;
				}

				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					if(searchWithinCurrentMasterOnly == false) {
						foreach(IInformationObject iObject in CollectionContent)
							iObject.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
					}
				}


				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						bool doAdd = true;
						if(filterOnFalse != null)
							doAdd = filterOnFalse(iObject);
						if(doAdd) {
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
				}


			
			}
			[DataContract] 
			[Serializable]
			public partial class NodeSummaryContainer : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public NodeSummaryContainer()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "NodeSummaryContainer";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/NodeSummaryContainer/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(NodeSummaryContainer), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<NodeSummaryContainer>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: NodeSummaryContainer");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(NodeSummaryContainer), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/NodeSummaryContainer/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/NodeSummaryContainer/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((NodeSummaryContainer) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(NodeSummaryContainer));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static NodeSummaryContainer DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(NodeSummaryContainer));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (NodeSummaryContainer) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "NodeSummaryContainer", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "NodeSummaryContainer", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref NodeSummaryContainer customDemoObject);



				public static NodeSummaryContainer CreateDefault()
				{
					var result = new NodeSummaryContainer();
					result.Nodes = RenderedNodeCollection.CreateDefault();
					result.NodeSourceTextContent = TextContentCollection.CreateDefault();
					result.NodeSourceLinkToContent = LinkToContentCollection.CreateDefault();
					result.NodeSourceEmbeddedContent = EmbeddedContentCollection.CreateDefault();
					result.NodeSourceImages = ImageCollection.CreateDefault();
					result.NodeSourceBinaryFiles = BinaryFileCollection.CreateDefault();
					result.NodeSourceCategories = CategoryCollection.CreateDefault();
					return result;
				}
				/*
				public static NodeSummaryContainer CreateDemoDefault()
				{
					NodeSummaryContainer customDemo = null;
					NodeSummaryContainer.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new NodeSummaryContainer();
					result.Nodes = RenderedNodeCollection.CreateDemoDefault();
					result.NodeSourceTextContent = TextContentCollection.CreateDemoDefault();
					result.NodeSourceLinkToContent = LinkToContentCollection.CreateDemoDefault();
					result.NodeSourceEmbeddedContent = EmbeddedContentCollection.CreateDemoDefault();
					result.NodeSourceImages = ImageCollection.CreateDemoDefault();
					result.NodeSourceBinaryFiles = BinaryFileCollection.CreateDemoDefault();
					result.NodeSourceCategories = CategoryCollection.CreateDemoDefault();
				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
					if(Nodes != null) {
						((IInformationObject) Nodes).UpdateCollections(masterInstance);
					}

					if(masterInstance is TextContentCollection) {
						AaltoGlobalImpact.OIP.CollectionUpdateImplementation.Update_NodeSummaryContainer_NodeSourceTextContent(this, localCollection:NodeSourceTextContent, masterCollection:(TextContentCollection) masterInstance);
					} else if(NodeSourceTextContent != null) {
						((IInformationObject) NodeSourceTextContent).UpdateCollections(masterInstance);
					}
					if(masterInstance is LinkToContentCollection) {
						AaltoGlobalImpact.OIP.CollectionUpdateImplementation.Update_NodeSummaryContainer_NodeSourceLinkToContent(this, localCollection:NodeSourceLinkToContent, masterCollection:(LinkToContentCollection) masterInstance);
					} else if(NodeSourceLinkToContent != null) {
						((IInformationObject) NodeSourceLinkToContent).UpdateCollections(masterInstance);
					}
					if(masterInstance is EmbeddedContentCollection) {
						AaltoGlobalImpact.OIP.CollectionUpdateImplementation.Update_NodeSummaryContainer_NodeSourceEmbeddedContent(this, localCollection:NodeSourceEmbeddedContent, masterCollection:(EmbeddedContentCollection) masterInstance);
					} else if(NodeSourceEmbeddedContent != null) {
						((IInformationObject) NodeSourceEmbeddedContent).UpdateCollections(masterInstance);
					}
					if(masterInstance is ImageCollection) {
						AaltoGlobalImpact.OIP.CollectionUpdateImplementation.Update_NodeSummaryContainer_NodeSourceImages(this, localCollection:NodeSourceImages, masterCollection:(ImageCollection) masterInstance);
					} else if(NodeSourceImages != null) {
						((IInformationObject) NodeSourceImages).UpdateCollections(masterInstance);
					}
					if(masterInstance is BinaryFileCollection) {
						AaltoGlobalImpact.OIP.CollectionUpdateImplementation.Update_NodeSummaryContainer_NodeSourceBinaryFiles(this, localCollection:NodeSourceBinaryFiles, masterCollection:(BinaryFileCollection) masterInstance);
					} else if(NodeSourceBinaryFiles != null) {
						((IInformationObject) NodeSourceBinaryFiles).UpdateCollections(masterInstance);
					}
					if(masterInstance is CategoryCollection) {
						AaltoGlobalImpact.OIP.CollectionUpdateImplementation.Update_NodeSummaryContainer_NodeSourceCategories(this, localCollection:NodeSourceCategories, masterCollection:(CategoryCollection) masterInstance);
					} else if(NodeSourceCategories != null) {
						((IInformationObject) NodeSourceCategories).UpdateCollections(masterInstance);
					}
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					{ // Scoping block for variable name reusability
						IInformationObject item = Nodes;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					{ // Scoping block for variable name reusability
						IInformationObject item = NodeSourceTextContent;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					{ // Scoping block for variable name reusability
						IInformationObject item = NodeSourceLinkToContent;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					{ // Scoping block for variable name reusability
						IInformationObject item = NodeSourceEmbeddedContent;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					{ // Scoping block for variable name reusability
						IInformationObject item = NodeSourceImages;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					{ // Scoping block for variable name reusability
						IInformationObject item = NodeSourceBinaryFiles;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					{ // Scoping block for variable name reusability
						IInformationObject item = NodeSourceCategories;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					{
						var item = Nodes;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = NodeSourceTextContent;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = NodeSourceLinkToContent;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = NodeSourceEmbeddedContent;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = NodeSourceImages;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = NodeSourceBinaryFiles;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = NodeSourceCategories;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					{
						var item = (IInformationObject) Nodes;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) NodeSourceTextContent;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) NodeSourceLinkToContent;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) NodeSourceEmbeddedContent;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) NodeSourceImages;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) NodeSourceBinaryFiles;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) NodeSourceCategories;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(Nodes != _unmodified_Nodes)
							return true;
						if(NodeSourceTextContent != _unmodified_NodeSourceTextContent)
							return true;
						if(NodeSourceLinkToContent != _unmodified_NodeSourceLinkToContent)
							return true;
						if(NodeSourceEmbeddedContent != _unmodified_NodeSourceEmbeddedContent)
							return true;
						if(NodeSourceImages != _unmodified_NodeSourceImages)
							return true;
						if(NodeSourceBinaryFiles != _unmodified_NodeSourceBinaryFiles)
							return true;
						if(NodeSourceCategories != _unmodified_NodeSourceCategories)
							return true;
						{
							IInformationObject item = (IInformationObject) Nodes;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
						{
							IInformationObject item = (IInformationObject) NodeSourceTextContent;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
						{
							IInformationObject item = (IInformationObject) NodeSourceLinkToContent;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
						{
							IInformationObject item = (IInformationObject) NodeSourceEmbeddedContent;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
						{
							IInformationObject item = (IInformationObject) NodeSourceImages;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
						{
							IInformationObject item = (IInformationObject) NodeSourceBinaryFiles;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
						{
							IInformationObject item = (IInformationObject) NodeSourceCategories;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					if(Nodes != null) {
						if(Nodes.ID == replacingObject.ID)
							Nodes = (RenderedNodeCollection) replacingObject;
						else {
							IInformationObject iObject = Nodes;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(NodeSourceTextContent != null) {
						if(NodeSourceTextContent.ID == replacingObject.ID)
							NodeSourceTextContent = (TextContentCollection) replacingObject;
						else {
							IInformationObject iObject = NodeSourceTextContent;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(NodeSourceLinkToContent != null) {
						if(NodeSourceLinkToContent.ID == replacingObject.ID)
							NodeSourceLinkToContent = (LinkToContentCollection) replacingObject;
						else {
							IInformationObject iObject = NodeSourceLinkToContent;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(NodeSourceEmbeddedContent != null) {
						if(NodeSourceEmbeddedContent.ID == replacingObject.ID)
							NodeSourceEmbeddedContent = (EmbeddedContentCollection) replacingObject;
						else {
							IInformationObject iObject = NodeSourceEmbeddedContent;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(NodeSourceImages != null) {
						if(NodeSourceImages.ID == replacingObject.ID)
							NodeSourceImages = (ImageCollection) replacingObject;
						else {
							IInformationObject iObject = NodeSourceImages;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(NodeSourceBinaryFiles != null) {
						if(NodeSourceBinaryFiles.ID == replacingObject.ID)
							NodeSourceBinaryFiles = (BinaryFileCollection) replacingObject;
						else {
							IInformationObject iObject = NodeSourceBinaryFiles;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(NodeSourceCategories != null) {
						if(NodeSourceCategories.ID == replacingObject.ID)
							NodeSourceCategories = (CategoryCollection) replacingObject;
						else {
							IInformationObject iObject = NodeSourceCategories;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}


				private void CopyContentFrom(NodeSummaryContainer sourceObject)
				{
					Nodes = sourceObject.Nodes;
					NodeSourceTextContent = sourceObject.NodeSourceTextContent;
					NodeSourceLinkToContent = sourceObject.NodeSourceLinkToContent;
					NodeSourceEmbeddedContent = sourceObject.NodeSourceEmbeddedContent;
					NodeSourceImages = sourceObject.NodeSourceImages;
					NodeSourceBinaryFiles = sourceObject.NodeSourceBinaryFiles;
					NodeSourceCategories = sourceObject.NodeSourceCategories;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
				
					_unmodified_Nodes = Nodes;
					if(Nodes != null)
						((IInformationObject) Nodes).SetInstanceTreeValuesAsUnmodified();

					_unmodified_NodeSourceTextContent = NodeSourceTextContent;
					if(NodeSourceTextContent != null)
						((IInformationObject) NodeSourceTextContent).SetInstanceTreeValuesAsUnmodified();

					_unmodified_NodeSourceLinkToContent = NodeSourceLinkToContent;
					if(NodeSourceLinkToContent != null)
						((IInformationObject) NodeSourceLinkToContent).SetInstanceTreeValuesAsUnmodified();

					_unmodified_NodeSourceEmbeddedContent = NodeSourceEmbeddedContent;
					if(NodeSourceEmbeddedContent != null)
						((IInformationObject) NodeSourceEmbeddedContent).SetInstanceTreeValuesAsUnmodified();

					_unmodified_NodeSourceImages = NodeSourceImages;
					if(NodeSourceImages != null)
						((IInformationObject) NodeSourceImages).SetInstanceTreeValuesAsUnmodified();

					_unmodified_NodeSourceBinaryFiles = NodeSourceBinaryFiles;
					if(NodeSourceBinaryFiles != null)
						((IInformationObject) NodeSourceBinaryFiles).SetInstanceTreeValuesAsUnmodified();

					_unmodified_NodeSourceCategories = NodeSourceCategories;
					if(NodeSourceCategories != null)
						((IInformationObject) NodeSourceCategories).SetInstanceTreeValuesAsUnmodified();

				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public RenderedNodeCollection Nodes { get; set; }
			private RenderedNodeCollection _unmodified_Nodes;
			[DataMember] 
			public TextContentCollection NodeSourceTextContent { get; set; }
			private TextContentCollection _unmodified_NodeSourceTextContent;
			[DataMember] 
			public LinkToContentCollection NodeSourceLinkToContent { get; set; }
			private LinkToContentCollection _unmodified_NodeSourceLinkToContent;
			[DataMember] 
			public EmbeddedContentCollection NodeSourceEmbeddedContent { get; set; }
			private EmbeddedContentCollection _unmodified_NodeSourceEmbeddedContent;
			[DataMember] 
			public ImageCollection NodeSourceImages { get; set; }
			private ImageCollection _unmodified_NodeSourceImages;
			[DataMember] 
			public BinaryFileCollection NodeSourceBinaryFiles { get; set; }
			private BinaryFileCollection _unmodified_NodeSourceBinaryFiles;
			[DataMember] 
			public CategoryCollection NodeSourceCategories { get; set; }
			private CategoryCollection _unmodified_NodeSourceCategories;
			
			}
			[DataContract] 
			[Serializable]
			public partial class RenderedNodeCollection : IInformationObject , IInformationCollection
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public RenderedNodeCollection()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "RenderedNodeCollection";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/RenderedNodeCollection/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(RenderedNodeCollection), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<RenderedNodeCollection>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: RenderedNodeCollection");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(RenderedNodeCollection), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/RenderedNodeCollection/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/RenderedNodeCollection/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((RenderedNodeCollection) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(RenderedNodeCollection));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static RenderedNodeCollection DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(RenderedNodeCollection));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (RenderedNodeCollection) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "RenderedNodeCollection", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "RenderedNodeCollection", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref RenderedNodeCollection customDemoObject);


				
				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.UpdateCollections(masterInstance);
					}
				}



				bool IInformationCollection.IsMasterCollection {
					get {
						return false;
					}
				}

				string IInformationCollection.GetMasterLocation()
				{
					throw new NotSupportedException("Master collection location only supported for master collections");
					
				}

				async Task<IInformationCollection> IInformationCollection.GetMasterInstanceAsync()
				{
					throw new NotSupportedException("Master collection instance only supported for master collections");
					
				}


				public string GetItemDirectory()
				{
					string dummyItemLocation = ObjectStorage.GetRelativeLocationFromID<RenderedNode>("dummy");
					string nonOwnerDirectoryLocation = StorageSupport.GetParentDirectoryTarget(dummyItemLocation);
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					string ownerDirectoryLocation = StorageSupport.GetOwnerContentLocation(owner, nonOwnerDirectoryLocation);
					return ownerDirectoryLocation;
				}

				public async Task RefreshContentAsync()
				{
				}




                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }

				
		
				public static RenderedNodeCollection CreateDefault()
				{
					var result = new RenderedNodeCollection();
					return result;
				}

				/*
				public static RenderedNodeCollection CreateDemoDefault()
				{
					RenderedNodeCollection customDemo = null;
					RenderedNodeCollection.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new RenderedNodeCollection();
					result.CollectionContent.Add(RenderedNode.CreateDemoDefault());
					//result.CollectionContent.Add(RenderedNode.CreateDemoDefault());
					//result.CollectionContent.Add(RenderedNode.CreateDemoDefault());
					return result;
				}
				*/

		
				[DataMember] public List<RenderedNode> CollectionContent = new List<RenderedNode>();
				private RenderedNode[] _unmodified_CollectionContent;

				[DataMember] public bool IsCollectionFiltered;
				private bool _unmodified_IsCollectionFiltered;
				
				[DataMember] public List<string> OrderFilterIDList = new List<string>();
				private string[] _unmodified_OrderFilterIDList;

				public string SelectedIDCommaSeparated
				{
					get
					{
						string[] sourceArray;
						if (OrderFilterIDList != null)
							sourceArray = OrderFilterIDList.ToArray();
						else
							sourceArray = CollectionContent.Select(item => item.ID).ToArray();
						return String.Join(",", sourceArray);
					}
					set 
					{
						if (value == null)
							return;
						string[] valueArray = value.Split(',');
						OrderFilterIDList = new List<string>();
						OrderFilterIDList.AddRange(valueArray);
						OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
					}
				}

				public RenderedNode[] GetIDSelectedArray()
				{
					if (IsCollectionFiltered == false || this.OrderFilterIDList == null)
						return CollectionContent.ToArray();
					return
						this.OrderFilterIDList.Select(id => CollectionContent.FirstOrDefault(item => item.ID == id)).Where(item => item != null).ToArray();
				}

				public void RefreshOrderAndFilterListFromContent()
                {
                    if (OrderFilterIDList == null)
                        return;
                    OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
                }

				public void ParsePropertyValue(string propertyName, string propertyValue)
				{
					switch(propertyName)
					{
						case "SelectedIDCommaSeparated":
							SelectedIDCommaSeparated = propertyValue;
							break;
						case "IsCollectionFiltered":
							IsCollectionFiltered = bool.Parse(propertyValue);
							break;
						default:
							throw new NotSupportedException("No ParsePropertyValue supported for property: " + propertyName);
					}
				}


				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					for(int i = 0; i < CollectionContent.Count; i++) // >
					{
						if(CollectionContent[i].ID == replacingObject.ID)
							CollectionContent[i] = (RenderedNode )replacingObject;
						else { // Cannot have circular reference, so can be in else branch
							IInformationObject iObject = CollectionContent[i];
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}

				
				bool IInformationObject.IsInstanceTreeModified {
					get {
						bool collectionModified = CollectionContent.SequenceEqual(_unmodified_CollectionContent) == false;
						if(collectionModified)
							return true;
						//if((OrderFilterIDList == null && _unmodified_OrderFilterIDList != null) || _unmodified_OrderFilterIDList
						if(IsCollectionFiltered != _unmodified_IsCollectionFiltered)
							return true;
						// For non-master content
						foreach(IInformationObject item in CollectionContent)
						{
							bool itemTreeModified = item.IsInstanceTreeModified;
							if(itemTreeModified)
								return true;
						}
							
						return false;
					}
				}
				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_CollectionContent = CollectionContent.ToArray();
					_unmodified_IsCollectionFiltered = IsCollectionFiltered;
					if(OrderFilterIDList == null)
						_unmodified_OrderFilterIDList = null;
					else
						_unmodified_OrderFilterIDList = OrderFilterIDList.ToArray();
					foreach(IInformationObject iObject in CollectionContent)
						iObject.SetInstanceTreeValuesAsUnmodified();
				}

				private void CopyContentFrom(RenderedNodeCollection sourceObject)
				{
					CollectionContent = sourceObject.CollectionContent;
					_unmodified_CollectionContent = sourceObject._unmodified_CollectionContent;
				}
				
				private object FindFromObjectTree(string objectId)
				{
					foreach(var item in CollectionContent)
					{
						object result = item.FindObjectByID(objectId);
						if(result != null)
							return result;
					}
					return null;
				}

				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					foreach(IInformationObject iObject in CollectionContent)
						iObject.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
				}


				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						bool doAdd = true;
						if(filterOnFalse != null)
							doAdd = filterOnFalse(iObject);
						if(doAdd) {
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
				}


			
			}
			[DataContract] 
			[Serializable]
			public partial class RenderedNode : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public RenderedNode()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "RenderedNode";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/RenderedNode/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(RenderedNode), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<RenderedNode>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: RenderedNode");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(RenderedNode), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/RenderedNode/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/RenderedNode/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((RenderedNode) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(RenderedNode));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static RenderedNode DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(RenderedNode));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (RenderedNode) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "RenderedNode", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "RenderedNode", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref RenderedNode customDemoObject);



				public static RenderedNode CreateDefault()
				{
					var result = new RenderedNode();
					result.CategoryFilters = ShortTextCollection.CreateDefault();
					result.CategoryNames = ShortTextCollection.CreateDefault();
					result.Categories = ShortTextCollection.CreateDefault();
					result.Authors = ShortTextCollection.CreateDefault();
					result.Locations = ShortTextCollection.CreateDefault();
					return result;
				}
				/*
				public static RenderedNode CreateDemoDefault()
				{
					RenderedNode customDemo = null;
					RenderedNode.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new RenderedNode();
					result.OriginalContentID = @"RenderedNode.OriginalContentID";

					result.TechnicalSource = @"RenderedNode.TechnicalSource";

					result.ImageBaseUrl = @"RenderedNode.ImageBaseUrl";

					result.ImageExt = @"RenderedNode.ImageExt";

					result.Title = @"RenderedNode.Title";

					result.OpenNodeTitle = @"RenderedNode.OpenNodeTitle";

					result.ActualContentUrl = @"RenderedNode.ActualContentUrl";

					result.Excerpt = @"RenderedNode.Excerpt
RenderedNode.Excerpt
RenderedNode.Excerpt
RenderedNode.Excerpt
RenderedNode.Excerpt
";

					result.TimestampText = @"RenderedNode.TimestampText";

					result.MainSortableText = @"RenderedNode.MainSortableText";

					result.CategoryFilters = ShortTextCollection.CreateDemoDefault();
					result.CategoryNames = ShortTextCollection.CreateDemoDefault();
					result.Categories = ShortTextCollection.CreateDemoDefault();
					result.CategoryIDList = @"RenderedNode.CategoryIDList";

					result.Authors = ShortTextCollection.CreateDemoDefault();
					result.Locations = ShortTextCollection.CreateDemoDefault();
				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
					if(CategoryFilters != null) {
						((IInformationObject) CategoryFilters).UpdateCollections(masterInstance);
					}

					if(CategoryNames != null) {
						((IInformationObject) CategoryNames).UpdateCollections(masterInstance);
					}

					if(Categories != null) {
						((IInformationObject) Categories).UpdateCollections(masterInstance);
					}

					if(Authors != null) {
						((IInformationObject) Authors).UpdateCollections(masterInstance);
					}

					if(Locations != null) {
						((IInformationObject) Locations).UpdateCollections(masterInstance);
					}

				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					{ // Scoping block for variable name reusability
						IInformationObject item = CategoryFilters;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					{ // Scoping block for variable name reusability
						IInformationObject item = CategoryNames;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					{ // Scoping block for variable name reusability
						IInformationObject item = Categories;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					{ // Scoping block for variable name reusability
						IInformationObject item = Authors;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					{ // Scoping block for variable name reusability
						IInformationObject item = Locations;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					{
						var item = CategoryFilters;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = CategoryNames;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = Categories;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = Authors;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = Locations;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					{
						var item = (IInformationObject) CategoryFilters;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) CategoryNames;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) Categories;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) Authors;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) Locations;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(OriginalContentID != _unmodified_OriginalContentID)
							return true;
						if(TechnicalSource != _unmodified_TechnicalSource)
							return true;
						if(ImageBaseUrl != _unmodified_ImageBaseUrl)
							return true;
						if(ImageExt != _unmodified_ImageExt)
							return true;
						if(Title != _unmodified_Title)
							return true;
						if(OpenNodeTitle != _unmodified_OpenNodeTitle)
							return true;
						if(ActualContentUrl != _unmodified_ActualContentUrl)
							return true;
						if(Excerpt != _unmodified_Excerpt)
							return true;
						if(TimestampText != _unmodified_TimestampText)
							return true;
						if(MainSortableText != _unmodified_MainSortableText)
							return true;
						if(IsCategoryFilteringNode != _unmodified_IsCategoryFilteringNode)
							return true;
						if(CategoryFilters != _unmodified_CategoryFilters)
							return true;
						if(CategoryNames != _unmodified_CategoryNames)
							return true;
						if(Categories != _unmodified_Categories)
							return true;
						if(CategoryIDList != _unmodified_CategoryIDList)
							return true;
						if(Authors != _unmodified_Authors)
							return true;
						if(Locations != _unmodified_Locations)
							return true;
						{
							IInformationObject item = (IInformationObject) CategoryFilters;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
						{
							IInformationObject item = (IInformationObject) CategoryNames;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
						{
							IInformationObject item = (IInformationObject) Categories;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
						{
							IInformationObject item = (IInformationObject) Authors;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
						{
							IInformationObject item = (IInformationObject) Locations;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					if(CategoryFilters != null) {
						if(CategoryFilters.ID == replacingObject.ID)
							CategoryFilters = (ShortTextCollection) replacingObject;
						else {
							IInformationObject iObject = CategoryFilters;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(CategoryNames != null) {
						if(CategoryNames.ID == replacingObject.ID)
							CategoryNames = (ShortTextCollection) replacingObject;
						else {
							IInformationObject iObject = CategoryNames;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(Categories != null) {
						if(Categories.ID == replacingObject.ID)
							Categories = (ShortTextCollection) replacingObject;
						else {
							IInformationObject iObject = Categories;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(Authors != null) {
						if(Authors.ID == replacingObject.ID)
							Authors = (ShortTextCollection) replacingObject;
						else {
							IInformationObject iObject = Authors;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(Locations != null) {
						if(Locations.ID == replacingObject.ID)
							Locations = (ShortTextCollection) replacingObject;
						else {
							IInformationObject iObject = Locations;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}


				private void CopyContentFrom(RenderedNode sourceObject)
				{
					OriginalContentID = sourceObject.OriginalContentID;
					TechnicalSource = sourceObject.TechnicalSource;
					ImageBaseUrl = sourceObject.ImageBaseUrl;
					ImageExt = sourceObject.ImageExt;
					Title = sourceObject.Title;
					OpenNodeTitle = sourceObject.OpenNodeTitle;
					ActualContentUrl = sourceObject.ActualContentUrl;
					Excerpt = sourceObject.Excerpt;
					TimestampText = sourceObject.TimestampText;
					MainSortableText = sourceObject.MainSortableText;
					IsCategoryFilteringNode = sourceObject.IsCategoryFilteringNode;
					CategoryFilters = sourceObject.CategoryFilters;
					CategoryNames = sourceObject.CategoryNames;
					Categories = sourceObject.Categories;
					CategoryIDList = sourceObject.CategoryIDList;
					Authors = sourceObject.Authors;
					Locations = sourceObject.Locations;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_OriginalContentID = OriginalContentID;
					_unmodified_TechnicalSource = TechnicalSource;
					_unmodified_ImageBaseUrl = ImageBaseUrl;
					_unmodified_ImageExt = ImageExt;
					_unmodified_Title = Title;
					_unmodified_OpenNodeTitle = OpenNodeTitle;
					_unmodified_ActualContentUrl = ActualContentUrl;
					_unmodified_Excerpt = Excerpt;
					_unmodified_TimestampText = TimestampText;
					_unmodified_MainSortableText = MainSortableText;
					_unmodified_IsCategoryFilteringNode = IsCategoryFilteringNode;
					_unmodified_CategoryIDList = CategoryIDList;
				
					_unmodified_CategoryFilters = CategoryFilters;
					if(CategoryFilters != null)
						((IInformationObject) CategoryFilters).SetInstanceTreeValuesAsUnmodified();

					_unmodified_CategoryNames = CategoryNames;
					if(CategoryNames != null)
						((IInformationObject) CategoryNames).SetInstanceTreeValuesAsUnmodified();

					_unmodified_Categories = Categories;
					if(Categories != null)
						((IInformationObject) Categories).SetInstanceTreeValuesAsUnmodified();

					_unmodified_Authors = Authors;
					if(Authors != null)
						((IInformationObject) Authors).SetInstanceTreeValuesAsUnmodified();

					_unmodified_Locations = Locations;
					if(Locations != null)
						((IInformationObject) Locations).SetInstanceTreeValuesAsUnmodified();

				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "OriginalContentID":
							OriginalContentID = value;
							break;
						case "TechnicalSource":
							TechnicalSource = value;
							break;
						case "ImageBaseUrl":
							ImageBaseUrl = value;
							break;
						case "ImageExt":
							ImageExt = value;
							break;
						case "Title":
							Title = value;
							break;
						case "OpenNodeTitle":
							OpenNodeTitle = value;
							break;
						case "ActualContentUrl":
							ActualContentUrl = value;
							break;
						case "Excerpt":
							Excerpt = value;
							break;
						case "TimestampText":
							TimestampText = value;
							break;
						case "MainSortableText":
							MainSortableText = value;
							break;
						case "IsCategoryFilteringNode":
							IsCategoryFilteringNode = bool.Parse(value);
							break;
						case "CategoryIDList":
							CategoryIDList = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string OriginalContentID { get; set; }
			private string _unmodified_OriginalContentID;
			[DataMember] 
			public string TechnicalSource { get; set; }
			private string _unmodified_TechnicalSource;
			[DataMember] 
			public string ImageBaseUrl { get; set; }
			private string _unmodified_ImageBaseUrl;
			[DataMember] 
			public string ImageExt { get; set; }
			private string _unmodified_ImageExt;
			[DataMember] 
			public string Title { get; set; }
			private string _unmodified_Title;
			[DataMember] 
			public string OpenNodeTitle { get; set; }
			private string _unmodified_OpenNodeTitle;
			[DataMember] 
			public string ActualContentUrl { get; set; }
			private string _unmodified_ActualContentUrl;
			[DataMember] 
			public string Excerpt { get; set; }
			private string _unmodified_Excerpt;
			[DataMember] 
			public string TimestampText { get; set; }
			private string _unmodified_TimestampText;
			[DataMember] 
			public string MainSortableText { get; set; }
			private string _unmodified_MainSortableText;
			[DataMember] 
			public bool IsCategoryFilteringNode { get; set; }
			private bool _unmodified_IsCategoryFilteringNode;
			[DataMember] 
			public ShortTextCollection CategoryFilters { get; set; }
			private ShortTextCollection _unmodified_CategoryFilters;
			[DataMember] 
			public ShortTextCollection CategoryNames { get; set; }
			private ShortTextCollection _unmodified_CategoryNames;
			[DataMember] 
			public ShortTextCollection Categories { get; set; }
			private ShortTextCollection _unmodified_Categories;
			[DataMember] 
			public string CategoryIDList { get; set; }
			private string _unmodified_CategoryIDList;
			[DataMember] 
			public ShortTextCollection Authors { get; set; }
			private ShortTextCollection _unmodified_Authors;
			[DataMember] 
			public ShortTextCollection Locations { get; set; }
			private ShortTextCollection _unmodified_Locations;
			
			}
			[DataContract] 
			[Serializable]
			public partial class ShortTextCollection : IInformationObject , IInformationCollection
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public ShortTextCollection()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "ShortTextCollection";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/ShortTextCollection/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(ShortTextCollection), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<ShortTextCollection>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: ShortTextCollection");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(ShortTextCollection), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/ShortTextCollection/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/ShortTextCollection/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((ShortTextCollection) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(ShortTextCollection));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static ShortTextCollection DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(ShortTextCollection));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (ShortTextCollection) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "ShortTextCollection", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "ShortTextCollection", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref ShortTextCollection customDemoObject);


				
				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.UpdateCollections(masterInstance);
					}
				}



				bool IInformationCollection.IsMasterCollection {
					get {
						return false;
					}
				}

				string IInformationCollection.GetMasterLocation()
				{
					throw new NotSupportedException("Master collection location only supported for master collections");
					
				}

				async Task<IInformationCollection> IInformationCollection.GetMasterInstanceAsync()
				{
					throw new NotSupportedException("Master collection instance only supported for master collections");
					
				}


				public string GetItemDirectory()
				{
					string dummyItemLocation = ObjectStorage.GetRelativeLocationFromID<ShortTextObject>("dummy");
					string nonOwnerDirectoryLocation = StorageSupport.GetParentDirectoryTarget(dummyItemLocation);
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					string ownerDirectoryLocation = StorageSupport.GetOwnerContentLocation(owner, nonOwnerDirectoryLocation);
					return ownerDirectoryLocation;
				}

				public async Task RefreshContentAsync()
				{
				}




                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }

				
		
				public static ShortTextCollection CreateDefault()
				{
					var result = new ShortTextCollection();
					return result;
				}

				/*
				public static ShortTextCollection CreateDemoDefault()
				{
					ShortTextCollection customDemo = null;
					ShortTextCollection.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new ShortTextCollection();
					result.CollectionContent.Add(ShortTextObject.CreateDemoDefault());
					//result.CollectionContent.Add(ShortTextObject.CreateDemoDefault());
					//result.CollectionContent.Add(ShortTextObject.CreateDemoDefault());
					return result;
				}
				*/

		
				[DataMember] public List<ShortTextObject> CollectionContent = new List<ShortTextObject>();
				private ShortTextObject[] _unmodified_CollectionContent;

				[DataMember] public bool IsCollectionFiltered;
				private bool _unmodified_IsCollectionFiltered;
				
				[DataMember] public List<string> OrderFilterIDList = new List<string>();
				private string[] _unmodified_OrderFilterIDList;

				public string SelectedIDCommaSeparated
				{
					get
					{
						string[] sourceArray;
						if (OrderFilterIDList != null)
							sourceArray = OrderFilterIDList.ToArray();
						else
							sourceArray = CollectionContent.Select(item => item.ID).ToArray();
						return String.Join(",", sourceArray);
					}
					set 
					{
						if (value == null)
							return;
						string[] valueArray = value.Split(',');
						OrderFilterIDList = new List<string>();
						OrderFilterIDList.AddRange(valueArray);
						OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
					}
				}

				public ShortTextObject[] GetIDSelectedArray()
				{
					if (IsCollectionFiltered == false || this.OrderFilterIDList == null)
						return CollectionContent.ToArray();
					return
						this.OrderFilterIDList.Select(id => CollectionContent.FirstOrDefault(item => item.ID == id)).Where(item => item != null).ToArray();
				}

				public void RefreshOrderAndFilterListFromContent()
                {
                    if (OrderFilterIDList == null)
                        return;
                    OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
                }

				public void ParsePropertyValue(string propertyName, string propertyValue)
				{
					switch(propertyName)
					{
						case "SelectedIDCommaSeparated":
							SelectedIDCommaSeparated = propertyValue;
							break;
						case "IsCollectionFiltered":
							IsCollectionFiltered = bool.Parse(propertyValue);
							break;
						default:
							throw new NotSupportedException("No ParsePropertyValue supported for property: " + propertyName);
					}
				}


				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					for(int i = 0; i < CollectionContent.Count; i++) // >
					{
						if(CollectionContent[i].ID == replacingObject.ID)
							CollectionContent[i] = (ShortTextObject )replacingObject;
						else { // Cannot have circular reference, so can be in else branch
							IInformationObject iObject = CollectionContent[i];
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}

				
				bool IInformationObject.IsInstanceTreeModified {
					get {
						bool collectionModified = CollectionContent.SequenceEqual(_unmodified_CollectionContent) == false;
						if(collectionModified)
							return true;
						//if((OrderFilterIDList == null && _unmodified_OrderFilterIDList != null) || _unmodified_OrderFilterIDList
						if(IsCollectionFiltered != _unmodified_IsCollectionFiltered)
							return true;
						// For non-master content
						foreach(IInformationObject item in CollectionContent)
						{
							bool itemTreeModified = item.IsInstanceTreeModified;
							if(itemTreeModified)
								return true;
						}
							
						return false;
					}
				}
				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_CollectionContent = CollectionContent.ToArray();
					_unmodified_IsCollectionFiltered = IsCollectionFiltered;
					if(OrderFilterIDList == null)
						_unmodified_OrderFilterIDList = null;
					else
						_unmodified_OrderFilterIDList = OrderFilterIDList.ToArray();
					foreach(IInformationObject iObject in CollectionContent)
						iObject.SetInstanceTreeValuesAsUnmodified();
				}

				private void CopyContentFrom(ShortTextCollection sourceObject)
				{
					CollectionContent = sourceObject.CollectionContent;
					_unmodified_CollectionContent = sourceObject._unmodified_CollectionContent;
				}
				
				private object FindFromObjectTree(string objectId)
				{
					foreach(var item in CollectionContent)
					{
						object result = item.FindObjectByID(objectId);
						if(result != null)
							return result;
					}
					return null;
				}

				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					foreach(IInformationObject iObject in CollectionContent)
						iObject.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
				}


				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						bool doAdd = true;
						if(filterOnFalse != null)
							doAdd = filterOnFalse(iObject);
						if(doAdd) {
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
				}


			
			}
			[DataContract] 
			[Serializable]
			public partial class ShortTextObject : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public ShortTextObject()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "ShortTextObject";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/ShortTextObject/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(ShortTextObject), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<ShortTextObject>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: ShortTextObject");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(ShortTextObject), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/ShortTextObject/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/ShortTextObject/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((ShortTextObject) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(ShortTextObject));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static ShortTextObject DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(ShortTextObject));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (ShortTextObject) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "ShortTextObject", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "ShortTextObject", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref ShortTextObject customDemoObject);



				public static ShortTextObject CreateDefault()
				{
					var result = new ShortTextObject();
					return result;
				}
				/*
				public static ShortTextObject CreateDemoDefault()
				{
					ShortTextObject customDemo = null;
					ShortTextObject.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new ShortTextObject();
					result.Content = @"ShortTextObject.Content";

				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(Content != _unmodified_Content)
							return true;
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
				}


				private void CopyContentFrom(ShortTextObject sourceObject)
				{
					Content = sourceObject.Content;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_Content = Content;
				
				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "Content":
							Content = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string Content { get; set; }
			private string _unmodified_Content;
			
			}
			[DataContract] 
			[Serializable]
			public partial class LongTextCollection : IInformationObject , IInformationCollection
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public LongTextCollection()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "LongTextCollection";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/LongTextCollection/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(LongTextCollection), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<LongTextCollection>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: LongTextCollection");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(LongTextCollection), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/LongTextCollection/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/LongTextCollection/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((LongTextCollection) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(LongTextCollection));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static LongTextCollection DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(LongTextCollection));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (LongTextCollection) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "LongTextCollection", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "LongTextCollection", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref LongTextCollection customDemoObject);


				
				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.UpdateCollections(masterInstance);
					}
				}



				bool IInformationCollection.IsMasterCollection {
					get {
						return false;
					}
				}

				string IInformationCollection.GetMasterLocation()
				{
					throw new NotSupportedException("Master collection location only supported for master collections");
					
				}

				async Task<IInformationCollection> IInformationCollection.GetMasterInstanceAsync()
				{
					throw new NotSupportedException("Master collection instance only supported for master collections");
					
				}


				public string GetItemDirectory()
				{
					string dummyItemLocation = ObjectStorage.GetRelativeLocationFromID<LongTextObject>("dummy");
					string nonOwnerDirectoryLocation = StorageSupport.GetParentDirectoryTarget(dummyItemLocation);
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					string ownerDirectoryLocation = StorageSupport.GetOwnerContentLocation(owner, nonOwnerDirectoryLocation);
					return ownerDirectoryLocation;
				}

				public async Task RefreshContentAsync()
				{
				}




                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }

				
		
				public static LongTextCollection CreateDefault()
				{
					var result = new LongTextCollection();
					return result;
				}

				/*
				public static LongTextCollection CreateDemoDefault()
				{
					LongTextCollection customDemo = null;
					LongTextCollection.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new LongTextCollection();
					result.CollectionContent.Add(LongTextObject.CreateDemoDefault());
					//result.CollectionContent.Add(LongTextObject.CreateDemoDefault());
					//result.CollectionContent.Add(LongTextObject.CreateDemoDefault());
					return result;
				}
				*/

		
				[DataMember] public List<LongTextObject> CollectionContent = new List<LongTextObject>();
				private LongTextObject[] _unmodified_CollectionContent;

				[DataMember] public bool IsCollectionFiltered;
				private bool _unmodified_IsCollectionFiltered;
				
				[DataMember] public List<string> OrderFilterIDList = new List<string>();
				private string[] _unmodified_OrderFilterIDList;

				public string SelectedIDCommaSeparated
				{
					get
					{
						string[] sourceArray;
						if (OrderFilterIDList != null)
							sourceArray = OrderFilterIDList.ToArray();
						else
							sourceArray = CollectionContent.Select(item => item.ID).ToArray();
						return String.Join(",", sourceArray);
					}
					set 
					{
						if (value == null)
							return;
						string[] valueArray = value.Split(',');
						OrderFilterIDList = new List<string>();
						OrderFilterIDList.AddRange(valueArray);
						OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
					}
				}

				public LongTextObject[] GetIDSelectedArray()
				{
					if (IsCollectionFiltered == false || this.OrderFilterIDList == null)
						return CollectionContent.ToArray();
					return
						this.OrderFilterIDList.Select(id => CollectionContent.FirstOrDefault(item => item.ID == id)).Where(item => item != null).ToArray();
				}

				public void RefreshOrderAndFilterListFromContent()
                {
                    if (OrderFilterIDList == null)
                        return;
                    OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
                }

				public void ParsePropertyValue(string propertyName, string propertyValue)
				{
					switch(propertyName)
					{
						case "SelectedIDCommaSeparated":
							SelectedIDCommaSeparated = propertyValue;
							break;
						case "IsCollectionFiltered":
							IsCollectionFiltered = bool.Parse(propertyValue);
							break;
						default:
							throw new NotSupportedException("No ParsePropertyValue supported for property: " + propertyName);
					}
				}


				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					for(int i = 0; i < CollectionContent.Count; i++) // >
					{
						if(CollectionContent[i].ID == replacingObject.ID)
							CollectionContent[i] = (LongTextObject )replacingObject;
						else { // Cannot have circular reference, so can be in else branch
							IInformationObject iObject = CollectionContent[i];
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}

				
				bool IInformationObject.IsInstanceTreeModified {
					get {
						bool collectionModified = CollectionContent.SequenceEqual(_unmodified_CollectionContent) == false;
						if(collectionModified)
							return true;
						//if((OrderFilterIDList == null && _unmodified_OrderFilterIDList != null) || _unmodified_OrderFilterIDList
						if(IsCollectionFiltered != _unmodified_IsCollectionFiltered)
							return true;
						// For non-master content
						foreach(IInformationObject item in CollectionContent)
						{
							bool itemTreeModified = item.IsInstanceTreeModified;
							if(itemTreeModified)
								return true;
						}
							
						return false;
					}
				}
				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_CollectionContent = CollectionContent.ToArray();
					_unmodified_IsCollectionFiltered = IsCollectionFiltered;
					if(OrderFilterIDList == null)
						_unmodified_OrderFilterIDList = null;
					else
						_unmodified_OrderFilterIDList = OrderFilterIDList.ToArray();
					foreach(IInformationObject iObject in CollectionContent)
						iObject.SetInstanceTreeValuesAsUnmodified();
				}

				private void CopyContentFrom(LongTextCollection sourceObject)
				{
					CollectionContent = sourceObject.CollectionContent;
					_unmodified_CollectionContent = sourceObject._unmodified_CollectionContent;
				}
				
				private object FindFromObjectTree(string objectId)
				{
					foreach(var item in CollectionContent)
					{
						object result = item.FindObjectByID(objectId);
						if(result != null)
							return result;
					}
					return null;
				}

				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					foreach(IInformationObject iObject in CollectionContent)
						iObject.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
				}


				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						bool doAdd = true;
						if(filterOnFalse != null)
							doAdd = filterOnFalse(iObject);
						if(doAdd) {
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
				}


			
			}
			[DataContract] 
			[Serializable]
			public partial class LongTextObject : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public LongTextObject()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "LongTextObject";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/LongTextObject/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(LongTextObject), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<LongTextObject>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: LongTextObject");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(LongTextObject), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/LongTextObject/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/LongTextObject/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((LongTextObject) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(LongTextObject));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static LongTextObject DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(LongTextObject));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (LongTextObject) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "LongTextObject", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "LongTextObject", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref LongTextObject customDemoObject);



				public static LongTextObject CreateDefault()
				{
					var result = new LongTextObject();
					return result;
				}
				/*
				public static LongTextObject CreateDemoDefault()
				{
					LongTextObject customDemo = null;
					LongTextObject.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new LongTextObject();
					result.Content = @"LongTextObject.Content
LongTextObject.Content
LongTextObject.Content
LongTextObject.Content
LongTextObject.Content
";

				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(Content != _unmodified_Content)
							return true;
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
				}


				private void CopyContentFrom(LongTextObject sourceObject)
				{
					Content = sourceObject.Content;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_Content = Content;
				
				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "Content":
							Content = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string Content { get; set; }
			private string _unmodified_Content;
			
			}
			[DataContract] 
			[Serializable]
			public partial class MapMarker : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public MapMarker()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "MapMarker";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/MapMarker/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(MapMarker), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<MapMarker>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: MapMarker");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(MapMarker), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/MapMarker/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/MapMarker/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((MapMarker) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(MapMarker));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static MapMarker DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(MapMarker));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (MapMarker) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "MapMarker", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "MapMarker", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref MapMarker customDemoObject);



				public static MapMarker CreateDefault()
				{
					var result = new MapMarker();
					result.Location = Location.CreateDefault();
					return result;
				}
				/*
				public static MapMarker CreateDemoDefault()
				{
					MapMarker customDemo = null;
					MapMarker.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new MapMarker();
					result.IconUrl = @"MapMarker.IconUrl";

					result.MarkerSource = @"MapMarker.MarkerSource";

					result.CategoryName = @"MapMarker.CategoryName";

					result.LocationText = @"MapMarker.LocationText";

					result.PopupTitle = @"MapMarker.PopupTitle";

					result.PopupContent = @"MapMarker.PopupContent
MapMarker.PopupContent
MapMarker.PopupContent
MapMarker.PopupContent
MapMarker.PopupContent
";

					result.Location = Location.CreateDemoDefault();
				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
					if(Location != null) {
						((IInformationObject) Location).UpdateCollections(masterInstance);
					}

				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					{ // Scoping block for variable name reusability
						IInformationObject item = Location;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					{
						var item = Location;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					{
						var item = (IInformationObject) Location;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(IconUrl != _unmodified_IconUrl)
							return true;
						if(MarkerSource != _unmodified_MarkerSource)
							return true;
						if(CategoryName != _unmodified_CategoryName)
							return true;
						if(LocationText != _unmodified_LocationText)
							return true;
						if(PopupTitle != _unmodified_PopupTitle)
							return true;
						if(PopupContent != _unmodified_PopupContent)
							return true;
						if(Location != _unmodified_Location)
							return true;
						{
							IInformationObject item = (IInformationObject) Location;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					if(Location != null) {
						if(Location.ID == replacingObject.ID)
							Location = (Location) replacingObject;
						else {
							IInformationObject iObject = Location;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}


				private void CopyContentFrom(MapMarker sourceObject)
				{
					IconUrl = sourceObject.IconUrl;
					MarkerSource = sourceObject.MarkerSource;
					CategoryName = sourceObject.CategoryName;
					LocationText = sourceObject.LocationText;
					PopupTitle = sourceObject.PopupTitle;
					PopupContent = sourceObject.PopupContent;
					Location = sourceObject.Location;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_IconUrl = IconUrl;
					_unmodified_MarkerSource = MarkerSource;
					_unmodified_CategoryName = CategoryName;
					_unmodified_LocationText = LocationText;
					_unmodified_PopupTitle = PopupTitle;
					_unmodified_PopupContent = PopupContent;
				
					_unmodified_Location = Location;
					if(Location != null)
						((IInformationObject) Location).SetInstanceTreeValuesAsUnmodified();

				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "IconUrl":
							IconUrl = value;
							break;
						case "MarkerSource":
							MarkerSource = value;
							break;
						case "CategoryName":
							CategoryName = value;
							break;
						case "LocationText":
							LocationText = value;
							break;
						case "PopupTitle":
							PopupTitle = value;
							break;
						case "PopupContent":
							PopupContent = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string IconUrl { get; set; }
			private string _unmodified_IconUrl;
			[DataMember] 
			public string MarkerSource { get; set; }
			private string _unmodified_MarkerSource;
			[DataMember] 
			public string CategoryName { get; set; }
			private string _unmodified_CategoryName;
			[DataMember] 
			public string LocationText { get; set; }
			private string _unmodified_LocationText;
			[DataMember] 
			public string PopupTitle { get; set; }
			private string _unmodified_PopupTitle;
			[DataMember] 
			public string PopupContent { get; set; }
			private string _unmodified_PopupContent;
			[DataMember] 
			public Location Location { get; set; }
			private Location _unmodified_Location;
			
			}
			[DataContract] 
			[Serializable]
			public partial class MapMarkerCollection : IInformationObject , IInformationCollection
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public MapMarkerCollection()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "MapMarkerCollection";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/MapMarkerCollection/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(MapMarkerCollection), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<MapMarkerCollection>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: MapMarkerCollection");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(MapMarkerCollection), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/MapMarkerCollection/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/MapMarkerCollection/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((MapMarkerCollection) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(MapMarkerCollection));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static MapMarkerCollection DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(MapMarkerCollection));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (MapMarkerCollection) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "MapMarkerCollection", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "MapMarkerCollection", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref MapMarkerCollection customDemoObject);


				
				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.UpdateCollections(masterInstance);
					}
				}



				bool IInformationCollection.IsMasterCollection {
					get {
						return false;
					}
				}

				string IInformationCollection.GetMasterLocation()
				{
					throw new NotSupportedException("Master collection location only supported for master collections");
					
				}

				async Task<IInformationCollection> IInformationCollection.GetMasterInstanceAsync()
				{
					throw new NotSupportedException("Master collection instance only supported for master collections");
					
				}


				public string GetItemDirectory()
				{
					string dummyItemLocation = ObjectStorage.GetRelativeLocationFromID<MapMarker>("dummy");
					string nonOwnerDirectoryLocation = StorageSupport.GetParentDirectoryTarget(dummyItemLocation);
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					string ownerDirectoryLocation = StorageSupport.GetOwnerContentLocation(owner, nonOwnerDirectoryLocation);
					return ownerDirectoryLocation;
				}

				public async Task RefreshContentAsync()
				{
				}




                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }

				
		
				public static MapMarkerCollection CreateDefault()
				{
					var result = new MapMarkerCollection();
					return result;
				}

				/*
				public static MapMarkerCollection CreateDemoDefault()
				{
					MapMarkerCollection customDemo = null;
					MapMarkerCollection.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new MapMarkerCollection();
					result.CollectionContent.Add(MapMarker.CreateDemoDefault());
					//result.CollectionContent.Add(MapMarker.CreateDemoDefault());
					//result.CollectionContent.Add(MapMarker.CreateDemoDefault());
					return result;
				}
				*/

		
				[DataMember] public List<MapMarker> CollectionContent = new List<MapMarker>();
				private MapMarker[] _unmodified_CollectionContent;

				[DataMember] public bool IsCollectionFiltered;
				private bool _unmodified_IsCollectionFiltered;
				
				[DataMember] public List<string> OrderFilterIDList = new List<string>();
				private string[] _unmodified_OrderFilterIDList;

				public string SelectedIDCommaSeparated
				{
					get
					{
						string[] sourceArray;
						if (OrderFilterIDList != null)
							sourceArray = OrderFilterIDList.ToArray();
						else
							sourceArray = CollectionContent.Select(item => item.ID).ToArray();
						return String.Join(",", sourceArray);
					}
					set 
					{
						if (value == null)
							return;
						string[] valueArray = value.Split(',');
						OrderFilterIDList = new List<string>();
						OrderFilterIDList.AddRange(valueArray);
						OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
					}
				}

				public MapMarker[] GetIDSelectedArray()
				{
					if (IsCollectionFiltered == false || this.OrderFilterIDList == null)
						return CollectionContent.ToArray();
					return
						this.OrderFilterIDList.Select(id => CollectionContent.FirstOrDefault(item => item.ID == id)).Where(item => item != null).ToArray();
				}

				public void RefreshOrderAndFilterListFromContent()
                {
                    if (OrderFilterIDList == null)
                        return;
                    OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
                }

				public void ParsePropertyValue(string propertyName, string propertyValue)
				{
					switch(propertyName)
					{
						case "SelectedIDCommaSeparated":
							SelectedIDCommaSeparated = propertyValue;
							break;
						case "IsCollectionFiltered":
							IsCollectionFiltered = bool.Parse(propertyValue);
							break;
						default:
							throw new NotSupportedException("No ParsePropertyValue supported for property: " + propertyName);
					}
				}


				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					for(int i = 0; i < CollectionContent.Count; i++) // >
					{
						if(CollectionContent[i].ID == replacingObject.ID)
							CollectionContent[i] = (MapMarker )replacingObject;
						else { // Cannot have circular reference, so can be in else branch
							IInformationObject iObject = CollectionContent[i];
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}

				
				bool IInformationObject.IsInstanceTreeModified {
					get {
						bool collectionModified = CollectionContent.SequenceEqual(_unmodified_CollectionContent) == false;
						if(collectionModified)
							return true;
						//if((OrderFilterIDList == null && _unmodified_OrderFilterIDList != null) || _unmodified_OrderFilterIDList
						if(IsCollectionFiltered != _unmodified_IsCollectionFiltered)
							return true;
						// For non-master content
						foreach(IInformationObject item in CollectionContent)
						{
							bool itemTreeModified = item.IsInstanceTreeModified;
							if(itemTreeModified)
								return true;
						}
							
						return false;
					}
				}
				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_CollectionContent = CollectionContent.ToArray();
					_unmodified_IsCollectionFiltered = IsCollectionFiltered;
					if(OrderFilterIDList == null)
						_unmodified_OrderFilterIDList = null;
					else
						_unmodified_OrderFilterIDList = OrderFilterIDList.ToArray();
					foreach(IInformationObject iObject in CollectionContent)
						iObject.SetInstanceTreeValuesAsUnmodified();
				}

				private void CopyContentFrom(MapMarkerCollection sourceObject)
				{
					CollectionContent = sourceObject.CollectionContent;
					_unmodified_CollectionContent = sourceObject._unmodified_CollectionContent;
				}
				
				private object FindFromObjectTree(string objectId)
				{
					foreach(var item in CollectionContent)
					{
						object result = item.FindObjectByID(objectId);
						if(result != null)
							return result;
					}
					return null;
				}

				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					foreach(IInformationObject iObject in CollectionContent)
						iObject.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
				}


				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						bool doAdd = true;
						if(filterOnFalse != null)
							doAdd = filterOnFalse(iObject);
						if(doAdd) {
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
				}


			
			}
			[DataContract] 
			[Serializable]
			public partial class ModeratorCollection : IInformationObject , IInformationCollection
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public ModeratorCollection()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "ModeratorCollection";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/ModeratorCollection/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(ModeratorCollection), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<ModeratorCollection>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: ModeratorCollection");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(ModeratorCollection), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/ModeratorCollection/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/ModeratorCollection/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((ModeratorCollection) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(ModeratorCollection));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static ModeratorCollection DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(ModeratorCollection));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (ModeratorCollection) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "ModeratorCollection", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "ModeratorCollection", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref ModeratorCollection customDemoObject);


				
				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.UpdateCollections(masterInstance);
					}
				}



				bool IInformationCollection.IsMasterCollection {
					get {
						return false;
					}
				}

				string IInformationCollection.GetMasterLocation()
				{
					throw new NotSupportedException("Master collection location only supported for master collections");
					
				}

				async Task<IInformationCollection> IInformationCollection.GetMasterInstanceAsync()
				{
					throw new NotSupportedException("Master collection instance only supported for master collections");
					
				}


				public string GetItemDirectory()
				{
					string dummyItemLocation = ObjectStorage.GetRelativeLocationFromID<Moderator>("dummy");
					string nonOwnerDirectoryLocation = StorageSupport.GetParentDirectoryTarget(dummyItemLocation);
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					string ownerDirectoryLocation = StorageSupport.GetOwnerContentLocation(owner, nonOwnerDirectoryLocation);
					return ownerDirectoryLocation;
				}

				public async Task RefreshContentAsync()
				{
				}




                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }

				
		
				public static ModeratorCollection CreateDefault()
				{
					var result = new ModeratorCollection();
					return result;
				}

				/*
				public static ModeratorCollection CreateDemoDefault()
				{
					ModeratorCollection customDemo = null;
					ModeratorCollection.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new ModeratorCollection();
					result.CollectionContent.Add(Moderator.CreateDemoDefault());
					//result.CollectionContent.Add(Moderator.CreateDemoDefault());
					//result.CollectionContent.Add(Moderator.CreateDemoDefault());
					return result;
				}
				*/

		
				[DataMember] public List<Moderator> CollectionContent = new List<Moderator>();
				private Moderator[] _unmodified_CollectionContent;

				[DataMember] public bool IsCollectionFiltered;
				private bool _unmodified_IsCollectionFiltered;
				
				[DataMember] public List<string> OrderFilterIDList = new List<string>();
				private string[] _unmodified_OrderFilterIDList;

				public string SelectedIDCommaSeparated
				{
					get
					{
						string[] sourceArray;
						if (OrderFilterIDList != null)
							sourceArray = OrderFilterIDList.ToArray();
						else
							sourceArray = CollectionContent.Select(item => item.ID).ToArray();
						return String.Join(",", sourceArray);
					}
					set 
					{
						if (value == null)
							return;
						string[] valueArray = value.Split(',');
						OrderFilterIDList = new List<string>();
						OrderFilterIDList.AddRange(valueArray);
						OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
					}
				}

				public Moderator[] GetIDSelectedArray()
				{
					if (IsCollectionFiltered == false || this.OrderFilterIDList == null)
						return CollectionContent.ToArray();
					return
						this.OrderFilterIDList.Select(id => CollectionContent.FirstOrDefault(item => item.ID == id)).Where(item => item != null).ToArray();
				}

				public void RefreshOrderAndFilterListFromContent()
                {
                    if (OrderFilterIDList == null)
                        return;
                    OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
                }

				public void ParsePropertyValue(string propertyName, string propertyValue)
				{
					switch(propertyName)
					{
						case "SelectedIDCommaSeparated":
							SelectedIDCommaSeparated = propertyValue;
							break;
						case "IsCollectionFiltered":
							IsCollectionFiltered = bool.Parse(propertyValue);
							break;
						default:
							throw new NotSupportedException("No ParsePropertyValue supported for property: " + propertyName);
					}
				}


				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					for(int i = 0; i < CollectionContent.Count; i++) // >
					{
						if(CollectionContent[i].ID == replacingObject.ID)
							CollectionContent[i] = (Moderator )replacingObject;
						else { // Cannot have circular reference, so can be in else branch
							IInformationObject iObject = CollectionContent[i];
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}

				
				bool IInformationObject.IsInstanceTreeModified {
					get {
						bool collectionModified = CollectionContent.SequenceEqual(_unmodified_CollectionContent) == false;
						if(collectionModified)
							return true;
						//if((OrderFilterIDList == null && _unmodified_OrderFilterIDList != null) || _unmodified_OrderFilterIDList
						if(IsCollectionFiltered != _unmodified_IsCollectionFiltered)
							return true;
						// For non-master content
						foreach(IInformationObject item in CollectionContent)
						{
							bool itemTreeModified = item.IsInstanceTreeModified;
							if(itemTreeModified)
								return true;
						}
							
						return false;
					}
				}
				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_CollectionContent = CollectionContent.ToArray();
					_unmodified_IsCollectionFiltered = IsCollectionFiltered;
					if(OrderFilterIDList == null)
						_unmodified_OrderFilterIDList = null;
					else
						_unmodified_OrderFilterIDList = OrderFilterIDList.ToArray();
					foreach(IInformationObject iObject in CollectionContent)
						iObject.SetInstanceTreeValuesAsUnmodified();
				}

				private void CopyContentFrom(ModeratorCollection sourceObject)
				{
					CollectionContent = sourceObject.CollectionContent;
					_unmodified_CollectionContent = sourceObject._unmodified_CollectionContent;
				}
				
				private object FindFromObjectTree(string objectId)
				{
					foreach(var item in CollectionContent)
					{
						object result = item.FindObjectByID(objectId);
						if(result != null)
							return result;
					}
					return null;
				}

				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					foreach(IInformationObject iObject in CollectionContent)
						iObject.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
				}


				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						bool doAdd = true;
						if(filterOnFalse != null)
							doAdd = filterOnFalse(iObject);
						if(doAdd) {
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
				}


			
			}
			[DataContract] 
			[Serializable]
			public partial class Moderator : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public Moderator()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "Moderator";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/Moderator/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(Moderator), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<Moderator>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: Moderator");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(Moderator), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/Moderator/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/Moderator/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((Moderator) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(Moderator));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static Moderator DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(Moderator));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (Moderator) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "Moderator", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "Moderator", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref Moderator customDemoObject);



				public static Moderator CreateDefault()
				{
					var result = new Moderator();
					return result;
				}
				/*
				public static Moderator CreateDemoDefault()
				{
					Moderator customDemo = null;
					Moderator.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new Moderator();
					result.ModeratorName = @"Moderator.ModeratorName";

					result.ProfileUrl = @"Moderator.ProfileUrl";

				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(ModeratorName != _unmodified_ModeratorName)
							return true;
						if(ProfileUrl != _unmodified_ProfileUrl)
							return true;
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
				}


				private void CopyContentFrom(Moderator sourceObject)
				{
					ModeratorName = sourceObject.ModeratorName;
					ProfileUrl = sourceObject.ProfileUrl;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_ModeratorName = ModeratorName;
					_unmodified_ProfileUrl = ProfileUrl;
				
				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "ModeratorName":
							ModeratorName = value;
							break;
						case "ProfileUrl":
							ProfileUrl = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string ModeratorName { get; set; }
			private string _unmodified_ModeratorName;
			[DataMember] 
			public string ProfileUrl { get; set; }
			private string _unmodified_ProfileUrl;
			
			}
			[DataContract] 
			[Serializable]
			public partial class CollaboratorCollection : IInformationObject , IInformationCollection
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public CollaboratorCollection()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "CollaboratorCollection";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/CollaboratorCollection/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(CollaboratorCollection), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<CollaboratorCollection>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: CollaboratorCollection");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(CollaboratorCollection), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/CollaboratorCollection/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/CollaboratorCollection/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((CollaboratorCollection) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(CollaboratorCollection));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static CollaboratorCollection DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(CollaboratorCollection));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (CollaboratorCollection) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "CollaboratorCollection", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "CollaboratorCollection", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref CollaboratorCollection customDemoObject);


				
				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.UpdateCollections(masterInstance);
					}
				}



				bool IInformationCollection.IsMasterCollection {
					get {
						return false;
					}
				}

				string IInformationCollection.GetMasterLocation()
				{
					throw new NotSupportedException("Master collection location only supported for master collections");
					
				}

				async Task<IInformationCollection> IInformationCollection.GetMasterInstanceAsync()
				{
					throw new NotSupportedException("Master collection instance only supported for master collections");
					
				}


				public string GetItemDirectory()
				{
					string dummyItemLocation = ObjectStorage.GetRelativeLocationFromID<Collaborator>("dummy");
					string nonOwnerDirectoryLocation = StorageSupport.GetParentDirectoryTarget(dummyItemLocation);
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					string ownerDirectoryLocation = StorageSupport.GetOwnerContentLocation(owner, nonOwnerDirectoryLocation);
					return ownerDirectoryLocation;
				}

				public async Task RefreshContentAsync()
				{
				}




                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }

				
		
				public static CollaboratorCollection CreateDefault()
				{
					var result = new CollaboratorCollection();
					return result;
				}

				/*
				public static CollaboratorCollection CreateDemoDefault()
				{
					CollaboratorCollection customDemo = null;
					CollaboratorCollection.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new CollaboratorCollection();
					result.CollectionContent.Add(Collaborator.CreateDemoDefault());
					//result.CollectionContent.Add(Collaborator.CreateDemoDefault());
					//result.CollectionContent.Add(Collaborator.CreateDemoDefault());
					return result;
				}
				*/

		
				[DataMember] public List<Collaborator> CollectionContent = new List<Collaborator>();
				private Collaborator[] _unmodified_CollectionContent;

				[DataMember] public bool IsCollectionFiltered;
				private bool _unmodified_IsCollectionFiltered;
				
				[DataMember] public List<string> OrderFilterIDList = new List<string>();
				private string[] _unmodified_OrderFilterIDList;

				public string SelectedIDCommaSeparated
				{
					get
					{
						string[] sourceArray;
						if (OrderFilterIDList != null)
							sourceArray = OrderFilterIDList.ToArray();
						else
							sourceArray = CollectionContent.Select(item => item.ID).ToArray();
						return String.Join(",", sourceArray);
					}
					set 
					{
						if (value == null)
							return;
						string[] valueArray = value.Split(',');
						OrderFilterIDList = new List<string>();
						OrderFilterIDList.AddRange(valueArray);
						OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
					}
				}

				public Collaborator[] GetIDSelectedArray()
				{
					if (IsCollectionFiltered == false || this.OrderFilterIDList == null)
						return CollectionContent.ToArray();
					return
						this.OrderFilterIDList.Select(id => CollectionContent.FirstOrDefault(item => item.ID == id)).Where(item => item != null).ToArray();
				}

				public void RefreshOrderAndFilterListFromContent()
                {
                    if (OrderFilterIDList == null)
                        return;
                    OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
                }

				public void ParsePropertyValue(string propertyName, string propertyValue)
				{
					switch(propertyName)
					{
						case "SelectedIDCommaSeparated":
							SelectedIDCommaSeparated = propertyValue;
							break;
						case "IsCollectionFiltered":
							IsCollectionFiltered = bool.Parse(propertyValue);
							break;
						default:
							throw new NotSupportedException("No ParsePropertyValue supported for property: " + propertyName);
					}
				}


				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					for(int i = 0; i < CollectionContent.Count; i++) // >
					{
						if(CollectionContent[i].ID == replacingObject.ID)
							CollectionContent[i] = (Collaborator )replacingObject;
						else { // Cannot have circular reference, so can be in else branch
							IInformationObject iObject = CollectionContent[i];
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}

				
				bool IInformationObject.IsInstanceTreeModified {
					get {
						bool collectionModified = CollectionContent.SequenceEqual(_unmodified_CollectionContent) == false;
						if(collectionModified)
							return true;
						//if((OrderFilterIDList == null && _unmodified_OrderFilterIDList != null) || _unmodified_OrderFilterIDList
						if(IsCollectionFiltered != _unmodified_IsCollectionFiltered)
							return true;
						// For non-master content
						foreach(IInformationObject item in CollectionContent)
						{
							bool itemTreeModified = item.IsInstanceTreeModified;
							if(itemTreeModified)
								return true;
						}
							
						return false;
					}
				}
				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_CollectionContent = CollectionContent.ToArray();
					_unmodified_IsCollectionFiltered = IsCollectionFiltered;
					if(OrderFilterIDList == null)
						_unmodified_OrderFilterIDList = null;
					else
						_unmodified_OrderFilterIDList = OrderFilterIDList.ToArray();
					foreach(IInformationObject iObject in CollectionContent)
						iObject.SetInstanceTreeValuesAsUnmodified();
				}

				private void CopyContentFrom(CollaboratorCollection sourceObject)
				{
					CollectionContent = sourceObject.CollectionContent;
					_unmodified_CollectionContent = sourceObject._unmodified_CollectionContent;
				}
				
				private object FindFromObjectTree(string objectId)
				{
					foreach(var item in CollectionContent)
					{
						object result = item.FindObjectByID(objectId);
						if(result != null)
							return result;
					}
					return null;
				}

				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					foreach(IInformationObject iObject in CollectionContent)
						iObject.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
				}


				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						bool doAdd = true;
						if(filterOnFalse != null)
							doAdd = filterOnFalse(iObject);
						if(doAdd) {
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
				}


			
			}
			[DataContract] 
			[Serializable]
			public partial class Collaborator : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public Collaborator()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "Collaborator";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/Collaborator/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(Collaborator), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<Collaborator>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: Collaborator");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(Collaborator), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/Collaborator/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/Collaborator/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((Collaborator) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(Collaborator));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static Collaborator DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(Collaborator));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (Collaborator) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "Collaborator", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "Collaborator", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref Collaborator customDemoObject);



				public static Collaborator CreateDefault()
				{
					var result = new Collaborator();
					return result;
				}
				/*
				public static Collaborator CreateDemoDefault()
				{
					Collaborator customDemo = null;
					Collaborator.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new Collaborator();
					result.AccountID = @"Collaborator.AccountID";

					result.EmailAddress = @"Collaborator.EmailAddress";

					result.CollaboratorName = @"Collaborator.CollaboratorName";

					result.Role = @"Collaborator.Role";

					result.ProfileUrl = @"Collaborator.ProfileUrl";

				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(AccountID != _unmodified_AccountID)
							return true;
						if(EmailAddress != _unmodified_EmailAddress)
							return true;
						if(CollaboratorName != _unmodified_CollaboratorName)
							return true;
						if(Role != _unmodified_Role)
							return true;
						if(ProfileUrl != _unmodified_ProfileUrl)
							return true;
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
				}


				private void CopyContentFrom(Collaborator sourceObject)
				{
					AccountID = sourceObject.AccountID;
					EmailAddress = sourceObject.EmailAddress;
					CollaboratorName = sourceObject.CollaboratorName;
					Role = sourceObject.Role;
					ProfileUrl = sourceObject.ProfileUrl;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_AccountID = AccountID;
					_unmodified_EmailAddress = EmailAddress;
					_unmodified_CollaboratorName = CollaboratorName;
					_unmodified_Role = Role;
					_unmodified_ProfileUrl = ProfileUrl;
				
				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "AccountID":
							AccountID = value;
							break;
						case "EmailAddress":
							EmailAddress = value;
							break;
						case "CollaboratorName":
							CollaboratorName = value;
							break;
						case "Role":
							Role = value;
							break;
						case "ProfileUrl":
							ProfileUrl = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string AccountID { get; set; }
			private string _unmodified_AccountID;
			[DataMember] 
			public string EmailAddress { get; set; }
			private string _unmodified_EmailAddress;
			[DataMember] 
			public string CollaboratorName { get; set; }
			private string _unmodified_CollaboratorName;
			[DataMember] 
			public string Role { get; set; }
			private string _unmodified_Role;
			[DataMember] 
			public string ProfileUrl { get; set; }
			private string _unmodified_ProfileUrl;
			
			}
			[DataContract] 
			[Serializable]
			public partial class GroupSummaryContainer : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public GroupSummaryContainer()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "GroupSummaryContainer";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/GroupSummaryContainer/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(GroupSummaryContainer), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<GroupSummaryContainer>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: GroupSummaryContainer");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(GroupSummaryContainer), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/GroupSummaryContainer/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/GroupSummaryContainer/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((GroupSummaryContainer) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(GroupSummaryContainer));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static GroupSummaryContainer DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(GroupSummaryContainer));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (GroupSummaryContainer) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "GroupSummaryContainer", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "GroupSummaryContainer", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref GroupSummaryContainer customDemoObject);



				public static GroupSummaryContainer CreateDefault()
				{
					var result = new GroupSummaryContainer();
					result.Introduction = Introduction.CreateDefault();
					result.GroupSummaryIndex = GroupIndex.CreateDefault();
					result.GroupCollection = GroupCollection.CreateDefault();
					return result;
				}
				/*
				public static GroupSummaryContainer CreateDemoDefault()
				{
					GroupSummaryContainer customDemo = null;
					GroupSummaryContainer.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new GroupSummaryContainer();
					result.SummaryBody = @"GroupSummaryContainer.SummaryBody
GroupSummaryContainer.SummaryBody
GroupSummaryContainer.SummaryBody
GroupSummaryContainer.SummaryBody
GroupSummaryContainer.SummaryBody
";

					result.Introduction = Introduction.CreateDemoDefault();
					result.GroupSummaryIndex = GroupIndex.CreateDemoDefault();
					result.GroupCollection = GroupCollection.CreateDemoDefault();
				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
					if(Introduction != null) {
						((IInformationObject) Introduction).UpdateCollections(masterInstance);
					}

					if(GroupSummaryIndex != null) {
						((IInformationObject) GroupSummaryIndex).UpdateCollections(masterInstance);
					}

					if(GroupCollection != null) {
						((IInformationObject) GroupCollection).UpdateCollections(masterInstance);
					}

				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					{ // Scoping block for variable name reusability
						IInformationObject item = Introduction;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					{ // Scoping block for variable name reusability
						IInformationObject item = GroupSummaryIndex;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					{ // Scoping block for variable name reusability
						IInformationObject item = GroupCollection;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					{
						var item = Introduction;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = GroupSummaryIndex;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = GroupCollection;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					{
						var item = (IInformationObject) Introduction;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) GroupSummaryIndex;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) GroupCollection;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(SummaryBody != _unmodified_SummaryBody)
							return true;
						if(Introduction != _unmodified_Introduction)
							return true;
						if(GroupSummaryIndex != _unmodified_GroupSummaryIndex)
							return true;
						if(GroupCollection != _unmodified_GroupCollection)
							return true;
						{
							IInformationObject item = (IInformationObject) Introduction;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
						{
							IInformationObject item = (IInformationObject) GroupSummaryIndex;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
						{
							IInformationObject item = (IInformationObject) GroupCollection;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					if(Introduction != null) {
						if(Introduction.ID == replacingObject.ID)
							Introduction = (Introduction) replacingObject;
						else {
							IInformationObject iObject = Introduction;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(GroupSummaryIndex != null) {
						if(GroupSummaryIndex.ID == replacingObject.ID)
							GroupSummaryIndex = (GroupIndex) replacingObject;
						else {
							IInformationObject iObject = GroupSummaryIndex;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(GroupCollection != null) {
						if(GroupCollection.ID == replacingObject.ID)
							GroupCollection = (GroupCollection) replacingObject;
						else {
							IInformationObject iObject = GroupCollection;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}


				private void CopyContentFrom(GroupSummaryContainer sourceObject)
				{
					SummaryBody = sourceObject.SummaryBody;
					Introduction = sourceObject.Introduction;
					GroupSummaryIndex = sourceObject.GroupSummaryIndex;
					GroupCollection = sourceObject.GroupCollection;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_SummaryBody = SummaryBody;
				
					_unmodified_Introduction = Introduction;
					if(Introduction != null)
						((IInformationObject) Introduction).SetInstanceTreeValuesAsUnmodified();

					_unmodified_GroupSummaryIndex = GroupSummaryIndex;
					if(GroupSummaryIndex != null)
						((IInformationObject) GroupSummaryIndex).SetInstanceTreeValuesAsUnmodified();

					_unmodified_GroupCollection = GroupCollection;
					if(GroupCollection != null)
						((IInformationObject) GroupCollection).SetInstanceTreeValuesAsUnmodified();

				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "SummaryBody":
							SummaryBody = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string SummaryBody { get; set; }
			private string _unmodified_SummaryBody;
			[DataMember] 
			public Introduction Introduction { get; set; }
			private Introduction _unmodified_Introduction;
			[DataMember] 
			public GroupIndex GroupSummaryIndex { get; set; }
			private GroupIndex _unmodified_GroupSummaryIndex;
			[DataMember] 
			public GroupCollection GroupCollection { get; set; }
			private GroupCollection _unmodified_GroupCollection;
			
			}
			[DataContract] 
			[Serializable]
			public partial class GroupContainer : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public GroupContainer()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "GroupContainer";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/GroupContainer/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(GroupContainer), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<GroupContainer>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: GroupContainer");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(GroupContainer), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/GroupContainer/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/GroupContainer/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((GroupContainer) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(GroupContainer));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static GroupContainer DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(GroupContainer));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (GroupContainer) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "GroupContainer", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "GroupContainer", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref GroupContainer customDemoObject);



				public static GroupContainer CreateDefault()
				{
					var result = new GroupContainer();
					result.GroupIndex = GroupIndex.CreateDefault();
					result.GroupProfile = Group.CreateDefault();
					result.Collaborators = CollaboratorCollection.CreateDefault();
					result.PendingCollaborators = CollaboratorCollection.CreateDefault();
					result.LocationCollection = AddressAndLocationCollection.CreateDefault();
					return result;
				}
				/*
				public static GroupContainer CreateDemoDefault()
				{
					GroupContainer customDemo = null;
					GroupContainer.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new GroupContainer();
					result.GroupIndex = GroupIndex.CreateDemoDefault();
					result.GroupProfile = Group.CreateDemoDefault();
					result.Collaborators = CollaboratorCollection.CreateDemoDefault();
					result.PendingCollaborators = CollaboratorCollection.CreateDemoDefault();
					result.LocationCollection = AddressAndLocationCollection.CreateDemoDefault();
				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
					if(GroupIndex != null) {
						((IInformationObject) GroupIndex).UpdateCollections(masterInstance);
					}

					if(GroupProfile != null) {
						((IInformationObject) GroupProfile).UpdateCollections(masterInstance);
					}

					if(Collaborators != null) {
						((IInformationObject) Collaborators).UpdateCollections(masterInstance);
					}

					if(PendingCollaborators != null) {
						((IInformationObject) PendingCollaborators).UpdateCollections(masterInstance);
					}

					if(masterInstance is AddressAndLocationCollection) {
						AaltoGlobalImpact.OIP.CollectionUpdateImplementation.Update_GroupContainer_LocationCollection(this, localCollection:LocationCollection, masterCollection:(AddressAndLocationCollection) masterInstance);
					} else if(LocationCollection != null) {
						((IInformationObject) LocationCollection).UpdateCollections(masterInstance);
					}
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					{ // Scoping block for variable name reusability
						IInformationObject item = GroupIndex;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					{ // Scoping block for variable name reusability
						IInformationObject item = GroupProfile;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					{ // Scoping block for variable name reusability
						IInformationObject item = Collaborators;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					{ // Scoping block for variable name reusability
						IInformationObject item = PendingCollaborators;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					{ // Scoping block for variable name reusability
						IInformationObject item = LocationCollection;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					{
						var item = GroupIndex;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = GroupProfile;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = Collaborators;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = PendingCollaborators;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = LocationCollection;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					{
						var item = (IInformationObject) GroupIndex;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) GroupProfile;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) Collaborators;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) PendingCollaborators;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) LocationCollection;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(GroupIndex != _unmodified_GroupIndex)
							return true;
						if(GroupProfile != _unmodified_GroupProfile)
							return true;
						if(Collaborators != _unmodified_Collaborators)
							return true;
						if(PendingCollaborators != _unmodified_PendingCollaborators)
							return true;
						if(LocationCollection != _unmodified_LocationCollection)
							return true;
						{
							IInformationObject item = (IInformationObject) GroupIndex;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
						{
							IInformationObject item = (IInformationObject) GroupProfile;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
						{
							IInformationObject item = (IInformationObject) Collaborators;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
						{
							IInformationObject item = (IInformationObject) PendingCollaborators;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
						{
							IInformationObject item = (IInformationObject) LocationCollection;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					if(GroupIndex != null) {
						if(GroupIndex.ID == replacingObject.ID)
							GroupIndex = (GroupIndex) replacingObject;
						else {
							IInformationObject iObject = GroupIndex;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(GroupProfile != null) {
						if(GroupProfile.ID == replacingObject.ID)
							GroupProfile = (Group) replacingObject;
						else {
							IInformationObject iObject = GroupProfile;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(Collaborators != null) {
						if(Collaborators.ID == replacingObject.ID)
							Collaborators = (CollaboratorCollection) replacingObject;
						else {
							IInformationObject iObject = Collaborators;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(PendingCollaborators != null) {
						if(PendingCollaborators.ID == replacingObject.ID)
							PendingCollaborators = (CollaboratorCollection) replacingObject;
						else {
							IInformationObject iObject = PendingCollaborators;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(LocationCollection != null) {
						if(LocationCollection.ID == replacingObject.ID)
							LocationCollection = (AddressAndLocationCollection) replacingObject;
						else {
							IInformationObject iObject = LocationCollection;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}


				private void CopyContentFrom(GroupContainer sourceObject)
				{
					GroupIndex = sourceObject.GroupIndex;
					GroupProfile = sourceObject.GroupProfile;
					Collaborators = sourceObject.Collaborators;
					PendingCollaborators = sourceObject.PendingCollaborators;
					LocationCollection = sourceObject.LocationCollection;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
				
					_unmodified_GroupIndex = GroupIndex;
					if(GroupIndex != null)
						((IInformationObject) GroupIndex).SetInstanceTreeValuesAsUnmodified();

					_unmodified_GroupProfile = GroupProfile;
					if(GroupProfile != null)
						((IInformationObject) GroupProfile).SetInstanceTreeValuesAsUnmodified();

					_unmodified_Collaborators = Collaborators;
					if(Collaborators != null)
						((IInformationObject) Collaborators).SetInstanceTreeValuesAsUnmodified();

					_unmodified_PendingCollaborators = PendingCollaborators;
					if(PendingCollaborators != null)
						((IInformationObject) PendingCollaborators).SetInstanceTreeValuesAsUnmodified();

					_unmodified_LocationCollection = LocationCollection;
					if(LocationCollection != null)
						((IInformationObject) LocationCollection).SetInstanceTreeValuesAsUnmodified();

				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public GroupIndex GroupIndex { get; set; }
			private GroupIndex _unmodified_GroupIndex;
			[DataMember] 
			public Group GroupProfile { get; set; }
			private Group _unmodified_GroupProfile;
			[DataMember] 
			public CollaboratorCollection Collaborators { get; set; }
			private CollaboratorCollection _unmodified_Collaborators;
			[DataMember] 
			public CollaboratorCollection PendingCollaborators { get; set; }
			private CollaboratorCollection _unmodified_PendingCollaborators;
			[DataMember] 
			public AddressAndLocationCollection LocationCollection { get; set; }
			private AddressAndLocationCollection _unmodified_LocationCollection;
			
			}
			[DataContract] 
			[Serializable]
			public partial class GroupIndex : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public GroupIndex()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "GroupIndex";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/GroupIndex/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(GroupIndex), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<GroupIndex>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: GroupIndex");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(GroupIndex), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/GroupIndex/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/GroupIndex/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((GroupIndex) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(GroupIndex));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static GroupIndex DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(GroupIndex));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (GroupIndex) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "GroupIndex", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "GroupIndex", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref GroupIndex customDemoObject);



				public static GroupIndex CreateDefault()
				{
					var result = new GroupIndex();
					result.Icon = Image.CreateDefault();
					return result;
				}
				/*
				public static GroupIndex CreateDemoDefault()
				{
					GroupIndex customDemo = null;
					GroupIndex.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new GroupIndex();
					result.Icon = Image.CreateDemoDefault();
					result.Title = @"GroupIndex.Title";

					result.Introduction = @"GroupIndex.Introduction
GroupIndex.Introduction
GroupIndex.Introduction
GroupIndex.Introduction
GroupIndex.Introduction
";

					result.Summary = @"GroupIndex.Summary
GroupIndex.Summary
GroupIndex.Summary
GroupIndex.Summary
GroupIndex.Summary
";

				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					if(searchWithinCurrentMasterOnly == false)
					{
						{
							IInformationObject item = Icon;
							if(item != null)
							{
								item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
							}
						}
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					{
						var item = Icon;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					{
						var item = (IInformationObject) Icon;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(Icon != _unmodified_Icon)
							return true;
						if(Title != _unmodified_Title)
							return true;
						if(Introduction != _unmodified_Introduction)
							return true;
						if(Summary != _unmodified_Summary)
							return true;
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					if(Icon != null) {
						if(Icon.ID == replacingObject.ID)
							Icon = (Image) replacingObject;
						else {
							IInformationObject iObject = Icon;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}


				private void CopyContentFrom(GroupIndex sourceObject)
				{
					Icon = sourceObject.Icon;
					Title = sourceObject.Title;
					Introduction = sourceObject.Introduction;
					Summary = sourceObject.Summary;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_Title = Title;
					_unmodified_Introduction = Introduction;
					_unmodified_Summary = Summary;
				
					_unmodified_Icon = Icon;
					if(Icon != null)
						((IInformationObject) Icon).SetInstanceTreeValuesAsUnmodified();

				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "Title":
							Title = value;
							break;
						case "Introduction":
							Introduction = value;
							break;
						case "Summary":
							Summary = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public Image Icon { get; set; }
			private Image _unmodified_Icon;
			[DataMember] 
			public string Title { get; set; }
			private string _unmodified_Title;
			[DataMember] 
			public string Introduction { get; set; }
			private string _unmodified_Introduction;
			[DataMember] 
			public string Summary { get; set; }
			private string _unmodified_Summary;
			
			}
			[DataContract] 
			[Serializable]
			public partial class AddAddressAndLocationInfo : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public AddAddressAndLocationInfo()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "AddAddressAndLocationInfo";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/AddAddressAndLocationInfo/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(AddAddressAndLocationInfo), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<AddAddressAndLocationInfo>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: AddAddressAndLocationInfo");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(AddAddressAndLocationInfo), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/AddAddressAndLocationInfo/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/AddAddressAndLocationInfo/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((AddAddressAndLocationInfo) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(AddAddressAndLocationInfo));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static AddAddressAndLocationInfo DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(AddAddressAndLocationInfo));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (AddAddressAndLocationInfo) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "AddAddressAndLocationInfo", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "AddAddressAndLocationInfo", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref AddAddressAndLocationInfo customDemoObject);



				public static AddAddressAndLocationInfo CreateDefault()
				{
					var result = new AddAddressAndLocationInfo();
					return result;
				}
				/*
				public static AddAddressAndLocationInfo CreateDemoDefault()
				{
					AddAddressAndLocationInfo customDemo = null;
					AddAddressAndLocationInfo.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new AddAddressAndLocationInfo();
					result.LocationName = @"AddAddressAndLocationInfo.LocationName";

				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(LocationName != _unmodified_LocationName)
							return true;
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
				}


				private void CopyContentFrom(AddAddressAndLocationInfo sourceObject)
				{
					LocationName = sourceObject.LocationName;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_LocationName = LocationName;
				
				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "LocationName":
							LocationName = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string LocationName { get; set; }
			private string _unmodified_LocationName;
			
			}
			[DataContract] 
			[Serializable]
			public partial class AddImageInfo : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public AddImageInfo()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "AddImageInfo";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/AddImageInfo/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(AddImageInfo), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<AddImageInfo>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: AddImageInfo");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(AddImageInfo), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/AddImageInfo/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/AddImageInfo/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((AddImageInfo) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(AddImageInfo));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static AddImageInfo DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(AddImageInfo));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (AddImageInfo) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "AddImageInfo", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "AddImageInfo", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref AddImageInfo customDemoObject);



				public static AddImageInfo CreateDefault()
				{
					var result = new AddImageInfo();
					return result;
				}
				/*
				public static AddImageInfo CreateDemoDefault()
				{
					AddImageInfo customDemo = null;
					AddImageInfo.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new AddImageInfo();
					result.ImageTitle = @"AddImageInfo.ImageTitle";

				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(ImageTitle != _unmodified_ImageTitle)
							return true;
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
				}


				private void CopyContentFrom(AddImageInfo sourceObject)
				{
					ImageTitle = sourceObject.ImageTitle;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_ImageTitle = ImageTitle;
				
				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "ImageTitle":
							ImageTitle = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string ImageTitle { get; set; }
			private string _unmodified_ImageTitle;
			
			}
			[DataContract] 
			[Serializable]
			public partial class AddImageGroupInfo : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public AddImageGroupInfo()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "AddImageGroupInfo";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/AddImageGroupInfo/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(AddImageGroupInfo), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<AddImageGroupInfo>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: AddImageGroupInfo");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(AddImageGroupInfo), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/AddImageGroupInfo/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/AddImageGroupInfo/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((AddImageGroupInfo) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(AddImageGroupInfo));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static AddImageGroupInfo DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(AddImageGroupInfo));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (AddImageGroupInfo) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "AddImageGroupInfo", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "AddImageGroupInfo", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref AddImageGroupInfo customDemoObject);



				public static AddImageGroupInfo CreateDefault()
				{
					var result = new AddImageGroupInfo();
					return result;
				}
				/*
				public static AddImageGroupInfo CreateDemoDefault()
				{
					AddImageGroupInfo customDemo = null;
					AddImageGroupInfo.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new AddImageGroupInfo();
					result.ImageGroupTitle = @"AddImageGroupInfo.ImageGroupTitle";

				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(ImageGroupTitle != _unmodified_ImageGroupTitle)
							return true;
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
				}


				private void CopyContentFrom(AddImageGroupInfo sourceObject)
				{
					ImageGroupTitle = sourceObject.ImageGroupTitle;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_ImageGroupTitle = ImageGroupTitle;
				
				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "ImageGroupTitle":
							ImageGroupTitle = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string ImageGroupTitle { get; set; }
			private string _unmodified_ImageGroupTitle;
			
			}
			[DataContract] 
			[Serializable]
			public partial class AddEmailAddressInfo : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public AddEmailAddressInfo()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "AddEmailAddressInfo";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/AddEmailAddressInfo/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(AddEmailAddressInfo), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<AddEmailAddressInfo>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: AddEmailAddressInfo");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(AddEmailAddressInfo), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/AddEmailAddressInfo/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/AddEmailAddressInfo/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((AddEmailAddressInfo) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(AddEmailAddressInfo));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static AddEmailAddressInfo DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(AddEmailAddressInfo));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (AddEmailAddressInfo) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "AddEmailAddressInfo", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "AddEmailAddressInfo", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref AddEmailAddressInfo customDemoObject);



				public static AddEmailAddressInfo CreateDefault()
				{
					var result = new AddEmailAddressInfo();
					return result;
				}
				/*
				public static AddEmailAddressInfo CreateDemoDefault()
				{
					AddEmailAddressInfo customDemo = null;
					AddEmailAddressInfo.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new AddEmailAddressInfo();
					result.EmailAddress = @"AddEmailAddressInfo.EmailAddress";

				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(EmailAddress != _unmodified_EmailAddress)
							return true;
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
				}


				private void CopyContentFrom(AddEmailAddressInfo sourceObject)
				{
					EmailAddress = sourceObject.EmailAddress;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_EmailAddress = EmailAddress;
				
				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "EmailAddress":
							EmailAddress = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string EmailAddress { get; set; }
			private string _unmodified_EmailAddress;
			
			}
			[DataContract] 
			[Serializable]
			public partial class CreateGroupInfo : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public CreateGroupInfo()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "CreateGroupInfo";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/CreateGroupInfo/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(CreateGroupInfo), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<CreateGroupInfo>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: CreateGroupInfo");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(CreateGroupInfo), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/CreateGroupInfo/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/CreateGroupInfo/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((CreateGroupInfo) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(CreateGroupInfo));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static CreateGroupInfo DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(CreateGroupInfo));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (CreateGroupInfo) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "CreateGroupInfo", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "CreateGroupInfo", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref CreateGroupInfo customDemoObject);



				public static CreateGroupInfo CreateDefault()
				{
					var result = new CreateGroupInfo();
					return result;
				}
				/*
				public static CreateGroupInfo CreateDemoDefault()
				{
					CreateGroupInfo customDemo = null;
					CreateGroupInfo.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new CreateGroupInfo();
					result.GroupName = @"CreateGroupInfo.GroupName";

				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(GroupName != _unmodified_GroupName)
							return true;
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
				}


				private void CopyContentFrom(CreateGroupInfo sourceObject)
				{
					GroupName = sourceObject.GroupName;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_GroupName = GroupName;
				
				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "GroupName":
							GroupName = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string GroupName { get; set; }
			private string _unmodified_GroupName;
			
			}
			[DataContract] 
			[Serializable]
			public partial class AddActivityInfo : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public AddActivityInfo()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "AddActivityInfo";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/AddActivityInfo/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(AddActivityInfo), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<AddActivityInfo>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: AddActivityInfo");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(AddActivityInfo), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/AddActivityInfo/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/AddActivityInfo/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((AddActivityInfo) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(AddActivityInfo));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static AddActivityInfo DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(AddActivityInfo));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (AddActivityInfo) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "AddActivityInfo", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "AddActivityInfo", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref AddActivityInfo customDemoObject);



				public static AddActivityInfo CreateDefault()
				{
					var result = new AddActivityInfo();
					return result;
				}
				/*
				public static AddActivityInfo CreateDemoDefault()
				{
					AddActivityInfo customDemo = null;
					AddActivityInfo.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new AddActivityInfo();
					result.ActivityName = @"AddActivityInfo.ActivityName";

				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(ActivityName != _unmodified_ActivityName)
							return true;
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
				}


				private void CopyContentFrom(AddActivityInfo sourceObject)
				{
					ActivityName = sourceObject.ActivityName;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_ActivityName = ActivityName;
				
				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "ActivityName":
							ActivityName = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string ActivityName { get; set; }
			private string _unmodified_ActivityName;
			
			}
			[DataContract] 
			[Serializable]
			public partial class AddBlogPostInfo : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public AddBlogPostInfo()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "AddBlogPostInfo";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/AddBlogPostInfo/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(AddBlogPostInfo), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<AddBlogPostInfo>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: AddBlogPostInfo");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(AddBlogPostInfo), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/AddBlogPostInfo/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/AddBlogPostInfo/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((AddBlogPostInfo) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(AddBlogPostInfo));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static AddBlogPostInfo DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(AddBlogPostInfo));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (AddBlogPostInfo) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "AddBlogPostInfo", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "AddBlogPostInfo", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref AddBlogPostInfo customDemoObject);



				public static AddBlogPostInfo CreateDefault()
				{
					var result = new AddBlogPostInfo();
					return result;
				}
				/*
				public static AddBlogPostInfo CreateDemoDefault()
				{
					AddBlogPostInfo customDemo = null;
					AddBlogPostInfo.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new AddBlogPostInfo();
					result.Title = @"AddBlogPostInfo.Title";

				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(Title != _unmodified_Title)
							return true;
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
				}


				private void CopyContentFrom(AddBlogPostInfo sourceObject)
				{
					Title = sourceObject.Title;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_Title = Title;
				
				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "Title":
							Title = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string Title { get; set; }
			private string _unmodified_Title;
			
			}
			[DataContract] 
			[Serializable]
			public partial class AddCategoryInfo : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public AddCategoryInfo()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "AddCategoryInfo";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/AddCategoryInfo/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(AddCategoryInfo), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<AddCategoryInfo>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: AddCategoryInfo");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(AddCategoryInfo), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/AddCategoryInfo/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/AddCategoryInfo/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((AddCategoryInfo) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(AddCategoryInfo));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static AddCategoryInfo DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(AddCategoryInfo));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (AddCategoryInfo) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "AddCategoryInfo", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "AddCategoryInfo", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref AddCategoryInfo customDemoObject);



				public static AddCategoryInfo CreateDefault()
				{
					var result = new AddCategoryInfo();
					return result;
				}
				/*
				public static AddCategoryInfo CreateDemoDefault()
				{
					AddCategoryInfo customDemo = null;
					AddCategoryInfo.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new AddCategoryInfo();
					result.CategoryName = @"AddCategoryInfo.CategoryName";

				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(CategoryName != _unmodified_CategoryName)
							return true;
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
				}


				private void CopyContentFrom(AddCategoryInfo sourceObject)
				{
					CategoryName = sourceObject.CategoryName;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_CategoryName = CategoryName;
				
				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "CategoryName":
							CategoryName = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string CategoryName { get; set; }
			private string _unmodified_CategoryName;
			
			}
			[DataContract] 
			[Serializable]
			public partial class GroupCollection : IInformationObject , IInformationCollection
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public GroupCollection()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "GroupCollection";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/GroupCollection/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(GroupCollection), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<GroupCollection>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: GroupCollection");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(GroupCollection), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/GroupCollection/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/GroupCollection/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((GroupCollection) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(GroupCollection));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static GroupCollection DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(GroupCollection));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (GroupCollection) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "GroupCollection", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "GroupCollection", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref GroupCollection customDemoObject);


				
				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.UpdateCollections(masterInstance);
					}
				}



				bool IInformationCollection.IsMasterCollection {
					get {
						return false;
					}
				}

				string IInformationCollection.GetMasterLocation()
				{
					throw new NotSupportedException("Master collection location only supported for master collections");
					
				}

				async Task<IInformationCollection> IInformationCollection.GetMasterInstanceAsync()
				{
					throw new NotSupportedException("Master collection instance only supported for master collections");
					
				}


				public string GetItemDirectory()
				{
					string dummyItemLocation = ObjectStorage.GetRelativeLocationFromID<Group>("dummy");
					string nonOwnerDirectoryLocation = StorageSupport.GetParentDirectoryTarget(dummyItemLocation);
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					string ownerDirectoryLocation = StorageSupport.GetOwnerContentLocation(owner, nonOwnerDirectoryLocation);
					return ownerDirectoryLocation;
				}

				public async Task RefreshContentAsync()
				{
				}




                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }

				
		
				public static GroupCollection CreateDefault()
				{
					var result = new GroupCollection();
					return result;
				}

				/*
				public static GroupCollection CreateDemoDefault()
				{
					GroupCollection customDemo = null;
					GroupCollection.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new GroupCollection();
					result.CollectionContent.Add(Group.CreateDemoDefault());
					//result.CollectionContent.Add(Group.CreateDemoDefault());
					//result.CollectionContent.Add(Group.CreateDemoDefault());
					return result;
				}
				*/

		
				[DataMember] public List<Group> CollectionContent = new List<Group>();
				private Group[] _unmodified_CollectionContent;

				[DataMember] public bool IsCollectionFiltered;
				private bool _unmodified_IsCollectionFiltered;
				
				[DataMember] public List<string> OrderFilterIDList = new List<string>();
				private string[] _unmodified_OrderFilterIDList;

				public string SelectedIDCommaSeparated
				{
					get
					{
						string[] sourceArray;
						if (OrderFilterIDList != null)
							sourceArray = OrderFilterIDList.ToArray();
						else
							sourceArray = CollectionContent.Select(item => item.ID).ToArray();
						return String.Join(",", sourceArray);
					}
					set 
					{
						if (value == null)
							return;
						string[] valueArray = value.Split(',');
						OrderFilterIDList = new List<string>();
						OrderFilterIDList.AddRange(valueArray);
						OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
					}
				}

				public Group[] GetIDSelectedArray()
				{
					if (IsCollectionFiltered == false || this.OrderFilterIDList == null)
						return CollectionContent.ToArray();
					return
						this.OrderFilterIDList.Select(id => CollectionContent.FirstOrDefault(item => item.ID == id)).Where(item => item != null).ToArray();
				}

				public void RefreshOrderAndFilterListFromContent()
                {
                    if (OrderFilterIDList == null)
                        return;
                    OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
                }

				public void ParsePropertyValue(string propertyName, string propertyValue)
				{
					switch(propertyName)
					{
						case "SelectedIDCommaSeparated":
							SelectedIDCommaSeparated = propertyValue;
							break;
						case "IsCollectionFiltered":
							IsCollectionFiltered = bool.Parse(propertyValue);
							break;
						default:
							throw new NotSupportedException("No ParsePropertyValue supported for property: " + propertyName);
					}
				}


				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					for(int i = 0; i < CollectionContent.Count; i++) // >
					{
						if(CollectionContent[i].ID == replacingObject.ID)
							CollectionContent[i] = (Group )replacingObject;
						else { // Cannot have circular reference, so can be in else branch
							IInformationObject iObject = CollectionContent[i];
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}

				
				bool IInformationObject.IsInstanceTreeModified {
					get {
						bool collectionModified = CollectionContent.SequenceEqual(_unmodified_CollectionContent) == false;
						if(collectionModified)
							return true;
						//if((OrderFilterIDList == null && _unmodified_OrderFilterIDList != null) || _unmodified_OrderFilterIDList
						if(IsCollectionFiltered != _unmodified_IsCollectionFiltered)
							return true;
						// For non-master content
						foreach(IInformationObject item in CollectionContent)
						{
							bool itemTreeModified = item.IsInstanceTreeModified;
							if(itemTreeModified)
								return true;
						}
							
						return false;
					}
				}
				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_CollectionContent = CollectionContent.ToArray();
					_unmodified_IsCollectionFiltered = IsCollectionFiltered;
					if(OrderFilterIDList == null)
						_unmodified_OrderFilterIDList = null;
					else
						_unmodified_OrderFilterIDList = OrderFilterIDList.ToArray();
					foreach(IInformationObject iObject in CollectionContent)
						iObject.SetInstanceTreeValuesAsUnmodified();
				}

				private void CopyContentFrom(GroupCollection sourceObject)
				{
					CollectionContent = sourceObject.CollectionContent;
					_unmodified_CollectionContent = sourceObject._unmodified_CollectionContent;
				}
				
				private object FindFromObjectTree(string objectId)
				{
					foreach(var item in CollectionContent)
					{
						object result = item.FindObjectByID(objectId);
						if(result != null)
							return result;
					}
					return null;
				}

				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					foreach(IInformationObject iObject in CollectionContent)
						iObject.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
				}


				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						bool doAdd = true;
						if(filterOnFalse != null)
							doAdd = filterOnFalse(iObject);
						if(doAdd) {
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
				}


			
			}
			[DataContract] 
			[Serializable]
			public partial class Group : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public Group()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "Group";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/Group/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(Group), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<Group>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: Group");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(Group), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/Group/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/Group/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((Group) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(Group));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static Group DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(Group));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (Group) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "Group", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "Group", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref Group customDemoObject);



				public static Group CreateDefault()
				{
					var result = new Group();
					result.ReferenceToInformation = ReferenceToInformation.CreateDefault();
					result.ProfileImage = Image.CreateDefault();
					result.IconImage = Image.CreateDefault();
					result.CustomUICollection = ShortTextCollection.CreateDefault();
					result.Moderators = ModeratorCollection.CreateDefault();
					result.CategoryCollection = CategoryCollection.CreateDefault();
					return result;
				}
				/*
				public static Group CreateDemoDefault()
				{
					Group customDemo = null;
					Group.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new Group();
					result.ReferenceToInformation = ReferenceToInformation.CreateDemoDefault();
					result.ProfileImage = Image.CreateDemoDefault();
					result.IconImage = Image.CreateDemoDefault();
					result.GroupName = @"Group.GroupName";

					result.Description = @"Group.Description
Group.Description
Group.Description
Group.Description
Group.Description
";

					result.OrganizationsAndGroupsLinkedToUs = @"Group.OrganizationsAndGroupsLinkedToUs
Group.OrganizationsAndGroupsLinkedToUs
Group.OrganizationsAndGroupsLinkedToUs
Group.OrganizationsAndGroupsLinkedToUs
Group.OrganizationsAndGroupsLinkedToUs
";

					result.WwwSiteToPublishTo = @"Group.WwwSiteToPublishTo";

					result.CustomUICollection = ShortTextCollection.CreateDemoDefault();
					result.Moderators = ModeratorCollection.CreateDemoDefault();
					result.CategoryCollection = CategoryCollection.CreateDemoDefault();
				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
					if(CustomUICollection != null) {
						((IInformationObject) CustomUICollection).UpdateCollections(masterInstance);
					}

					if(Moderators != null) {
						((IInformationObject) Moderators).UpdateCollections(masterInstance);
					}

					if(masterInstance is CategoryCollection) {
						AaltoGlobalImpact.OIP.CollectionUpdateImplementation.Update_Group_CategoryCollection(this, localCollection:CategoryCollection, masterCollection:(CategoryCollection) masterInstance);
					} else if(CategoryCollection != null) {
						((IInformationObject) CategoryCollection).UpdateCollections(masterInstance);
					}
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					{ // Scoping block for variable name reusability
						IInformationObject item = CustomUICollection;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					{ // Scoping block for variable name reusability
						IInformationObject item = Moderators;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					{ // Scoping block for variable name reusability
						IInformationObject item = CategoryCollection;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					if(searchWithinCurrentMasterOnly == false)
					{
						{
							IInformationObject item = ReferenceToInformation;
							if(item != null)
							{
								item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
							}
						}
						{
							IInformationObject item = ProfileImage;
							if(item != null)
							{
								item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
							}
						}
						{
							IInformationObject item = IconImage;
							if(item != null)
							{
								item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
							}
						}
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					{
						var item = ReferenceToInformation;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = ProfileImage;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = IconImage;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = CustomUICollection;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = Moderators;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = CategoryCollection;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					{
						var item = (IInformationObject) ReferenceToInformation;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) ProfileImage;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) IconImage;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) CustomUICollection;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) Moderators;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) CategoryCollection;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(ReferenceToInformation != _unmodified_ReferenceToInformation)
							return true;
						if(ProfileImage != _unmodified_ProfileImage)
							return true;
						if(IconImage != _unmodified_IconImage)
							return true;
						if(GroupName != _unmodified_GroupName)
							return true;
						if(Description != _unmodified_Description)
							return true;
						if(OrganizationsAndGroupsLinkedToUs != _unmodified_OrganizationsAndGroupsLinkedToUs)
							return true;
						if(WwwSiteToPublishTo != _unmodified_WwwSiteToPublishTo)
							return true;
						if(CustomUICollection != _unmodified_CustomUICollection)
							return true;
						if(Moderators != _unmodified_Moderators)
							return true;
						if(CategoryCollection != _unmodified_CategoryCollection)
							return true;
						{
							IInformationObject item = (IInformationObject) CustomUICollection;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
						{
							IInformationObject item = (IInformationObject) Moderators;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
						{
							IInformationObject item = (IInformationObject) CategoryCollection;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					if(ReferenceToInformation != null) {
						if(ReferenceToInformation.ID == replacingObject.ID)
							ReferenceToInformation = (ReferenceToInformation) replacingObject;
						else {
							IInformationObject iObject = ReferenceToInformation;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(ProfileImage != null) {
						if(ProfileImage.ID == replacingObject.ID)
							ProfileImage = (Image) replacingObject;
						else {
							IInformationObject iObject = ProfileImage;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(IconImage != null) {
						if(IconImage.ID == replacingObject.ID)
							IconImage = (Image) replacingObject;
						else {
							IInformationObject iObject = IconImage;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(CustomUICollection != null) {
						if(CustomUICollection.ID == replacingObject.ID)
							CustomUICollection = (ShortTextCollection) replacingObject;
						else {
							IInformationObject iObject = CustomUICollection;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(Moderators != null) {
						if(Moderators.ID == replacingObject.ID)
							Moderators = (ModeratorCollection) replacingObject;
						else {
							IInformationObject iObject = Moderators;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(CategoryCollection != null) {
						if(CategoryCollection.ID == replacingObject.ID)
							CategoryCollection = (CategoryCollection) replacingObject;
						else {
							IInformationObject iObject = CategoryCollection;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}


				private void CopyContentFrom(Group sourceObject)
				{
					ReferenceToInformation = sourceObject.ReferenceToInformation;
					ProfileImage = sourceObject.ProfileImage;
					IconImage = sourceObject.IconImage;
					GroupName = sourceObject.GroupName;
					Description = sourceObject.Description;
					OrganizationsAndGroupsLinkedToUs = sourceObject.OrganizationsAndGroupsLinkedToUs;
					WwwSiteToPublishTo = sourceObject.WwwSiteToPublishTo;
					CustomUICollection = sourceObject.CustomUICollection;
					Moderators = sourceObject.Moderators;
					CategoryCollection = sourceObject.CategoryCollection;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_GroupName = GroupName;
					_unmodified_Description = Description;
					_unmodified_OrganizationsAndGroupsLinkedToUs = OrganizationsAndGroupsLinkedToUs;
					_unmodified_WwwSiteToPublishTo = WwwSiteToPublishTo;
				
					_unmodified_ReferenceToInformation = ReferenceToInformation;
					if(ReferenceToInformation != null)
						((IInformationObject) ReferenceToInformation).SetInstanceTreeValuesAsUnmodified();

					_unmodified_ProfileImage = ProfileImage;
					if(ProfileImage != null)
						((IInformationObject) ProfileImage).SetInstanceTreeValuesAsUnmodified();

					_unmodified_IconImage = IconImage;
					if(IconImage != null)
						((IInformationObject) IconImage).SetInstanceTreeValuesAsUnmodified();

					_unmodified_CustomUICollection = CustomUICollection;
					if(CustomUICollection != null)
						((IInformationObject) CustomUICollection).SetInstanceTreeValuesAsUnmodified();

					_unmodified_Moderators = Moderators;
					if(Moderators != null)
						((IInformationObject) Moderators).SetInstanceTreeValuesAsUnmodified();

					_unmodified_CategoryCollection = CategoryCollection;
					if(CategoryCollection != null)
						((IInformationObject) CategoryCollection).SetInstanceTreeValuesAsUnmodified();

				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "GroupName":
							GroupName = value;
							break;
						case "Description":
							Description = value;
							break;
						case "OrganizationsAndGroupsLinkedToUs":
							OrganizationsAndGroupsLinkedToUs = value;
							break;
						case "WwwSiteToPublishTo":
							WwwSiteToPublishTo = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public ReferenceToInformation ReferenceToInformation { get; set; }
			private ReferenceToInformation _unmodified_ReferenceToInformation;
			[DataMember] 
			public Image ProfileImage { get; set; }
			private Image _unmodified_ProfileImage;
			[DataMember] 
			public Image IconImage { get; set; }
			private Image _unmodified_IconImage;
			[DataMember] 
			public string GroupName { get; set; }
			private string _unmodified_GroupName;
			[DataMember] 
			public string Description { get; set; }
			private string _unmodified_Description;
			[DataMember] 
			public string OrganizationsAndGroupsLinkedToUs { get; set; }
			private string _unmodified_OrganizationsAndGroupsLinkedToUs;
			[DataMember] 
			public string WwwSiteToPublishTo { get; set; }
			private string _unmodified_WwwSiteToPublishTo;
			[DataMember] 
			public ShortTextCollection CustomUICollection { get; set; }
			private ShortTextCollection _unmodified_CustomUICollection;
			[DataMember] 
			public ModeratorCollection Moderators { get; set; }
			private ModeratorCollection _unmodified_Moderators;
			[DataMember] 
			public CategoryCollection CategoryCollection { get; set; }
			private CategoryCollection _unmodified_CategoryCollection;
			
			}
			[DataContract] 
			[Serializable]
			public partial class Introduction : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public Introduction()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "Introduction";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/Introduction/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(Introduction), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<Introduction>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: Introduction");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(Introduction), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/Introduction/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/Introduction/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((Introduction) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(Introduction));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static Introduction DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(Introduction));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (Introduction) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "Introduction", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "Introduction", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref Introduction customDemoObject);



				public static Introduction CreateDefault()
				{
					var result = new Introduction();
					return result;
				}
				/*
				public static Introduction CreateDemoDefault()
				{
					Introduction customDemo = null;
					Introduction.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new Introduction();
					result.Title = @"Introduction.Title";

					result.Body = @"Introduction.Body
Introduction.Body
Introduction.Body
Introduction.Body
Introduction.Body
";

				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(Title != _unmodified_Title)
							return true;
						if(Body != _unmodified_Body)
							return true;
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
				}


				private void CopyContentFrom(Introduction sourceObject)
				{
					Title = sourceObject.Title;
					Body = sourceObject.Body;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_Title = Title;
					_unmodified_Body = Body;
				
				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "Title":
							Title = value;
							break;
						case "Body":
							Body = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string Title { get; set; }
			private string _unmodified_Title;
			[DataMember] 
			public string Body { get; set; }
			private string _unmodified_Body;
			
			}
			[DataContract] 
			[Serializable]
			public partial class ContentCategoryRankCollection : IInformationObject , IInformationCollection
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public ContentCategoryRankCollection()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "ContentCategoryRankCollection";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/ContentCategoryRankCollection/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(ContentCategoryRankCollection), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<ContentCategoryRankCollection>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: ContentCategoryRankCollection");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(ContentCategoryRankCollection), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/ContentCategoryRankCollection/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/ContentCategoryRankCollection/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((ContentCategoryRankCollection) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(ContentCategoryRankCollection));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static ContentCategoryRankCollection DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(ContentCategoryRankCollection));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (ContentCategoryRankCollection) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "ContentCategoryRankCollection", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "ContentCategoryRankCollection", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref ContentCategoryRankCollection customDemoObject);


				
				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.UpdateCollections(masterInstance);
					}
				}



				bool IInformationCollection.IsMasterCollection {
					get {
						return true;
					}
				}

				string IInformationCollection.GetMasterLocation()
				{
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					return GetMasterCollectionLocation(owner);
					
				}

				async Task<IInformationCollection> IInformationCollection.GetMasterInstanceAsync()
				{
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					return await GetMasterCollectionInstanceAsync(owner);
					
				}


				public string GetItemDirectory()
				{
					string dummyItemLocation = ObjectStorage.GetRelativeLocationFromID<ContentCategoryRank>("dummy");
					string nonOwnerDirectoryLocation = StorageSupport.GetParentDirectoryTarget(dummyItemLocation);
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					string ownerDirectoryLocation = StorageSupport.GetOwnerContentLocation(owner, nonOwnerDirectoryLocation);
					return ownerDirectoryLocation;
				}

				public async Task RefreshContentAsync()
				{
					// DirectoryToMaster
					string itemDirectory = GetItemDirectory();
					IInformationObject[] informationObjects = await StorageSupport.RetrieveInformationObjectsAsync(itemDirectory,
																								 typeof(ContentCategoryRank));
                    Array.ForEach(informationObjects, io => io.MasterETag = io.ETag);
					CollectionContent.Clear();
					CollectionContent.AddRange(informationObjects.Select(obj => (ContentCategoryRank) obj));
            
				}

				public static async Task<ContentCategoryRankCollection> GetMasterCollectionInstanceAsync(IContainerOwner owner)
				{
					return await ObjectStorage.RetrieveFromOwnerContentA<ContentCategoryRankCollection>(owner, "MasterCollection");
				}
				public static string GetMasterCollectionLocation(IContainerOwner owner)
				{
					return StorageSupport.GetOwnerContentLocation(owner, "AaltoGlobalImpact.OIP/ContentCategoryRankCollection/" + "MasterCollection");
				}



                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }

				
		
				public static ContentCategoryRankCollection CreateDefault()
				{
					var result = new ContentCategoryRankCollection();
					return result;
				}

				/*
				public static ContentCategoryRankCollection CreateDemoDefault()
				{
					ContentCategoryRankCollection customDemo = null;
					ContentCategoryRankCollection.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new ContentCategoryRankCollection();
					result.CollectionContent.Add(ContentCategoryRank.CreateDemoDefault());
					//result.CollectionContent.Add(ContentCategoryRank.CreateDemoDefault());
					//result.CollectionContent.Add(ContentCategoryRank.CreateDemoDefault());
					return result;
				}
				*/

		
				[DataMember] public List<ContentCategoryRank> CollectionContent = new List<ContentCategoryRank>();
				private ContentCategoryRank[] _unmodified_CollectionContent;

				[DataMember] public bool IsCollectionFiltered;
				private bool _unmodified_IsCollectionFiltered;
				
				[DataMember] public List<string> OrderFilterIDList = new List<string>();
				private string[] _unmodified_OrderFilterIDList;

				public string SelectedIDCommaSeparated
				{
					get
					{
						string[] sourceArray;
						if (OrderFilterIDList != null)
							sourceArray = OrderFilterIDList.ToArray();
						else
							sourceArray = CollectionContent.Select(item => item.ID).ToArray();
						return String.Join(",", sourceArray);
					}
					set 
					{
						if (value == null)
							return;
						string[] valueArray = value.Split(',');
						OrderFilterIDList = new List<string>();
						OrderFilterIDList.AddRange(valueArray);
						OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
					}
				}

				public ContentCategoryRank[] GetIDSelectedArray()
				{
					if (IsCollectionFiltered == false || this.OrderFilterIDList == null)
						return CollectionContent.ToArray();
					return
						this.OrderFilterIDList.Select(id => CollectionContent.FirstOrDefault(item => item.ID == id)).Where(item => item != null).ToArray();
				}

				public void RefreshOrderAndFilterListFromContent()
                {
                    if (OrderFilterIDList == null)
                        return;
                    OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
                }

				public void ParsePropertyValue(string propertyName, string propertyValue)
				{
					switch(propertyName)
					{
						case "SelectedIDCommaSeparated":
							SelectedIDCommaSeparated = propertyValue;
							break;
						case "IsCollectionFiltered":
							IsCollectionFiltered = bool.Parse(propertyValue);
							break;
						default:
							throw new NotSupportedException("No ParsePropertyValue supported for property: " + propertyName);
					}
				}


				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					for(int i = 0; i < CollectionContent.Count; i++) // >
					{
						if(CollectionContent[i].ID == replacingObject.ID)
							CollectionContent[i] = (ContentCategoryRank )replacingObject;
						else { // Cannot have circular reference, so can be in else branch
							IInformationObject iObject = CollectionContent[i];
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}

				
				bool IInformationObject.IsInstanceTreeModified {
					get {
						bool collectionModified = CollectionContent.SequenceEqual(_unmodified_CollectionContent) == false;
						if(collectionModified)
							return true;
						//if((OrderFilterIDList == null && _unmodified_OrderFilterIDList != null) || _unmodified_OrderFilterIDList
						if(IsCollectionFiltered != _unmodified_IsCollectionFiltered)
							return true;
						// For non-master content
						foreach(IInformationObject item in CollectionContent)
						{
							bool itemTreeModified = item.IsInstanceTreeModified;
							if(itemTreeModified)
								return true;
						}
							
						return false;
					}
				}
				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_CollectionContent = CollectionContent.ToArray();
					_unmodified_IsCollectionFiltered = IsCollectionFiltered;
					if(OrderFilterIDList == null)
						_unmodified_OrderFilterIDList = null;
					else
						_unmodified_OrderFilterIDList = OrderFilterIDList.ToArray();
					foreach(IInformationObject iObject in CollectionContent)
						iObject.SetInstanceTreeValuesAsUnmodified();
				}

				private void CopyContentFrom(ContentCategoryRankCollection sourceObject)
				{
					CollectionContent = sourceObject.CollectionContent;
					_unmodified_CollectionContent = sourceObject._unmodified_CollectionContent;
				}
				
				private object FindFromObjectTree(string objectId)
				{
					foreach(var item in CollectionContent)
					{
						object result = item.FindObjectByID(objectId);
						if(result != null)
							return result;
					}
					return null;
				}

				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					foreach(IInformationObject iObject in CollectionContent)
						iObject.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
				}


				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						bool doAdd = true;
						if(filterOnFalse != null)
							doAdd = filterOnFalse(iObject);
						if(doAdd) {
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
				}


			
			}
			[DataContract] 
			[Serializable]
			public partial class ContentCategoryRank : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public ContentCategoryRank()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "ContentCategoryRank";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/ContentCategoryRank/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(ContentCategoryRank), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<ContentCategoryRank>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: ContentCategoryRank");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(ContentCategoryRank), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/ContentCategoryRank/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/ContentCategoryRank/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((ContentCategoryRank) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(ContentCategoryRank));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static ContentCategoryRank DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(ContentCategoryRank));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (ContentCategoryRank) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "ContentCategoryRank", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "ContentCategoryRank", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref ContentCategoryRank customDemoObject);



				public static ContentCategoryRank CreateDefault()
				{
					var result = new ContentCategoryRank();
					return result;
				}
				/*
				public static ContentCategoryRank CreateDemoDefault()
				{
					ContentCategoryRank customDemo = null;
					ContentCategoryRank.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new ContentCategoryRank();
					result.ContentID = @"ContentCategoryRank.ContentID";

					result.ContentSemanticType = @"ContentCategoryRank.ContentSemanticType";

					result.CategoryID = @"ContentCategoryRank.CategoryID";

					result.RankName = @"ContentCategoryRank.RankName";

					result.RankValue = @"ContentCategoryRank.RankValue";

				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(ContentID != _unmodified_ContentID)
							return true;
						if(ContentSemanticType != _unmodified_ContentSemanticType)
							return true;
						if(CategoryID != _unmodified_CategoryID)
							return true;
						if(RankName != _unmodified_RankName)
							return true;
						if(RankValue != _unmodified_RankValue)
							return true;
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
				}


				private void CopyContentFrom(ContentCategoryRank sourceObject)
				{
					ContentID = sourceObject.ContentID;
					ContentSemanticType = sourceObject.ContentSemanticType;
					CategoryID = sourceObject.CategoryID;
					RankName = sourceObject.RankName;
					RankValue = sourceObject.RankValue;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_ContentID = ContentID;
					_unmodified_ContentSemanticType = ContentSemanticType;
					_unmodified_CategoryID = CategoryID;
					_unmodified_RankName = RankName;
					_unmodified_RankValue = RankValue;
				
				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "ContentID":
							ContentID = value;
							break;
						case "ContentSemanticType":
							ContentSemanticType = value;
							break;
						case "CategoryID":
							CategoryID = value;
							break;
						case "RankName":
							RankName = value;
							break;
						case "RankValue":
							RankValue = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string ContentID { get; set; }
			private string _unmodified_ContentID;
			[DataMember] 
			public string ContentSemanticType { get; set; }
			private string _unmodified_ContentSemanticType;
			[DataMember] 
			public string CategoryID { get; set; }
			private string _unmodified_CategoryID;
			[DataMember] 
			public string RankName { get; set; }
			private string _unmodified_RankName;
			[DataMember] 
			public string RankValue { get; set; }
			private string _unmodified_RankValue;
			
			}
			[DataContract] 
			[Serializable]
			public partial class LinkToContentCollection : IInformationObject , IInformationCollection
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public LinkToContentCollection()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "LinkToContentCollection";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/LinkToContentCollection/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(LinkToContentCollection), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<LinkToContentCollection>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: LinkToContentCollection");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(LinkToContentCollection), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/LinkToContentCollection/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/LinkToContentCollection/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((LinkToContentCollection) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(LinkToContentCollection));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static LinkToContentCollection DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(LinkToContentCollection));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (LinkToContentCollection) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "LinkToContentCollection", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "LinkToContentCollection", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref LinkToContentCollection customDemoObject);


				
				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
				}



				bool IInformationCollection.IsMasterCollection {
					get {
						return true;
					}
				}

				string IInformationCollection.GetMasterLocation()
				{
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					return GetMasterCollectionLocation(owner);
					
				}

				async Task<IInformationCollection> IInformationCollection.GetMasterInstanceAsync()
				{
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					return await GetMasterCollectionInstanceAsync(owner);
					
				}


				public string GetItemDirectory()
				{
					string dummyItemLocation = ObjectStorage.GetRelativeLocationFromID<LinkToContent>("dummy");
					string nonOwnerDirectoryLocation = StorageSupport.GetParentDirectoryTarget(dummyItemLocation);
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					string ownerDirectoryLocation = StorageSupport.GetOwnerContentLocation(owner, nonOwnerDirectoryLocation);
					return ownerDirectoryLocation;
				}

				public async Task RefreshContentAsync()
				{
					// DirectoryToMaster
					string itemDirectory = GetItemDirectory();
					IInformationObject[] informationObjects = await StorageSupport.RetrieveInformationObjectsAsync(itemDirectory,
																								 typeof(LinkToContent));
                    Array.ForEach(informationObjects, io => io.MasterETag = io.ETag);
					CollectionContent.Clear();
					CollectionContent.AddRange(informationObjects.Select(obj => (LinkToContent) obj));
            
				}

				public static async Task<LinkToContentCollection> GetMasterCollectionInstanceAsync(IContainerOwner owner)
				{
					return await ObjectStorage.RetrieveFromOwnerContentA<LinkToContentCollection>(owner, "MasterCollection");
				}
				public static string GetMasterCollectionLocation(IContainerOwner owner)
				{
					return StorageSupport.GetOwnerContentLocation(owner, "AaltoGlobalImpact.OIP/LinkToContentCollection/" + "MasterCollection");
				}



                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }

				
		
				public static LinkToContentCollection CreateDefault()
				{
					var result = new LinkToContentCollection();
					return result;
				}

				/*
				public static LinkToContentCollection CreateDemoDefault()
				{
					LinkToContentCollection customDemo = null;
					LinkToContentCollection.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new LinkToContentCollection();
					result.CollectionContent.Add(LinkToContent.CreateDemoDefault());
					//result.CollectionContent.Add(LinkToContent.CreateDemoDefault());
					//result.CollectionContent.Add(LinkToContent.CreateDemoDefault());
					return result;
				}
				*/

		
				[DataMember] public List<LinkToContent> CollectionContent = new List<LinkToContent>();
				private LinkToContent[] _unmodified_CollectionContent;

				[DataMember] public bool IsCollectionFiltered;
				private bool _unmodified_IsCollectionFiltered;
				
				[DataMember] public List<string> OrderFilterIDList = new List<string>();
				private string[] _unmodified_OrderFilterIDList;

				public string SelectedIDCommaSeparated
				{
					get
					{
						string[] sourceArray;
						if (OrderFilterIDList != null)
							sourceArray = OrderFilterIDList.ToArray();
						else
							sourceArray = CollectionContent.Select(item => item.ID).ToArray();
						return String.Join(",", sourceArray);
					}
					set 
					{
						if (value == null)
							return;
						string[] valueArray = value.Split(',');
						OrderFilterIDList = new List<string>();
						OrderFilterIDList.AddRange(valueArray);
						OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
					}
				}

				public LinkToContent[] GetIDSelectedArray()
				{
					if (IsCollectionFiltered == false || this.OrderFilterIDList == null)
						return CollectionContent.ToArray();
					return
						this.OrderFilterIDList.Select(id => CollectionContent.FirstOrDefault(item => item.ID == id)).Where(item => item != null).ToArray();
				}

				public void RefreshOrderAndFilterListFromContent()
                {
                    if (OrderFilterIDList == null)
                        return;
                    OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
                }

				public void ParsePropertyValue(string propertyName, string propertyValue)
				{
					switch(propertyName)
					{
						case "SelectedIDCommaSeparated":
							SelectedIDCommaSeparated = propertyValue;
							break;
						case "IsCollectionFiltered":
							IsCollectionFiltered = bool.Parse(propertyValue);
							break;
						default:
							throw new NotSupportedException("No ParsePropertyValue supported for property: " + propertyName);
					}
				}


				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					for(int i = 0; i < CollectionContent.Count; i++) // >
					{
						if(CollectionContent[i].ID == replacingObject.ID)
							CollectionContent[i] = (LinkToContent )replacingObject;
						else { // Cannot have circular reference, so can be in else branch
							IInformationObject iObject = CollectionContent[i];
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}

				
				bool IInformationObject.IsInstanceTreeModified {
					get {
						bool collectionModified = CollectionContent.SequenceEqual(_unmodified_CollectionContent) == false;
						if(collectionModified)
							return true;
						//if((OrderFilterIDList == null && _unmodified_OrderFilterIDList != null) || _unmodified_OrderFilterIDList
						if(IsCollectionFiltered != _unmodified_IsCollectionFiltered)
							return true;
						return false;
					}
				}
				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_CollectionContent = CollectionContent.ToArray();
					_unmodified_IsCollectionFiltered = IsCollectionFiltered;
					if(OrderFilterIDList == null)
						_unmodified_OrderFilterIDList = null;
					else
						_unmodified_OrderFilterIDList = OrderFilterIDList.ToArray();
					foreach(IInformationObject iObject in CollectionContent)
						iObject.SetInstanceTreeValuesAsUnmodified();
				}

				private void CopyContentFrom(LinkToContentCollection sourceObject)
				{
					CollectionContent = sourceObject.CollectionContent;
					_unmodified_CollectionContent = sourceObject._unmodified_CollectionContent;
				}
				
				private object FindFromObjectTree(string objectId)
				{
					foreach(var item in CollectionContent)
					{
						object result = item.FindObjectByID(objectId);
						if(result != null)
							return result;
					}
					return null;
				}

				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					if(searchWithinCurrentMasterOnly == false) {
						foreach(IInformationObject iObject in CollectionContent)
							iObject.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
					}
				}


				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						bool doAdd = true;
						if(filterOnFalse != null)
							doAdd = filterOnFalse(iObject);
						if(doAdd) {
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
				}


			
			}
			[DataContract] 
			[Serializable]
			public partial class LinkToContent : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public LinkToContent()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "LinkToContent";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/LinkToContent/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(LinkToContent), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<LinkToContent>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: LinkToContent");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(LinkToContent), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/LinkToContent/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/LinkToContent/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return true;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((LinkToContent) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(LinkToContent));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static LinkToContent DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(LinkToContent));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (LinkToContent) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "LinkToContent", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "LinkToContent", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref LinkToContent customDemoObject);



				public static LinkToContent CreateDefault()
				{
					var result = new LinkToContent();
					result.ImageData = MediaContent.CreateDefault();
					result.Locations = AddressAndLocationCollection.CreateDefault();
					result.Categories = CategoryCollection.CreateDefault();
					return result;
				}
				/*
				public static LinkToContent CreateDemoDefault()
				{
					LinkToContent customDemo = null;
					LinkToContent.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new LinkToContent();
					result.URL = @"LinkToContent.URL";

					result.Title = @"LinkToContent.Title";

					result.Description = @"LinkToContent.Description
LinkToContent.Description
LinkToContent.Description
LinkToContent.Description
LinkToContent.Description
";

					result.Author = @"LinkToContent.Author";

					result.ImageData = MediaContent.CreateDemoDefault();
					result.Locations = AddressAndLocationCollection.CreateDemoDefault();
					result.Categories = CategoryCollection.CreateDemoDefault();
				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
					if(ImageData != null) {
						((IInformationObject) ImageData).UpdateCollections(masterInstance);
					}

					if(masterInstance is AddressAndLocationCollection) {
						AaltoGlobalImpact.OIP.CollectionUpdateImplementation.Update_LinkToContent_Locations(this, localCollection:Locations, masterCollection:(AddressAndLocationCollection) masterInstance);
					} else if(Locations != null) {
						((IInformationObject) Locations).UpdateCollections(masterInstance);
					}
					if(masterInstance is CategoryCollection) {
						AaltoGlobalImpact.OIP.CollectionUpdateImplementation.Update_LinkToContent_Categories(this, localCollection:Categories, masterCollection:(CategoryCollection) masterInstance);
					} else if(Categories != null) {
						((IInformationObject) Categories).UpdateCollections(masterInstance);
					}
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					{ // Scoping block for variable name reusability
						IInformationObject item = ImageData;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					{ // Scoping block for variable name reusability
						IInformationObject item = Locations;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					{ // Scoping block for variable name reusability
						IInformationObject item = Categories;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					{
						var item = ImageData;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = Locations;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = Categories;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					{
						var item = (IInformationObject) ImageData;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) Locations;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) Categories;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(URL != _unmodified_URL)
							return true;
						if(Title != _unmodified_Title)
							return true;
						if(Description != _unmodified_Description)
							return true;
						if(Published != _unmodified_Published)
							return true;
						if(Author != _unmodified_Author)
							return true;
						if(ImageData != _unmodified_ImageData)
							return true;
						if(Locations != _unmodified_Locations)
							return true;
						if(Categories != _unmodified_Categories)
							return true;
						{
							IInformationObject item = (IInformationObject) ImageData;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
						{
							IInformationObject item = (IInformationObject) Locations;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
						{
							IInformationObject item = (IInformationObject) Categories;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					if(ImageData != null) {
						if(ImageData.ID == replacingObject.ID)
							ImageData = (MediaContent) replacingObject;
						else {
							IInformationObject iObject = ImageData;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(Locations != null) {
						if(Locations.ID == replacingObject.ID)
							Locations = (AddressAndLocationCollection) replacingObject;
						else {
							IInformationObject iObject = Locations;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(Categories != null) {
						if(Categories.ID == replacingObject.ID)
							Categories = (CategoryCollection) replacingObject;
						else {
							IInformationObject iObject = Categories;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}


				private void CopyContentFrom(LinkToContent sourceObject)
				{
					URL = sourceObject.URL;
					Title = sourceObject.Title;
					Description = sourceObject.Description;
					Published = sourceObject.Published;
					Author = sourceObject.Author;
					ImageData = sourceObject.ImageData;
					Locations = sourceObject.Locations;
					Categories = sourceObject.Categories;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_URL = URL;
					_unmodified_Title = Title;
					_unmodified_Description = Description;
					_unmodified_Published = Published;
					_unmodified_Author = Author;
				
					_unmodified_ImageData = ImageData;
					if(ImageData != null)
						((IInformationObject) ImageData).SetInstanceTreeValuesAsUnmodified();

					_unmodified_Locations = Locations;
					if(Locations != null)
						((IInformationObject) Locations).SetInstanceTreeValuesAsUnmodified();

					_unmodified_Categories = Categories;
					if(Categories != null)
						((IInformationObject) Categories).SetInstanceTreeValuesAsUnmodified();

				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "URL":
							URL = value;
							break;
						case "Title":
							Title = value;
							break;
						case "Description":
							Description = value;
							break;
						case "Published":
							Published = DateTime.Parse(value);
							break;
						case "Author":
							Author = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string URL { get; set; }
			private string _unmodified_URL;
			[DataMember] 
			public string Title { get; set; }
			private string _unmodified_Title;
			[DataMember] 
			public string Description { get; set; }
			private string _unmodified_Description;
			[DataMember] 
			public DateTime Published { get; set; }
			private DateTime _unmodified_Published;
			[DataMember] 
			public string Author { get; set; }
			private string _unmodified_Author;
			[DataMember] 
			public MediaContent ImageData { get; set; }
			private MediaContent _unmodified_ImageData;
			[DataMember] 
			public AddressAndLocationCollection Locations { get; set; }
			private AddressAndLocationCollection _unmodified_Locations;
			[DataMember] 
			public CategoryCollection Categories { get; set; }
			private CategoryCollection _unmodified_Categories;
			
			}
			[DataContract] 
			[Serializable]
			public partial class EmbeddedContentCollection : IInformationObject , IInformationCollection
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public EmbeddedContentCollection()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "EmbeddedContentCollection";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/EmbeddedContentCollection/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(EmbeddedContentCollection), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<EmbeddedContentCollection>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: EmbeddedContentCollection");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(EmbeddedContentCollection), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/EmbeddedContentCollection/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/EmbeddedContentCollection/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((EmbeddedContentCollection) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(EmbeddedContentCollection));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static EmbeddedContentCollection DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(EmbeddedContentCollection));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (EmbeddedContentCollection) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "EmbeddedContentCollection", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "EmbeddedContentCollection", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref EmbeddedContentCollection customDemoObject);


				
				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
				}



				bool IInformationCollection.IsMasterCollection {
					get {
						return true;
					}
				}

				string IInformationCollection.GetMasterLocation()
				{
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					return GetMasterCollectionLocation(owner);
					
				}

				async Task<IInformationCollection> IInformationCollection.GetMasterInstanceAsync()
				{
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					return await GetMasterCollectionInstanceAsync(owner);
					
				}


				public string GetItemDirectory()
				{
					string dummyItemLocation = ObjectStorage.GetRelativeLocationFromID<EmbeddedContent>("dummy");
					string nonOwnerDirectoryLocation = StorageSupport.GetParentDirectoryTarget(dummyItemLocation);
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					string ownerDirectoryLocation = StorageSupport.GetOwnerContentLocation(owner, nonOwnerDirectoryLocation);
					return ownerDirectoryLocation;
				}

				public async Task RefreshContentAsync()
				{
					// DirectoryToMaster
					string itemDirectory = GetItemDirectory();
					IInformationObject[] informationObjects = await StorageSupport.RetrieveInformationObjectsAsync(itemDirectory,
																								 typeof(EmbeddedContent));
                    Array.ForEach(informationObjects, io => io.MasterETag = io.ETag);
					CollectionContent.Clear();
					CollectionContent.AddRange(informationObjects.Select(obj => (EmbeddedContent) obj));
            
				}

				public static async Task<EmbeddedContentCollection> GetMasterCollectionInstanceAsync(IContainerOwner owner)
				{
					return await ObjectStorage.RetrieveFromOwnerContentA<EmbeddedContentCollection>(owner, "MasterCollection");
				}
				public static string GetMasterCollectionLocation(IContainerOwner owner)
				{
					return StorageSupport.GetOwnerContentLocation(owner, "AaltoGlobalImpact.OIP/EmbeddedContentCollection/" + "MasterCollection");
				}



                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }

				
		
				public static EmbeddedContentCollection CreateDefault()
				{
					var result = new EmbeddedContentCollection();
					return result;
				}

				/*
				public static EmbeddedContentCollection CreateDemoDefault()
				{
					EmbeddedContentCollection customDemo = null;
					EmbeddedContentCollection.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new EmbeddedContentCollection();
					result.CollectionContent.Add(EmbeddedContent.CreateDemoDefault());
					//result.CollectionContent.Add(EmbeddedContent.CreateDemoDefault());
					//result.CollectionContent.Add(EmbeddedContent.CreateDemoDefault());
					return result;
				}
				*/

		
				[DataMember] public List<EmbeddedContent> CollectionContent = new List<EmbeddedContent>();
				private EmbeddedContent[] _unmodified_CollectionContent;

				[DataMember] public bool IsCollectionFiltered;
				private bool _unmodified_IsCollectionFiltered;
				
				[DataMember] public List<string> OrderFilterIDList = new List<string>();
				private string[] _unmodified_OrderFilterIDList;

				public string SelectedIDCommaSeparated
				{
					get
					{
						string[] sourceArray;
						if (OrderFilterIDList != null)
							sourceArray = OrderFilterIDList.ToArray();
						else
							sourceArray = CollectionContent.Select(item => item.ID).ToArray();
						return String.Join(",", sourceArray);
					}
					set 
					{
						if (value == null)
							return;
						string[] valueArray = value.Split(',');
						OrderFilterIDList = new List<string>();
						OrderFilterIDList.AddRange(valueArray);
						OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
					}
				}

				public EmbeddedContent[] GetIDSelectedArray()
				{
					if (IsCollectionFiltered == false || this.OrderFilterIDList == null)
						return CollectionContent.ToArray();
					return
						this.OrderFilterIDList.Select(id => CollectionContent.FirstOrDefault(item => item.ID == id)).Where(item => item != null).ToArray();
				}

				public void RefreshOrderAndFilterListFromContent()
                {
                    if (OrderFilterIDList == null)
                        return;
                    OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
                }

				public void ParsePropertyValue(string propertyName, string propertyValue)
				{
					switch(propertyName)
					{
						case "SelectedIDCommaSeparated":
							SelectedIDCommaSeparated = propertyValue;
							break;
						case "IsCollectionFiltered":
							IsCollectionFiltered = bool.Parse(propertyValue);
							break;
						default:
							throw new NotSupportedException("No ParsePropertyValue supported for property: " + propertyName);
					}
				}


				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					for(int i = 0; i < CollectionContent.Count; i++) // >
					{
						if(CollectionContent[i].ID == replacingObject.ID)
							CollectionContent[i] = (EmbeddedContent )replacingObject;
						else { // Cannot have circular reference, so can be in else branch
							IInformationObject iObject = CollectionContent[i];
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}

				
				bool IInformationObject.IsInstanceTreeModified {
					get {
						bool collectionModified = CollectionContent.SequenceEqual(_unmodified_CollectionContent) == false;
						if(collectionModified)
							return true;
						//if((OrderFilterIDList == null && _unmodified_OrderFilterIDList != null) || _unmodified_OrderFilterIDList
						if(IsCollectionFiltered != _unmodified_IsCollectionFiltered)
							return true;
						return false;
					}
				}
				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_CollectionContent = CollectionContent.ToArray();
					_unmodified_IsCollectionFiltered = IsCollectionFiltered;
					if(OrderFilterIDList == null)
						_unmodified_OrderFilterIDList = null;
					else
						_unmodified_OrderFilterIDList = OrderFilterIDList.ToArray();
					foreach(IInformationObject iObject in CollectionContent)
						iObject.SetInstanceTreeValuesAsUnmodified();
				}

				private void CopyContentFrom(EmbeddedContentCollection sourceObject)
				{
					CollectionContent = sourceObject.CollectionContent;
					_unmodified_CollectionContent = sourceObject._unmodified_CollectionContent;
				}
				
				private object FindFromObjectTree(string objectId)
				{
					foreach(var item in CollectionContent)
					{
						object result = item.FindObjectByID(objectId);
						if(result != null)
							return result;
					}
					return null;
				}

				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					if(searchWithinCurrentMasterOnly == false) {
						foreach(IInformationObject iObject in CollectionContent)
							iObject.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
					}
				}


				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						bool doAdd = true;
						if(filterOnFalse != null)
							doAdd = filterOnFalse(iObject);
						if(doAdd) {
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
				}


			
			}
			[DataContract] 
			[Serializable]
			public partial class EmbeddedContent : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public EmbeddedContent()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "EmbeddedContent";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/EmbeddedContent/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(EmbeddedContent), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<EmbeddedContent>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: EmbeddedContent");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(EmbeddedContent), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/EmbeddedContent/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/EmbeddedContent/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return true;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((EmbeddedContent) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(EmbeddedContent));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static EmbeddedContent DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(EmbeddedContent));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (EmbeddedContent) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "EmbeddedContent", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "EmbeddedContent", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref EmbeddedContent customDemoObject);



				public static EmbeddedContent CreateDefault()
				{
					var result = new EmbeddedContent();
					result.Locations = AddressAndLocationCollection.CreateDefault();
					result.Categories = CategoryCollection.CreateDefault();
					return result;
				}
				/*
				public static EmbeddedContent CreateDemoDefault()
				{
					EmbeddedContent customDemo = null;
					EmbeddedContent.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new EmbeddedContent();
					result.IFrameTagContents = @"EmbeddedContent.IFrameTagContents";

					result.Title = @"EmbeddedContent.Title";

					result.Author = @"EmbeddedContent.Author";

					result.Description = @"EmbeddedContent.Description
EmbeddedContent.Description
EmbeddedContent.Description
EmbeddedContent.Description
EmbeddedContent.Description
";

					result.Locations = AddressAndLocationCollection.CreateDemoDefault();
					result.Categories = CategoryCollection.CreateDemoDefault();
				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
					if(masterInstance is AddressAndLocationCollection) {
						AaltoGlobalImpact.OIP.CollectionUpdateImplementation.Update_EmbeddedContent_Locations(this, localCollection:Locations, masterCollection:(AddressAndLocationCollection) masterInstance);
					} else if(Locations != null) {
						((IInformationObject) Locations).UpdateCollections(masterInstance);
					}
					if(masterInstance is CategoryCollection) {
						AaltoGlobalImpact.OIP.CollectionUpdateImplementation.Update_EmbeddedContent_Categories(this, localCollection:Categories, masterCollection:(CategoryCollection) masterInstance);
					} else if(Categories != null) {
						((IInformationObject) Categories).UpdateCollections(masterInstance);
					}
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					{ // Scoping block for variable name reusability
						IInformationObject item = Locations;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					{ // Scoping block for variable name reusability
						IInformationObject item = Categories;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					{
						var item = Locations;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = Categories;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					{
						var item = (IInformationObject) Locations;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) Categories;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(IFrameTagContents != _unmodified_IFrameTagContents)
							return true;
						if(Title != _unmodified_Title)
							return true;
						if(Published != _unmodified_Published)
							return true;
						if(Author != _unmodified_Author)
							return true;
						if(Description != _unmodified_Description)
							return true;
						if(Locations != _unmodified_Locations)
							return true;
						if(Categories != _unmodified_Categories)
							return true;
						{
							IInformationObject item = (IInformationObject) Locations;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
						{
							IInformationObject item = (IInformationObject) Categories;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					if(Locations != null) {
						if(Locations.ID == replacingObject.ID)
							Locations = (AddressAndLocationCollection) replacingObject;
						else {
							IInformationObject iObject = Locations;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(Categories != null) {
						if(Categories.ID == replacingObject.ID)
							Categories = (CategoryCollection) replacingObject;
						else {
							IInformationObject iObject = Categories;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}


				private void CopyContentFrom(EmbeddedContent sourceObject)
				{
					IFrameTagContents = sourceObject.IFrameTagContents;
					Title = sourceObject.Title;
					Published = sourceObject.Published;
					Author = sourceObject.Author;
					Description = sourceObject.Description;
					Locations = sourceObject.Locations;
					Categories = sourceObject.Categories;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_IFrameTagContents = IFrameTagContents;
					_unmodified_Title = Title;
					_unmodified_Published = Published;
					_unmodified_Author = Author;
					_unmodified_Description = Description;
				
					_unmodified_Locations = Locations;
					if(Locations != null)
						((IInformationObject) Locations).SetInstanceTreeValuesAsUnmodified();

					_unmodified_Categories = Categories;
					if(Categories != null)
						((IInformationObject) Categories).SetInstanceTreeValuesAsUnmodified();

				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "IFrameTagContents":
							IFrameTagContents = value;
							break;
						case "Title":
							Title = value;
							break;
						case "Published":
							Published = DateTime.Parse(value);
							break;
						case "Author":
							Author = value;
							break;
						case "Description":
							Description = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string IFrameTagContents { get; set; }
			private string _unmodified_IFrameTagContents;
			[DataMember] 
			public string Title { get; set; }
			private string _unmodified_Title;
			[DataMember] 
			public DateTime Published { get; set; }
			private DateTime _unmodified_Published;
			[DataMember] 
			public string Author { get; set; }
			private string _unmodified_Author;
			[DataMember] 
			public string Description { get; set; }
			private string _unmodified_Description;
			[DataMember] 
			public AddressAndLocationCollection Locations { get; set; }
			private AddressAndLocationCollection _unmodified_Locations;
			[DataMember] 
			public CategoryCollection Categories { get; set; }
			private CategoryCollection _unmodified_Categories;
			
			}
			[DataContract] 
			[Serializable]
			public partial class DynamicContentGroupCollection : IInformationObject , IInformationCollection
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public DynamicContentGroupCollection()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "DynamicContentGroupCollection";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/DynamicContentGroupCollection/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(DynamicContentGroupCollection), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<DynamicContentGroupCollection>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: DynamicContentGroupCollection");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(DynamicContentGroupCollection), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/DynamicContentGroupCollection/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/DynamicContentGroupCollection/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((DynamicContentGroupCollection) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(DynamicContentGroupCollection));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static DynamicContentGroupCollection DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(DynamicContentGroupCollection));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (DynamicContentGroupCollection) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "DynamicContentGroupCollection", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "DynamicContentGroupCollection", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref DynamicContentGroupCollection customDemoObject);


				
				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.UpdateCollections(masterInstance);
					}
				}



				bool IInformationCollection.IsMasterCollection {
					get {
						return true;
					}
				}

				string IInformationCollection.GetMasterLocation()
				{
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					return GetMasterCollectionLocation(owner);
					
				}

				async Task<IInformationCollection> IInformationCollection.GetMasterInstanceAsync()
				{
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					return await GetMasterCollectionInstanceAsync(owner);
					
				}


				public string GetItemDirectory()
				{
					string dummyItemLocation = ObjectStorage.GetRelativeLocationFromID<DynamicContentGroup>("dummy");
					string nonOwnerDirectoryLocation = StorageSupport.GetParentDirectoryTarget(dummyItemLocation);
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					string ownerDirectoryLocation = StorageSupport.GetOwnerContentLocation(owner, nonOwnerDirectoryLocation);
					return ownerDirectoryLocation;
				}

				public async Task RefreshContentAsync()
				{
					// DirectoryToMaster
					string itemDirectory = GetItemDirectory();
					IInformationObject[] informationObjects = await StorageSupport.RetrieveInformationObjectsAsync(itemDirectory,
																								 typeof(DynamicContentGroup));
                    Array.ForEach(informationObjects, io => io.MasterETag = io.ETag);
					CollectionContent.Clear();
					CollectionContent.AddRange(informationObjects.Select(obj => (DynamicContentGroup) obj));
            
				}

				public static async Task<DynamicContentGroupCollection> GetMasterCollectionInstanceAsync(IContainerOwner owner)
				{
					return await ObjectStorage.RetrieveFromOwnerContentA<DynamicContentGroupCollection>(owner, "MasterCollection");
				}
				public static string GetMasterCollectionLocation(IContainerOwner owner)
				{
					return StorageSupport.GetOwnerContentLocation(owner, "AaltoGlobalImpact.OIP/DynamicContentGroupCollection/" + "MasterCollection");
				}



                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }

				
		
				public static DynamicContentGroupCollection CreateDefault()
				{
					var result = new DynamicContentGroupCollection();
					return result;
				}

				/*
				public static DynamicContentGroupCollection CreateDemoDefault()
				{
					DynamicContentGroupCollection customDemo = null;
					DynamicContentGroupCollection.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new DynamicContentGroupCollection();
					result.CollectionContent.Add(DynamicContentGroup.CreateDemoDefault());
					//result.CollectionContent.Add(DynamicContentGroup.CreateDemoDefault());
					//result.CollectionContent.Add(DynamicContentGroup.CreateDemoDefault());
					return result;
				}
				*/

		
				[DataMember] public List<DynamicContentGroup> CollectionContent = new List<DynamicContentGroup>();
				private DynamicContentGroup[] _unmodified_CollectionContent;

				[DataMember] public bool IsCollectionFiltered;
				private bool _unmodified_IsCollectionFiltered;
				
				[DataMember] public List<string> OrderFilterIDList = new List<string>();
				private string[] _unmodified_OrderFilterIDList;

				public string SelectedIDCommaSeparated
				{
					get
					{
						string[] sourceArray;
						if (OrderFilterIDList != null)
							sourceArray = OrderFilterIDList.ToArray();
						else
							sourceArray = CollectionContent.Select(item => item.ID).ToArray();
						return String.Join(",", sourceArray);
					}
					set 
					{
						if (value == null)
							return;
						string[] valueArray = value.Split(',');
						OrderFilterIDList = new List<string>();
						OrderFilterIDList.AddRange(valueArray);
						OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
					}
				}

				public DynamicContentGroup[] GetIDSelectedArray()
				{
					if (IsCollectionFiltered == false || this.OrderFilterIDList == null)
						return CollectionContent.ToArray();
					return
						this.OrderFilterIDList.Select(id => CollectionContent.FirstOrDefault(item => item.ID == id)).Where(item => item != null).ToArray();
				}

				public void RefreshOrderAndFilterListFromContent()
                {
                    if (OrderFilterIDList == null)
                        return;
                    OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
                }

				public void ParsePropertyValue(string propertyName, string propertyValue)
				{
					switch(propertyName)
					{
						case "SelectedIDCommaSeparated":
							SelectedIDCommaSeparated = propertyValue;
							break;
						case "IsCollectionFiltered":
							IsCollectionFiltered = bool.Parse(propertyValue);
							break;
						default:
							throw new NotSupportedException("No ParsePropertyValue supported for property: " + propertyName);
					}
				}


				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					for(int i = 0; i < CollectionContent.Count; i++) // >
					{
						if(CollectionContent[i].ID == replacingObject.ID)
							CollectionContent[i] = (DynamicContentGroup )replacingObject;
						else { // Cannot have circular reference, so can be in else branch
							IInformationObject iObject = CollectionContent[i];
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}

				
				bool IInformationObject.IsInstanceTreeModified {
					get {
						bool collectionModified = CollectionContent.SequenceEqual(_unmodified_CollectionContent) == false;
						if(collectionModified)
							return true;
						//if((OrderFilterIDList == null && _unmodified_OrderFilterIDList != null) || _unmodified_OrderFilterIDList
						if(IsCollectionFiltered != _unmodified_IsCollectionFiltered)
							return true;
						// For non-master content
						foreach(IInformationObject item in CollectionContent)
						{
							bool itemTreeModified = item.IsInstanceTreeModified;
							if(itemTreeModified)
								return true;
						}
							
						return false;
					}
				}
				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_CollectionContent = CollectionContent.ToArray();
					_unmodified_IsCollectionFiltered = IsCollectionFiltered;
					if(OrderFilterIDList == null)
						_unmodified_OrderFilterIDList = null;
					else
						_unmodified_OrderFilterIDList = OrderFilterIDList.ToArray();
					foreach(IInformationObject iObject in CollectionContent)
						iObject.SetInstanceTreeValuesAsUnmodified();
				}

				private void CopyContentFrom(DynamicContentGroupCollection sourceObject)
				{
					CollectionContent = sourceObject.CollectionContent;
					_unmodified_CollectionContent = sourceObject._unmodified_CollectionContent;
				}
				
				private object FindFromObjectTree(string objectId)
				{
					foreach(var item in CollectionContent)
					{
						object result = item.FindObjectByID(objectId);
						if(result != null)
							return result;
					}
					return null;
				}

				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					foreach(IInformationObject iObject in CollectionContent)
						iObject.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
				}


				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						bool doAdd = true;
						if(filterOnFalse != null)
							doAdd = filterOnFalse(iObject);
						if(doAdd) {
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
				}


			
			}
			[DataContract] 
			[Serializable]
			public partial class DynamicContentGroup : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public DynamicContentGroup()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "DynamicContentGroup";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/DynamicContentGroup/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(DynamicContentGroup), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<DynamicContentGroup>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: DynamicContentGroup");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(DynamicContentGroup), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/DynamicContentGroup/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/DynamicContentGroup/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((DynamicContentGroup) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(DynamicContentGroup));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static DynamicContentGroup DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(DynamicContentGroup));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (DynamicContentGroup) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "DynamicContentGroup", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "DynamicContentGroup", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref DynamicContentGroup customDemoObject);



				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(HostName != _unmodified_HostName)
							return true;
						if(GroupHeader != _unmodified_GroupHeader)
							return true;
						if(SortValue != _unmodified_SortValue)
							return true;
						if(PageLocation != _unmodified_PageLocation)
							return true;
						if(ContentItemNames != _unmodified_ContentItemNames)
							return true;
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
				}


				private void CopyContentFrom(DynamicContentGroup sourceObject)
				{
					HostName = sourceObject.HostName;
					GroupHeader = sourceObject.GroupHeader;
					SortValue = sourceObject.SortValue;
					PageLocation = sourceObject.PageLocation;
					ContentItemNames = sourceObject.ContentItemNames;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_HostName = HostName;
					_unmodified_GroupHeader = GroupHeader;
					_unmodified_SortValue = SortValue;
					_unmodified_PageLocation = PageLocation;
					_unmodified_ContentItemNames = ContentItemNames;
				
				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "HostName":
							HostName = value;
							break;
						case "GroupHeader":
							GroupHeader = value;
							break;
						case "SortValue":
							SortValue = value;
							break;
						case "PageLocation":
							PageLocation = value;
							break;
						case "ContentItemNames":
							ContentItemNames = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string HostName { get; set; }
			private string _unmodified_HostName;
			[DataMember] 
			public string GroupHeader { get; set; }
			private string _unmodified_GroupHeader;
			[DataMember] 
			public string SortValue { get; set; }
			private string _unmodified_SortValue;
			[DataMember] 
			public string PageLocation { get; set; }
			private string _unmodified_PageLocation;
			[DataMember] 
			public string ContentItemNames { get; set; }
			private string _unmodified_ContentItemNames;
			
			}
			[DataContract] 
			[Serializable]
			public partial class DynamicContentCollection : IInformationObject , IInformationCollection
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public DynamicContentCollection()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "DynamicContentCollection";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/DynamicContentCollection/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(DynamicContentCollection), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<DynamicContentCollection>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: DynamicContentCollection");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(DynamicContentCollection), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/DynamicContentCollection/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/DynamicContentCollection/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((DynamicContentCollection) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(DynamicContentCollection));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static DynamicContentCollection DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(DynamicContentCollection));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (DynamicContentCollection) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "DynamicContentCollection", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "DynamicContentCollection", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref DynamicContentCollection customDemoObject);


				
				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.UpdateCollections(masterInstance);
					}
				}



				bool IInformationCollection.IsMasterCollection {
					get {
						return true;
					}
				}

				string IInformationCollection.GetMasterLocation()
				{
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					return GetMasterCollectionLocation(owner);
					
				}

				async Task<IInformationCollection> IInformationCollection.GetMasterInstanceAsync()
				{
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					return await GetMasterCollectionInstanceAsync(owner);
					
				}


				public string GetItemDirectory()
				{
					string dummyItemLocation = ObjectStorage.GetRelativeLocationFromID<DynamicContent>("dummy");
					string nonOwnerDirectoryLocation = StorageSupport.GetParentDirectoryTarget(dummyItemLocation);
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					string ownerDirectoryLocation = StorageSupport.GetOwnerContentLocation(owner, nonOwnerDirectoryLocation);
					return ownerDirectoryLocation;
				}

				public async Task RefreshContentAsync()
				{
					// DirectoryToMaster
					string itemDirectory = GetItemDirectory();
					IInformationObject[] informationObjects = await StorageSupport.RetrieveInformationObjectsAsync(itemDirectory,
																								 typeof(DynamicContent));
                    Array.ForEach(informationObjects, io => io.MasterETag = io.ETag);
					CollectionContent.Clear();
					CollectionContent.AddRange(informationObjects.Select(obj => (DynamicContent) obj));
            
				}

				public static async Task<DynamicContentCollection> GetMasterCollectionInstanceAsync(IContainerOwner owner)
				{
					return await ObjectStorage.RetrieveFromOwnerContentA<DynamicContentCollection>(owner, "MasterCollection");
				}
				public static string GetMasterCollectionLocation(IContainerOwner owner)
				{
					return StorageSupport.GetOwnerContentLocation(owner, "AaltoGlobalImpact.OIP/DynamicContentCollection/" + "MasterCollection");
				}



                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }

				
		
				public static DynamicContentCollection CreateDefault()
				{
					var result = new DynamicContentCollection();
					return result;
				}

				/*
				public static DynamicContentCollection CreateDemoDefault()
				{
					DynamicContentCollection customDemo = null;
					DynamicContentCollection.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new DynamicContentCollection();
					result.CollectionContent.Add(DynamicContent.CreateDemoDefault());
					//result.CollectionContent.Add(DynamicContent.CreateDemoDefault());
					//result.CollectionContent.Add(DynamicContent.CreateDemoDefault());
					return result;
				}
				*/

		
				[DataMember] public List<DynamicContent> CollectionContent = new List<DynamicContent>();
				private DynamicContent[] _unmodified_CollectionContent;

				[DataMember] public bool IsCollectionFiltered;
				private bool _unmodified_IsCollectionFiltered;
				
				[DataMember] public List<string> OrderFilterIDList = new List<string>();
				private string[] _unmodified_OrderFilterIDList;

				public string SelectedIDCommaSeparated
				{
					get
					{
						string[] sourceArray;
						if (OrderFilterIDList != null)
							sourceArray = OrderFilterIDList.ToArray();
						else
							sourceArray = CollectionContent.Select(item => item.ID).ToArray();
						return String.Join(",", sourceArray);
					}
					set 
					{
						if (value == null)
							return;
						string[] valueArray = value.Split(',');
						OrderFilterIDList = new List<string>();
						OrderFilterIDList.AddRange(valueArray);
						OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
					}
				}

				public DynamicContent[] GetIDSelectedArray()
				{
					if (IsCollectionFiltered == false || this.OrderFilterIDList == null)
						return CollectionContent.ToArray();
					return
						this.OrderFilterIDList.Select(id => CollectionContent.FirstOrDefault(item => item.ID == id)).Where(item => item != null).ToArray();
				}

				public void RefreshOrderAndFilterListFromContent()
                {
                    if (OrderFilterIDList == null)
                        return;
                    OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
                }

				public void ParsePropertyValue(string propertyName, string propertyValue)
				{
					switch(propertyName)
					{
						case "SelectedIDCommaSeparated":
							SelectedIDCommaSeparated = propertyValue;
							break;
						case "IsCollectionFiltered":
							IsCollectionFiltered = bool.Parse(propertyValue);
							break;
						default:
							throw new NotSupportedException("No ParsePropertyValue supported for property: " + propertyName);
					}
				}


				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					for(int i = 0; i < CollectionContent.Count; i++) // >
					{
						if(CollectionContent[i].ID == replacingObject.ID)
							CollectionContent[i] = (DynamicContent )replacingObject;
						else { // Cannot have circular reference, so can be in else branch
							IInformationObject iObject = CollectionContent[i];
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}

				
				bool IInformationObject.IsInstanceTreeModified {
					get {
						bool collectionModified = CollectionContent.SequenceEqual(_unmodified_CollectionContent) == false;
						if(collectionModified)
							return true;
						//if((OrderFilterIDList == null && _unmodified_OrderFilterIDList != null) || _unmodified_OrderFilterIDList
						if(IsCollectionFiltered != _unmodified_IsCollectionFiltered)
							return true;
						// For non-master content
						foreach(IInformationObject item in CollectionContent)
						{
							bool itemTreeModified = item.IsInstanceTreeModified;
							if(itemTreeModified)
								return true;
						}
							
						return false;
					}
				}
				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_CollectionContent = CollectionContent.ToArray();
					_unmodified_IsCollectionFiltered = IsCollectionFiltered;
					if(OrderFilterIDList == null)
						_unmodified_OrderFilterIDList = null;
					else
						_unmodified_OrderFilterIDList = OrderFilterIDList.ToArray();
					foreach(IInformationObject iObject in CollectionContent)
						iObject.SetInstanceTreeValuesAsUnmodified();
				}

				private void CopyContentFrom(DynamicContentCollection sourceObject)
				{
					CollectionContent = sourceObject.CollectionContent;
					_unmodified_CollectionContent = sourceObject._unmodified_CollectionContent;
				}
				
				private object FindFromObjectTree(string objectId)
				{
					foreach(var item in CollectionContent)
					{
						object result = item.FindObjectByID(objectId);
						if(result != null)
							return result;
					}
					return null;
				}

				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					foreach(IInformationObject iObject in CollectionContent)
						iObject.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
				}


				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						bool doAdd = true;
						if(filterOnFalse != null)
							doAdd = filterOnFalse(iObject);
						if(doAdd) {
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
				}


			
			}
			[DataContract] 
			[Serializable]
			public partial class DynamicContent : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public DynamicContent()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "DynamicContent";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/DynamicContent/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(DynamicContent), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<DynamicContent>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: DynamicContent");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(DynamicContent), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/DynamicContent/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/DynamicContent/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((DynamicContent) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(DynamicContent));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static DynamicContent DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(DynamicContent));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (DynamicContent) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "DynamicContent", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "DynamicContent", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref DynamicContent customDemoObject);



				public static DynamicContent CreateDefault()
				{
					var result = new DynamicContent();
					result.ImageData = MediaContent.CreateDefault();
					return result;
				}
				/*
				public static DynamicContent CreateDemoDefault()
				{
					DynamicContent customDemo = null;
					DynamicContent.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new DynamicContent();
					result.HostName = @"DynamicContent.HostName";

					result.ContentName = @"DynamicContent.ContentName";

					result.Title = @"DynamicContent.Title";

					result.Description = @"DynamicContent.Description
DynamicContent.Description
DynamicContent.Description
DynamicContent.Description
DynamicContent.Description
";

					result.ElementQuery = @"DynamicContent.ElementQuery";

					result.Content = @"DynamicContent.Content
DynamicContent.Content
DynamicContent.Content
DynamicContent.Content
DynamicContent.Content
";

					result.RawContent = @"DynamicContent.RawContent
DynamicContent.RawContent
DynamicContent.RawContent
DynamicContent.RawContent
DynamicContent.RawContent
";

					result.ImageData = MediaContent.CreateDemoDefault();
					result.EditType = @"DynamicContent.EditType";

					result.PageLocation = @"DynamicContent.PageLocation";

				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
					if(ImageData != null) {
						((IInformationObject) ImageData).UpdateCollections(masterInstance);
					}

				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					{ // Scoping block for variable name reusability
						IInformationObject item = ImageData;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					{
						var item = ImageData;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					{
						var item = (IInformationObject) ImageData;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(HostName != _unmodified_HostName)
							return true;
						if(ContentName != _unmodified_ContentName)
							return true;
						if(Title != _unmodified_Title)
							return true;
						if(Description != _unmodified_Description)
							return true;
						if(ElementQuery != _unmodified_ElementQuery)
							return true;
						if(Content != _unmodified_Content)
							return true;
						if(RawContent != _unmodified_RawContent)
							return true;
						if(ImageData != _unmodified_ImageData)
							return true;
						if(IsEnabled != _unmodified_IsEnabled)
							return true;
						if(ApplyActively != _unmodified_ApplyActively)
							return true;
						if(EditType != _unmodified_EditType)
							return true;
						if(PageLocation != _unmodified_PageLocation)
							return true;
						{
							IInformationObject item = (IInformationObject) ImageData;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					if(ImageData != null) {
						if(ImageData.ID == replacingObject.ID)
							ImageData = (MediaContent) replacingObject;
						else {
							IInformationObject iObject = ImageData;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}


				private void CopyContentFrom(DynamicContent sourceObject)
				{
					HostName = sourceObject.HostName;
					ContentName = sourceObject.ContentName;
					Title = sourceObject.Title;
					Description = sourceObject.Description;
					ElementQuery = sourceObject.ElementQuery;
					Content = sourceObject.Content;
					RawContent = sourceObject.RawContent;
					ImageData = sourceObject.ImageData;
					IsEnabled = sourceObject.IsEnabled;
					ApplyActively = sourceObject.ApplyActively;
					EditType = sourceObject.EditType;
					PageLocation = sourceObject.PageLocation;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_HostName = HostName;
					_unmodified_ContentName = ContentName;
					_unmodified_Title = Title;
					_unmodified_Description = Description;
					_unmodified_ElementQuery = ElementQuery;
					_unmodified_Content = Content;
					_unmodified_RawContent = RawContent;
					_unmodified_IsEnabled = IsEnabled;
					_unmodified_ApplyActively = ApplyActively;
					_unmodified_EditType = EditType;
					_unmodified_PageLocation = PageLocation;
				
					_unmodified_ImageData = ImageData;
					if(ImageData != null)
						((IInformationObject) ImageData).SetInstanceTreeValuesAsUnmodified();

				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "HostName":
							HostName = value;
							break;
						case "ContentName":
							ContentName = value;
							break;
						case "Title":
							Title = value;
							break;
						case "Description":
							Description = value;
							break;
						case "ElementQuery":
							ElementQuery = value;
							break;
						case "Content":
							Content = value;
							break;
						case "RawContent":
							RawContent = value;
							break;
						case "IsEnabled":
							IsEnabled = bool.Parse(value);
							break;
						case "ApplyActively":
							ApplyActively = bool.Parse(value);
							break;
						case "EditType":
							EditType = value;
							break;
						case "PageLocation":
							PageLocation = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string HostName { get; set; }
			private string _unmodified_HostName;
			[DataMember] 
			public string ContentName { get; set; }
			private string _unmodified_ContentName;
			[DataMember] 
			public string Title { get; set; }
			private string _unmodified_Title;
			[DataMember] 
			public string Description { get; set; }
			private string _unmodified_Description;
			[DataMember] 
			public string ElementQuery { get; set; }
			private string _unmodified_ElementQuery;
			[DataMember] 
			public string Content { get; set; }
			private string _unmodified_Content;
			[DataMember] 
			public string RawContent { get; set; }
			private string _unmodified_RawContent;
			[DataMember] 
			public MediaContent ImageData { get; set; }
			private MediaContent _unmodified_ImageData;
			[DataMember] 
			public bool IsEnabled { get; set; }
			private bool _unmodified_IsEnabled;
			[DataMember] 
			public bool ApplyActively { get; set; }
			private bool _unmodified_ApplyActively;
			[DataMember] 
			public string EditType { get; set; }
			private string _unmodified_EditType;
			[DataMember] 
			public string PageLocation { get; set; }
			private string _unmodified_PageLocation;
			
			}
			[DataContract] 
			[Serializable]
			public partial class AttachedToObjectCollection : IInformationObject , IInformationCollection
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public AttachedToObjectCollection()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "AttachedToObjectCollection";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/AttachedToObjectCollection/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(AttachedToObjectCollection), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<AttachedToObjectCollection>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: AttachedToObjectCollection");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(AttachedToObjectCollection), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/AttachedToObjectCollection/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/AttachedToObjectCollection/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((AttachedToObjectCollection) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(AttachedToObjectCollection));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static AttachedToObjectCollection DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(AttachedToObjectCollection));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (AttachedToObjectCollection) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "AttachedToObjectCollection", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "AttachedToObjectCollection", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref AttachedToObjectCollection customDemoObject);


				
				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.UpdateCollections(masterInstance);
					}
				}



				bool IInformationCollection.IsMasterCollection {
					get {
						return true;
					}
				}

				string IInformationCollection.GetMasterLocation()
				{
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					return GetMasterCollectionLocation(owner);
					
				}

				async Task<IInformationCollection> IInformationCollection.GetMasterInstanceAsync()
				{
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					return await GetMasterCollectionInstanceAsync(owner);
					
				}


				public string GetItemDirectory()
				{
					string dummyItemLocation = ObjectStorage.GetRelativeLocationFromID<AttachedToObject>("dummy");
					string nonOwnerDirectoryLocation = StorageSupport.GetParentDirectoryTarget(dummyItemLocation);
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					string ownerDirectoryLocation = StorageSupport.GetOwnerContentLocation(owner, nonOwnerDirectoryLocation);
					return ownerDirectoryLocation;
				}

				public async Task RefreshContentAsync()
				{
					// DirectoryToMaster
					string itemDirectory = GetItemDirectory();
					IInformationObject[] informationObjects = await StorageSupport.RetrieveInformationObjectsAsync(itemDirectory,
																								 typeof(AttachedToObject));
                    Array.ForEach(informationObjects, io => io.MasterETag = io.ETag);
					CollectionContent.Clear();
					CollectionContent.AddRange(informationObjects.Select(obj => (AttachedToObject) obj));
            
				}

				public static async Task<AttachedToObjectCollection> GetMasterCollectionInstanceAsync(IContainerOwner owner)
				{
					return await ObjectStorage.RetrieveFromOwnerContentA<AttachedToObjectCollection>(owner, "MasterCollection");
				}
				public static string GetMasterCollectionLocation(IContainerOwner owner)
				{
					return StorageSupport.GetOwnerContentLocation(owner, "AaltoGlobalImpact.OIP/AttachedToObjectCollection/" + "MasterCollection");
				}



                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }

				
		
				public static AttachedToObjectCollection CreateDefault()
				{
					var result = new AttachedToObjectCollection();
					return result;
				}

				/*
				public static AttachedToObjectCollection CreateDemoDefault()
				{
					AttachedToObjectCollection customDemo = null;
					AttachedToObjectCollection.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new AttachedToObjectCollection();
					result.CollectionContent.Add(AttachedToObject.CreateDemoDefault());
					//result.CollectionContent.Add(AttachedToObject.CreateDemoDefault());
					//result.CollectionContent.Add(AttachedToObject.CreateDemoDefault());
					return result;
				}
				*/

		
				[DataMember] public List<AttachedToObject> CollectionContent = new List<AttachedToObject>();
				private AttachedToObject[] _unmodified_CollectionContent;

				[DataMember] public bool IsCollectionFiltered;
				private bool _unmodified_IsCollectionFiltered;
				
				[DataMember] public List<string> OrderFilterIDList = new List<string>();
				private string[] _unmodified_OrderFilterIDList;

				public string SelectedIDCommaSeparated
				{
					get
					{
						string[] sourceArray;
						if (OrderFilterIDList != null)
							sourceArray = OrderFilterIDList.ToArray();
						else
							sourceArray = CollectionContent.Select(item => item.ID).ToArray();
						return String.Join(",", sourceArray);
					}
					set 
					{
						if (value == null)
							return;
						string[] valueArray = value.Split(',');
						OrderFilterIDList = new List<string>();
						OrderFilterIDList.AddRange(valueArray);
						OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
					}
				}

				public AttachedToObject[] GetIDSelectedArray()
				{
					if (IsCollectionFiltered == false || this.OrderFilterIDList == null)
						return CollectionContent.ToArray();
					return
						this.OrderFilterIDList.Select(id => CollectionContent.FirstOrDefault(item => item.ID == id)).Where(item => item != null).ToArray();
				}

				public void RefreshOrderAndFilterListFromContent()
                {
                    if (OrderFilterIDList == null)
                        return;
                    OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
                }

				public void ParsePropertyValue(string propertyName, string propertyValue)
				{
					switch(propertyName)
					{
						case "SelectedIDCommaSeparated":
							SelectedIDCommaSeparated = propertyValue;
							break;
						case "IsCollectionFiltered":
							IsCollectionFiltered = bool.Parse(propertyValue);
							break;
						default:
							throw new NotSupportedException("No ParsePropertyValue supported for property: " + propertyName);
					}
				}


				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					for(int i = 0; i < CollectionContent.Count; i++) // >
					{
						if(CollectionContent[i].ID == replacingObject.ID)
							CollectionContent[i] = (AttachedToObject )replacingObject;
						else { // Cannot have circular reference, so can be in else branch
							IInformationObject iObject = CollectionContent[i];
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}

				
				bool IInformationObject.IsInstanceTreeModified {
					get {
						bool collectionModified = CollectionContent.SequenceEqual(_unmodified_CollectionContent) == false;
						if(collectionModified)
							return true;
						//if((OrderFilterIDList == null && _unmodified_OrderFilterIDList != null) || _unmodified_OrderFilterIDList
						if(IsCollectionFiltered != _unmodified_IsCollectionFiltered)
							return true;
						// For non-master content
						foreach(IInformationObject item in CollectionContent)
						{
							bool itemTreeModified = item.IsInstanceTreeModified;
							if(itemTreeModified)
								return true;
						}
							
						return false;
					}
				}
				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_CollectionContent = CollectionContent.ToArray();
					_unmodified_IsCollectionFiltered = IsCollectionFiltered;
					if(OrderFilterIDList == null)
						_unmodified_OrderFilterIDList = null;
					else
						_unmodified_OrderFilterIDList = OrderFilterIDList.ToArray();
					foreach(IInformationObject iObject in CollectionContent)
						iObject.SetInstanceTreeValuesAsUnmodified();
				}

				private void CopyContentFrom(AttachedToObjectCollection sourceObject)
				{
					CollectionContent = sourceObject.CollectionContent;
					_unmodified_CollectionContent = sourceObject._unmodified_CollectionContent;
				}
				
				private object FindFromObjectTree(string objectId)
				{
					foreach(var item in CollectionContent)
					{
						object result = item.FindObjectByID(objectId);
						if(result != null)
							return result;
					}
					return null;
				}

				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					foreach(IInformationObject iObject in CollectionContent)
						iObject.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
				}


				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						bool doAdd = true;
						if(filterOnFalse != null)
							doAdd = filterOnFalse(iObject);
						if(doAdd) {
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
				}


			
			}
			[DataContract] 
			[Serializable]
			public partial class AttachedToObject : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public AttachedToObject()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "AttachedToObject";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/AttachedToObject/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(AttachedToObject), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<AttachedToObject>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: AttachedToObject");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(AttachedToObject), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/AttachedToObject/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/AttachedToObject/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((AttachedToObject) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(AttachedToObject));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static AttachedToObject DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(AttachedToObject));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (AttachedToObject) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "AttachedToObject", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "AttachedToObject", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref AttachedToObject customDemoObject);



				public static AttachedToObject CreateDefault()
				{
					var result = new AttachedToObject();
					return result;
				}
				/*
				public static AttachedToObject CreateDemoDefault()
				{
					AttachedToObject customDemo = null;
					AttachedToObject.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new AttachedToObject();
					result.SourceObjectID = @"AttachedToObject.SourceObjectID";

					result.SourceObjectName = @"AttachedToObject.SourceObjectName";

					result.SourceObjectDomain = @"AttachedToObject.SourceObjectDomain";

					result.TargetObjectID = @"AttachedToObject.TargetObjectID";

					result.TargetObjectName = @"AttachedToObject.TargetObjectName";

					result.TargetObjectDomain = @"AttachedToObject.TargetObjectDomain";

				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(SourceObjectID != _unmodified_SourceObjectID)
							return true;
						if(SourceObjectName != _unmodified_SourceObjectName)
							return true;
						if(SourceObjectDomain != _unmodified_SourceObjectDomain)
							return true;
						if(TargetObjectID != _unmodified_TargetObjectID)
							return true;
						if(TargetObjectName != _unmodified_TargetObjectName)
							return true;
						if(TargetObjectDomain != _unmodified_TargetObjectDomain)
							return true;
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
				}


				private void CopyContentFrom(AttachedToObject sourceObject)
				{
					SourceObjectID = sourceObject.SourceObjectID;
					SourceObjectName = sourceObject.SourceObjectName;
					SourceObjectDomain = sourceObject.SourceObjectDomain;
					TargetObjectID = sourceObject.TargetObjectID;
					TargetObjectName = sourceObject.TargetObjectName;
					TargetObjectDomain = sourceObject.TargetObjectDomain;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_SourceObjectID = SourceObjectID;
					_unmodified_SourceObjectName = SourceObjectName;
					_unmodified_SourceObjectDomain = SourceObjectDomain;
					_unmodified_TargetObjectID = TargetObjectID;
					_unmodified_TargetObjectName = TargetObjectName;
					_unmodified_TargetObjectDomain = TargetObjectDomain;
				
				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "SourceObjectID":
							SourceObjectID = value;
							break;
						case "SourceObjectName":
							SourceObjectName = value;
							break;
						case "SourceObjectDomain":
							SourceObjectDomain = value;
							break;
						case "TargetObjectID":
							TargetObjectID = value;
							break;
						case "TargetObjectName":
							TargetObjectName = value;
							break;
						case "TargetObjectDomain":
							TargetObjectDomain = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string SourceObjectID { get; set; }
			private string _unmodified_SourceObjectID;
			[DataMember] 
			public string SourceObjectName { get; set; }
			private string _unmodified_SourceObjectName;
			[DataMember] 
			public string SourceObjectDomain { get; set; }
			private string _unmodified_SourceObjectDomain;
			[DataMember] 
			public string TargetObjectID { get; set; }
			private string _unmodified_TargetObjectID;
			[DataMember] 
			public string TargetObjectName { get; set; }
			private string _unmodified_TargetObjectName;
			[DataMember] 
			public string TargetObjectDomain { get; set; }
			private string _unmodified_TargetObjectDomain;
			
			}
			[DataContract] 
			[Serializable]
			public partial class CommentCollection : IInformationObject , IInformationCollection
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public CommentCollection()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "CommentCollection";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/CommentCollection/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(CommentCollection), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<CommentCollection>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: CommentCollection");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(CommentCollection), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/CommentCollection/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/CommentCollection/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((CommentCollection) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(CommentCollection));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static CommentCollection DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(CommentCollection));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (CommentCollection) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "CommentCollection", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "CommentCollection", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref CommentCollection customDemoObject);


				
				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.UpdateCollections(masterInstance);
					}
				}



				bool IInformationCollection.IsMasterCollection {
					get {
						return true;
					}
				}

				string IInformationCollection.GetMasterLocation()
				{
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					return GetMasterCollectionLocation(owner);
					
				}

				async Task<IInformationCollection> IInformationCollection.GetMasterInstanceAsync()
				{
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					return await GetMasterCollectionInstanceAsync(owner);
					
				}


				public string GetItemDirectory()
				{
					string dummyItemLocation = ObjectStorage.GetRelativeLocationFromID<Comment>("dummy");
					string nonOwnerDirectoryLocation = StorageSupport.GetParentDirectoryTarget(dummyItemLocation);
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					string ownerDirectoryLocation = StorageSupport.GetOwnerContentLocation(owner, nonOwnerDirectoryLocation);
					return ownerDirectoryLocation;
				}

				public async Task RefreshContentAsync()
				{
					// DirectoryToMaster
					string itemDirectory = GetItemDirectory();
					IInformationObject[] informationObjects = await StorageSupport.RetrieveInformationObjectsAsync(itemDirectory,
																								 typeof(Comment));
                    Array.ForEach(informationObjects, io => io.MasterETag = io.ETag);
					CollectionContent.Clear();
					CollectionContent.AddRange(informationObjects.Select(obj => (Comment) obj));
            
				}

				public static async Task<CommentCollection> GetMasterCollectionInstanceAsync(IContainerOwner owner)
				{
					return await ObjectStorage.RetrieveFromOwnerContentA<CommentCollection>(owner, "MasterCollection");
				}
				public static string GetMasterCollectionLocation(IContainerOwner owner)
				{
					return StorageSupport.GetOwnerContentLocation(owner, "AaltoGlobalImpact.OIP/CommentCollection/" + "MasterCollection");
				}



                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }

				
		
				public static CommentCollection CreateDefault()
				{
					var result = new CommentCollection();
					return result;
				}

				/*
				public static CommentCollection CreateDemoDefault()
				{
					CommentCollection customDemo = null;
					CommentCollection.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new CommentCollection();
					result.CollectionContent.Add(Comment.CreateDemoDefault());
					//result.CollectionContent.Add(Comment.CreateDemoDefault());
					//result.CollectionContent.Add(Comment.CreateDemoDefault());
					return result;
				}
				*/

		
				[DataMember] public List<Comment> CollectionContent = new List<Comment>();
				private Comment[] _unmodified_CollectionContent;

				[DataMember] public bool IsCollectionFiltered;
				private bool _unmodified_IsCollectionFiltered;
				
				[DataMember] public List<string> OrderFilterIDList = new List<string>();
				private string[] _unmodified_OrderFilterIDList;

				public string SelectedIDCommaSeparated
				{
					get
					{
						string[] sourceArray;
						if (OrderFilterIDList != null)
							sourceArray = OrderFilterIDList.ToArray();
						else
							sourceArray = CollectionContent.Select(item => item.ID).ToArray();
						return String.Join(",", sourceArray);
					}
					set 
					{
						if (value == null)
							return;
						string[] valueArray = value.Split(',');
						OrderFilterIDList = new List<string>();
						OrderFilterIDList.AddRange(valueArray);
						OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
					}
				}

				public Comment[] GetIDSelectedArray()
				{
					if (IsCollectionFiltered == false || this.OrderFilterIDList == null)
						return CollectionContent.ToArray();
					return
						this.OrderFilterIDList.Select(id => CollectionContent.FirstOrDefault(item => item.ID == id)).Where(item => item != null).ToArray();
				}

				public void RefreshOrderAndFilterListFromContent()
                {
                    if (OrderFilterIDList == null)
                        return;
                    OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
                }

				public void ParsePropertyValue(string propertyName, string propertyValue)
				{
					switch(propertyName)
					{
						case "SelectedIDCommaSeparated":
							SelectedIDCommaSeparated = propertyValue;
							break;
						case "IsCollectionFiltered":
							IsCollectionFiltered = bool.Parse(propertyValue);
							break;
						default:
							throw new NotSupportedException("No ParsePropertyValue supported for property: " + propertyName);
					}
				}


				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					for(int i = 0; i < CollectionContent.Count; i++) // >
					{
						if(CollectionContent[i].ID == replacingObject.ID)
							CollectionContent[i] = (Comment )replacingObject;
						else { // Cannot have circular reference, so can be in else branch
							IInformationObject iObject = CollectionContent[i];
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}

				
				bool IInformationObject.IsInstanceTreeModified {
					get {
						bool collectionModified = CollectionContent.SequenceEqual(_unmodified_CollectionContent) == false;
						if(collectionModified)
							return true;
						//if((OrderFilterIDList == null && _unmodified_OrderFilterIDList != null) || _unmodified_OrderFilterIDList
						if(IsCollectionFiltered != _unmodified_IsCollectionFiltered)
							return true;
						// For non-master content
						foreach(IInformationObject item in CollectionContent)
						{
							bool itemTreeModified = item.IsInstanceTreeModified;
							if(itemTreeModified)
								return true;
						}
							
						return false;
					}
				}
				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_CollectionContent = CollectionContent.ToArray();
					_unmodified_IsCollectionFiltered = IsCollectionFiltered;
					if(OrderFilterIDList == null)
						_unmodified_OrderFilterIDList = null;
					else
						_unmodified_OrderFilterIDList = OrderFilterIDList.ToArray();
					foreach(IInformationObject iObject in CollectionContent)
						iObject.SetInstanceTreeValuesAsUnmodified();
				}

				private void CopyContentFrom(CommentCollection sourceObject)
				{
					CollectionContent = sourceObject.CollectionContent;
					_unmodified_CollectionContent = sourceObject._unmodified_CollectionContent;
				}
				
				private object FindFromObjectTree(string objectId)
				{
					foreach(var item in CollectionContent)
					{
						object result = item.FindObjectByID(objectId);
						if(result != null)
							return result;
					}
					return null;
				}

				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					foreach(IInformationObject iObject in CollectionContent)
						iObject.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
				}


				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						bool doAdd = true;
						if(filterOnFalse != null)
							doAdd = filterOnFalse(iObject);
						if(doAdd) {
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
				}


			
			}
			[DataContract] 
			[Serializable]
			public partial class Comment : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public Comment()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "Comment";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/Comment/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(Comment), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<Comment>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: Comment");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(Comment), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/Comment/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/Comment/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((Comment) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(Comment));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static Comment DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(Comment));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (Comment) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "Comment", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "Comment", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref Comment customDemoObject);



				public static Comment CreateDefault()
				{
					var result = new Comment();
					return result;
				}
				/*
				public static Comment CreateDemoDefault()
				{
					Comment customDemo = null;
					Comment.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new Comment();
					result.TargetObjectID = @"Comment.TargetObjectID";

					result.TargetObjectName = @"Comment.TargetObjectName";

					result.TargetObjectDomain = @"Comment.TargetObjectDomain";

					result.CommentText = @"Comment.CommentText
Comment.CommentText
Comment.CommentText
Comment.CommentText
Comment.CommentText
";

					result.OriginalAuthorName = @"Comment.OriginalAuthorName";

					result.OriginalAuthorEmail = @"Comment.OriginalAuthorEmail";

					result.OriginalAuthorAccountID = @"Comment.OriginalAuthorAccountID";

					result.LastAuthorName = @"Comment.LastAuthorName";

					result.LastAuthorEmail = @"Comment.LastAuthorEmail";

					result.LastAuthorAccountID = @"Comment.LastAuthorAccountID";

				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(TargetObjectID != _unmodified_TargetObjectID)
							return true;
						if(TargetObjectName != _unmodified_TargetObjectName)
							return true;
						if(TargetObjectDomain != _unmodified_TargetObjectDomain)
							return true;
						if(CommentText != _unmodified_CommentText)
							return true;
						if(Created != _unmodified_Created)
							return true;
						if(OriginalAuthorName != _unmodified_OriginalAuthorName)
							return true;
						if(OriginalAuthorEmail != _unmodified_OriginalAuthorEmail)
							return true;
						if(OriginalAuthorAccountID != _unmodified_OriginalAuthorAccountID)
							return true;
						if(LastModified != _unmodified_LastModified)
							return true;
						if(LastAuthorName != _unmodified_LastAuthorName)
							return true;
						if(LastAuthorEmail != _unmodified_LastAuthorEmail)
							return true;
						if(LastAuthorAccountID != _unmodified_LastAuthorAccountID)
							return true;
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
				}


				private void CopyContentFrom(Comment sourceObject)
				{
					TargetObjectID = sourceObject.TargetObjectID;
					TargetObjectName = sourceObject.TargetObjectName;
					TargetObjectDomain = sourceObject.TargetObjectDomain;
					CommentText = sourceObject.CommentText;
					Created = sourceObject.Created;
					OriginalAuthorName = sourceObject.OriginalAuthorName;
					OriginalAuthorEmail = sourceObject.OriginalAuthorEmail;
					OriginalAuthorAccountID = sourceObject.OriginalAuthorAccountID;
					LastModified = sourceObject.LastModified;
					LastAuthorName = sourceObject.LastAuthorName;
					LastAuthorEmail = sourceObject.LastAuthorEmail;
					LastAuthorAccountID = sourceObject.LastAuthorAccountID;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_TargetObjectID = TargetObjectID;
					_unmodified_TargetObjectName = TargetObjectName;
					_unmodified_TargetObjectDomain = TargetObjectDomain;
					_unmodified_CommentText = CommentText;
					_unmodified_Created = Created;
					_unmodified_OriginalAuthorName = OriginalAuthorName;
					_unmodified_OriginalAuthorEmail = OriginalAuthorEmail;
					_unmodified_OriginalAuthorAccountID = OriginalAuthorAccountID;
					_unmodified_LastModified = LastModified;
					_unmodified_LastAuthorName = LastAuthorName;
					_unmodified_LastAuthorEmail = LastAuthorEmail;
					_unmodified_LastAuthorAccountID = LastAuthorAccountID;
				
				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "TargetObjectID":
							TargetObjectID = value;
							break;
						case "TargetObjectName":
							TargetObjectName = value;
							break;
						case "TargetObjectDomain":
							TargetObjectDomain = value;
							break;
						case "CommentText":
							CommentText = value;
							break;
						case "Created":
							Created = DateTime.Parse(value);
							break;
						case "OriginalAuthorName":
							OriginalAuthorName = value;
							break;
						case "OriginalAuthorEmail":
							OriginalAuthorEmail = value;
							break;
						case "OriginalAuthorAccountID":
							OriginalAuthorAccountID = value;
							break;
						case "LastModified":
							LastModified = DateTime.Parse(value);
							break;
						case "LastAuthorName":
							LastAuthorName = value;
							break;
						case "LastAuthorEmail":
							LastAuthorEmail = value;
							break;
						case "LastAuthorAccountID":
							LastAuthorAccountID = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string TargetObjectID { get; set; }
			private string _unmodified_TargetObjectID;
			[DataMember] 
			public string TargetObjectName { get; set; }
			private string _unmodified_TargetObjectName;
			[DataMember] 
			public string TargetObjectDomain { get; set; }
			private string _unmodified_TargetObjectDomain;
			[DataMember] 
			public string CommentText { get; set; }
			private string _unmodified_CommentText;
			[DataMember] 
			public DateTime Created { get; set; }
			private DateTime _unmodified_Created;
			[DataMember] 
			public string OriginalAuthorName { get; set; }
			private string _unmodified_OriginalAuthorName;
			[DataMember] 
			public string OriginalAuthorEmail { get; set; }
			private string _unmodified_OriginalAuthorEmail;
			[DataMember] 
			public string OriginalAuthorAccountID { get; set; }
			private string _unmodified_OriginalAuthorAccountID;
			[DataMember] 
			public DateTime LastModified { get; set; }
			private DateTime _unmodified_LastModified;
			[DataMember] 
			public string LastAuthorName { get; set; }
			private string _unmodified_LastAuthorName;
			[DataMember] 
			public string LastAuthorEmail { get; set; }
			private string _unmodified_LastAuthorEmail;
			[DataMember] 
			public string LastAuthorAccountID { get; set; }
			private string _unmodified_LastAuthorAccountID;
			
			}
			[DataContract] 
			[Serializable]
			public partial class SelectionCollection : IInformationObject , IInformationCollection
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public SelectionCollection()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "SelectionCollection";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/SelectionCollection/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(SelectionCollection), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<SelectionCollection>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: SelectionCollection");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(SelectionCollection), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/SelectionCollection/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/SelectionCollection/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((SelectionCollection) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(SelectionCollection));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static SelectionCollection DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(SelectionCollection));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (SelectionCollection) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "SelectionCollection", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "SelectionCollection", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref SelectionCollection customDemoObject);


				
				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.UpdateCollections(masterInstance);
					}
				}



				bool IInformationCollection.IsMasterCollection {
					get {
						return true;
					}
				}

				string IInformationCollection.GetMasterLocation()
				{
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					return GetMasterCollectionLocation(owner);
					
				}

				async Task<IInformationCollection> IInformationCollection.GetMasterInstanceAsync()
				{
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					return await GetMasterCollectionInstanceAsync(owner);
					
				}


				public string GetItemDirectory()
				{
					string dummyItemLocation = ObjectStorage.GetRelativeLocationFromID<Selection>("dummy");
					string nonOwnerDirectoryLocation = StorageSupport.GetParentDirectoryTarget(dummyItemLocation);
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					string ownerDirectoryLocation = StorageSupport.GetOwnerContentLocation(owner, nonOwnerDirectoryLocation);
					return ownerDirectoryLocation;
				}

				public async Task RefreshContentAsync()
				{
					// DirectoryToMaster
					string itemDirectory = GetItemDirectory();
					IInformationObject[] informationObjects = await StorageSupport.RetrieveInformationObjectsAsync(itemDirectory,
																								 typeof(Selection));
                    Array.ForEach(informationObjects, io => io.MasterETag = io.ETag);
					CollectionContent.Clear();
					CollectionContent.AddRange(informationObjects.Select(obj => (Selection) obj));
            
				}

				public static async Task<SelectionCollection> GetMasterCollectionInstanceAsync(IContainerOwner owner)
				{
					return await ObjectStorage.RetrieveFromOwnerContentA<SelectionCollection>(owner, "MasterCollection");
				}
				public static string GetMasterCollectionLocation(IContainerOwner owner)
				{
					return StorageSupport.GetOwnerContentLocation(owner, "AaltoGlobalImpact.OIP/SelectionCollection/" + "MasterCollection");
				}



                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }

				
		
				public static SelectionCollection CreateDefault()
				{
					var result = new SelectionCollection();
					return result;
				}

				/*
				public static SelectionCollection CreateDemoDefault()
				{
					SelectionCollection customDemo = null;
					SelectionCollection.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new SelectionCollection();
					result.CollectionContent.Add(Selection.CreateDemoDefault());
					//result.CollectionContent.Add(Selection.CreateDemoDefault());
					//result.CollectionContent.Add(Selection.CreateDemoDefault());
					return result;
				}
				*/

		
				[DataMember] public List<Selection> CollectionContent = new List<Selection>();
				private Selection[] _unmodified_CollectionContent;

				[DataMember] public bool IsCollectionFiltered;
				private bool _unmodified_IsCollectionFiltered;
				
				[DataMember] public List<string> OrderFilterIDList = new List<string>();
				private string[] _unmodified_OrderFilterIDList;

				public string SelectedIDCommaSeparated
				{
					get
					{
						string[] sourceArray;
						if (OrderFilterIDList != null)
							sourceArray = OrderFilterIDList.ToArray();
						else
							sourceArray = CollectionContent.Select(item => item.ID).ToArray();
						return String.Join(",", sourceArray);
					}
					set 
					{
						if (value == null)
							return;
						string[] valueArray = value.Split(',');
						OrderFilterIDList = new List<string>();
						OrderFilterIDList.AddRange(valueArray);
						OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
					}
				}

				public Selection[] GetIDSelectedArray()
				{
					if (IsCollectionFiltered == false || this.OrderFilterIDList == null)
						return CollectionContent.ToArray();
					return
						this.OrderFilterIDList.Select(id => CollectionContent.FirstOrDefault(item => item.ID == id)).Where(item => item != null).ToArray();
				}

				public void RefreshOrderAndFilterListFromContent()
                {
                    if (OrderFilterIDList == null)
                        return;
                    OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
                }

				public void ParsePropertyValue(string propertyName, string propertyValue)
				{
					switch(propertyName)
					{
						case "SelectedIDCommaSeparated":
							SelectedIDCommaSeparated = propertyValue;
							break;
						case "IsCollectionFiltered":
							IsCollectionFiltered = bool.Parse(propertyValue);
							break;
						default:
							throw new NotSupportedException("No ParsePropertyValue supported for property: " + propertyName);
					}
				}


				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					for(int i = 0; i < CollectionContent.Count; i++) // >
					{
						if(CollectionContent[i].ID == replacingObject.ID)
							CollectionContent[i] = (Selection )replacingObject;
						else { // Cannot have circular reference, so can be in else branch
							IInformationObject iObject = CollectionContent[i];
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}

				
				bool IInformationObject.IsInstanceTreeModified {
					get {
						bool collectionModified = CollectionContent.SequenceEqual(_unmodified_CollectionContent) == false;
						if(collectionModified)
							return true;
						//if((OrderFilterIDList == null && _unmodified_OrderFilterIDList != null) || _unmodified_OrderFilterIDList
						if(IsCollectionFiltered != _unmodified_IsCollectionFiltered)
							return true;
						// For non-master content
						foreach(IInformationObject item in CollectionContent)
						{
							bool itemTreeModified = item.IsInstanceTreeModified;
							if(itemTreeModified)
								return true;
						}
							
						return false;
					}
				}
				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_CollectionContent = CollectionContent.ToArray();
					_unmodified_IsCollectionFiltered = IsCollectionFiltered;
					if(OrderFilterIDList == null)
						_unmodified_OrderFilterIDList = null;
					else
						_unmodified_OrderFilterIDList = OrderFilterIDList.ToArray();
					foreach(IInformationObject iObject in CollectionContent)
						iObject.SetInstanceTreeValuesAsUnmodified();
				}

				private void CopyContentFrom(SelectionCollection sourceObject)
				{
					CollectionContent = sourceObject.CollectionContent;
					_unmodified_CollectionContent = sourceObject._unmodified_CollectionContent;
				}
				
				private object FindFromObjectTree(string objectId)
				{
					foreach(var item in CollectionContent)
					{
						object result = item.FindObjectByID(objectId);
						if(result != null)
							return result;
					}
					return null;
				}

				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					foreach(IInformationObject iObject in CollectionContent)
						iObject.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
				}


				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						bool doAdd = true;
						if(filterOnFalse != null)
							doAdd = filterOnFalse(iObject);
						if(doAdd) {
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
				}


			
			}
			[DataContract] 
			[Serializable]
			public partial class Selection : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public Selection()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "Selection";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/Selection/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(Selection), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<Selection>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: Selection");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(Selection), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/Selection/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/Selection/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((Selection) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(Selection));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static Selection DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(Selection));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (Selection) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "Selection", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "Selection", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref Selection customDemoObject);



				public static Selection CreateDefault()
				{
					var result = new Selection();
					return result;
				}
				/*
				public static Selection CreateDemoDefault()
				{
					Selection customDemo = null;
					Selection.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new Selection();
					result.TargetObjectID = @"Selection.TargetObjectID";

					result.TargetObjectName = @"Selection.TargetObjectName";

					result.TargetObjectDomain = @"Selection.TargetObjectDomain";

					result.SelectionCategory = @"Selection.SelectionCategory";

					result.TextValue = @"Selection.TextValue";

				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(TargetObjectID != _unmodified_TargetObjectID)
							return true;
						if(TargetObjectName != _unmodified_TargetObjectName)
							return true;
						if(TargetObjectDomain != _unmodified_TargetObjectDomain)
							return true;
						if(SelectionCategory != _unmodified_SelectionCategory)
							return true;
						if(TextValue != _unmodified_TextValue)
							return true;
						if(BooleanValue != _unmodified_BooleanValue)
							return true;
						if(DoubleValue != _unmodified_DoubleValue)
							return true;
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
				}


				private void CopyContentFrom(Selection sourceObject)
				{
					TargetObjectID = sourceObject.TargetObjectID;
					TargetObjectName = sourceObject.TargetObjectName;
					TargetObjectDomain = sourceObject.TargetObjectDomain;
					SelectionCategory = sourceObject.SelectionCategory;
					TextValue = sourceObject.TextValue;
					BooleanValue = sourceObject.BooleanValue;
					DoubleValue = sourceObject.DoubleValue;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_TargetObjectID = TargetObjectID;
					_unmodified_TargetObjectName = TargetObjectName;
					_unmodified_TargetObjectDomain = TargetObjectDomain;
					_unmodified_SelectionCategory = SelectionCategory;
					_unmodified_TextValue = TextValue;
					_unmodified_BooleanValue = BooleanValue;
					_unmodified_DoubleValue = DoubleValue;
				
				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "TargetObjectID":
							TargetObjectID = value;
							break;
						case "TargetObjectName":
							TargetObjectName = value;
							break;
						case "TargetObjectDomain":
							TargetObjectDomain = value;
							break;
						case "SelectionCategory":
							SelectionCategory = value;
							break;
						case "TextValue":
							TextValue = value;
							break;
						case "BooleanValue":
							BooleanValue = bool.Parse(value);
							break;
						case "DoubleValue":
							DoubleValue = double.Parse(value);
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string TargetObjectID { get; set; }
			private string _unmodified_TargetObjectID;
			[DataMember] 
			public string TargetObjectName { get; set; }
			private string _unmodified_TargetObjectName;
			[DataMember] 
			public string TargetObjectDomain { get; set; }
			private string _unmodified_TargetObjectDomain;
			[DataMember] 
			public string SelectionCategory { get; set; }
			private string _unmodified_SelectionCategory;
			[DataMember] 
			public string TextValue { get; set; }
			private string _unmodified_TextValue;
			[DataMember] 
			public bool BooleanValue { get; set; }
			private bool _unmodified_BooleanValue;
			[DataMember] 
			public double DoubleValue { get; set; }
			private double _unmodified_DoubleValue;
			
			}
			[DataContract] 
			[Serializable]
			public partial class TextContentCollection : IInformationObject , IInformationCollection
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public TextContentCollection()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "TextContentCollection";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/TextContentCollection/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(TextContentCollection), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<TextContentCollection>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: TextContentCollection");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(TextContentCollection), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/TextContentCollection/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/TextContentCollection/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((TextContentCollection) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(TextContentCollection));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static TextContentCollection DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(TextContentCollection));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (TextContentCollection) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "TextContentCollection", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "TextContentCollection", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref TextContentCollection customDemoObject);


				
				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
				}



				bool IInformationCollection.IsMasterCollection {
					get {
						return true;
					}
				}

				string IInformationCollection.GetMasterLocation()
				{
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					return GetMasterCollectionLocation(owner);
					
				}

				async Task<IInformationCollection> IInformationCollection.GetMasterInstanceAsync()
				{
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					return await GetMasterCollectionInstanceAsync(owner);
					
				}


				public string GetItemDirectory()
				{
					string dummyItemLocation = ObjectStorage.GetRelativeLocationFromID<TextContent>("dummy");
					string nonOwnerDirectoryLocation = StorageSupport.GetParentDirectoryTarget(dummyItemLocation);
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					string ownerDirectoryLocation = StorageSupport.GetOwnerContentLocation(owner, nonOwnerDirectoryLocation);
					return ownerDirectoryLocation;
				}

				public async Task RefreshContentAsync()
				{
					// DirectoryToMaster
					string itemDirectory = GetItemDirectory();
					IInformationObject[] informationObjects = await StorageSupport.RetrieveInformationObjectsAsync(itemDirectory,
																								 typeof(TextContent));
                    Array.ForEach(informationObjects, io => io.MasterETag = io.ETag);
					CollectionContent.Clear();
					CollectionContent.AddRange(informationObjects.Select(obj => (TextContent) obj));
            
				}

				public static async Task<TextContentCollection> GetMasterCollectionInstanceAsync(IContainerOwner owner)
				{
					return await ObjectStorage.RetrieveFromOwnerContentA<TextContentCollection>(owner, "MasterCollection");
				}
				public static string GetMasterCollectionLocation(IContainerOwner owner)
				{
					return StorageSupport.GetOwnerContentLocation(owner, "AaltoGlobalImpact.OIP/TextContentCollection/" + "MasterCollection");
				}



                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }

				
		
				public static TextContentCollection CreateDefault()
				{
					var result = new TextContentCollection();
					return result;
				}

				/*
				public static TextContentCollection CreateDemoDefault()
				{
					TextContentCollection customDemo = null;
					TextContentCollection.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new TextContentCollection();
					result.CollectionContent.Add(TextContent.CreateDemoDefault());
					//result.CollectionContent.Add(TextContent.CreateDemoDefault());
					//result.CollectionContent.Add(TextContent.CreateDemoDefault());
					return result;
				}
				*/

		
				[DataMember] public List<TextContent> CollectionContent = new List<TextContent>();
				private TextContent[] _unmodified_CollectionContent;

				[DataMember] public bool IsCollectionFiltered;
				private bool _unmodified_IsCollectionFiltered;
				
				[DataMember] public List<string> OrderFilterIDList = new List<string>();
				private string[] _unmodified_OrderFilterIDList;

				public string SelectedIDCommaSeparated
				{
					get
					{
						string[] sourceArray;
						if (OrderFilterIDList != null)
							sourceArray = OrderFilterIDList.ToArray();
						else
							sourceArray = CollectionContent.Select(item => item.ID).ToArray();
						return String.Join(",", sourceArray);
					}
					set 
					{
						if (value == null)
							return;
						string[] valueArray = value.Split(',');
						OrderFilterIDList = new List<string>();
						OrderFilterIDList.AddRange(valueArray);
						OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
					}
				}

				public TextContent[] GetIDSelectedArray()
				{
					if (IsCollectionFiltered == false || this.OrderFilterIDList == null)
						return CollectionContent.ToArray();
					return
						this.OrderFilterIDList.Select(id => CollectionContent.FirstOrDefault(item => item.ID == id)).Where(item => item != null).ToArray();
				}

				public void RefreshOrderAndFilterListFromContent()
                {
                    if (OrderFilterIDList == null)
                        return;
                    OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
                }

				public void ParsePropertyValue(string propertyName, string propertyValue)
				{
					switch(propertyName)
					{
						case "SelectedIDCommaSeparated":
							SelectedIDCommaSeparated = propertyValue;
							break;
						case "IsCollectionFiltered":
							IsCollectionFiltered = bool.Parse(propertyValue);
							break;
						default:
							throw new NotSupportedException("No ParsePropertyValue supported for property: " + propertyName);
					}
				}


				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					for(int i = 0; i < CollectionContent.Count; i++) // >
					{
						if(CollectionContent[i].ID == replacingObject.ID)
							CollectionContent[i] = (TextContent )replacingObject;
						else { // Cannot have circular reference, so can be in else branch
							IInformationObject iObject = CollectionContent[i];
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}

				
				bool IInformationObject.IsInstanceTreeModified {
					get {
						bool collectionModified = CollectionContent.SequenceEqual(_unmodified_CollectionContent) == false;
						if(collectionModified)
							return true;
						//if((OrderFilterIDList == null && _unmodified_OrderFilterIDList != null) || _unmodified_OrderFilterIDList
						if(IsCollectionFiltered != _unmodified_IsCollectionFiltered)
							return true;
						return false;
					}
				}
				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_CollectionContent = CollectionContent.ToArray();
					_unmodified_IsCollectionFiltered = IsCollectionFiltered;
					if(OrderFilterIDList == null)
						_unmodified_OrderFilterIDList = null;
					else
						_unmodified_OrderFilterIDList = OrderFilterIDList.ToArray();
					foreach(IInformationObject iObject in CollectionContent)
						iObject.SetInstanceTreeValuesAsUnmodified();
				}

				private void CopyContentFrom(TextContentCollection sourceObject)
				{
					CollectionContent = sourceObject.CollectionContent;
					_unmodified_CollectionContent = sourceObject._unmodified_CollectionContent;
				}
				
				private object FindFromObjectTree(string objectId)
				{
					foreach(var item in CollectionContent)
					{
						object result = item.FindObjectByID(objectId);
						if(result != null)
							return result;
					}
					return null;
				}

				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					if(searchWithinCurrentMasterOnly == false) {
						foreach(IInformationObject iObject in CollectionContent)
							iObject.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
					}
				}


				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						bool doAdd = true;
						if(filterOnFalse != null)
							doAdd = filterOnFalse(iObject);
						if(doAdd) {
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
				}


			
			}
			[DataContract] 
			[Serializable]
			public partial class TextContent : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public TextContent()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "TextContent";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/TextContent/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(TextContent), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<TextContent>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: TextContent");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(TextContent), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/TextContent/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/TextContent/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return true;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((TextContent) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(TextContent));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static TextContent DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(TextContent));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (TextContent) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "TextContent", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "TextContent", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref TextContent customDemoObject);



				public static TextContent CreateDefault()
				{
					var result = new TextContent();
					result.ImageData = MediaContent.CreateDefault();
					result.ArticleImageData = MediaContent.CreateDefault();
					result.Locations = AddressAndLocationCollection.CreateDefault();
					result.Categories = CategoryCollection.CreateDefault();
					return result;
				}
				/*
				public static TextContent CreateDemoDefault()
				{
					TextContent customDemo = null;
					TextContent.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new TextContent();
					result.ImageData = MediaContent.CreateDemoDefault();
					result.Title = @"TextContent.Title";

					result.OpenArticleTitle = @"TextContent.OpenArticleTitle";

					result.SubTitle = @"TextContent.SubTitle";

					result.Author = @"TextContent.Author";

					result.ArticleImageData = MediaContent.CreateDemoDefault();
					result.Excerpt = @"TextContent.Excerpt
TextContent.Excerpt
TextContent.Excerpt
TextContent.Excerpt
TextContent.Excerpt
";

					result.Body = @"TextContent.Body
TextContent.Body
TextContent.Body
TextContent.Body
TextContent.Body
";

					result.Locations = AddressAndLocationCollection.CreateDemoDefault();
					result.Categories = CategoryCollection.CreateDemoDefault();
					result.IFrameSources = @"TextContent.IFrameSources
TextContent.IFrameSources
TextContent.IFrameSources
TextContent.IFrameSources
TextContent.IFrameSources
";

					result.RawHtmlContent = @"TextContent.RawHtmlContent
TextContent.RawHtmlContent
TextContent.RawHtmlContent
TextContent.RawHtmlContent
TextContent.RawHtmlContent
";

				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
					if(ImageData != null) {
						((IInformationObject) ImageData).UpdateCollections(masterInstance);
					}

					if(ArticleImageData != null) {
						((IInformationObject) ArticleImageData).UpdateCollections(masterInstance);
					}

					if(masterInstance is AddressAndLocationCollection) {
						AaltoGlobalImpact.OIP.CollectionUpdateImplementation.Update_TextContent_Locations(this, localCollection:Locations, masterCollection:(AddressAndLocationCollection) masterInstance);
					} else if(Locations != null) {
						((IInformationObject) Locations).UpdateCollections(masterInstance);
					}
					if(masterInstance is CategoryCollection) {
						AaltoGlobalImpact.OIP.CollectionUpdateImplementation.Update_TextContent_Categories(this, localCollection:Categories, masterCollection:(CategoryCollection) masterInstance);
					} else if(Categories != null) {
						((IInformationObject) Categories).UpdateCollections(masterInstance);
					}
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					{ // Scoping block for variable name reusability
						IInformationObject item = ImageData;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					{ // Scoping block for variable name reusability
						IInformationObject item = ArticleImageData;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					{ // Scoping block for variable name reusability
						IInformationObject item = Locations;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					{ // Scoping block for variable name reusability
						IInformationObject item = Categories;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					{
						var item = ImageData;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = ArticleImageData;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = Locations;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = Categories;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					{
						var item = (IInformationObject) ImageData;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) ArticleImageData;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) Locations;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) Categories;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(ImageData != _unmodified_ImageData)
							return true;
						if(Title != _unmodified_Title)
							return true;
						if(OpenArticleTitle != _unmodified_OpenArticleTitle)
							return true;
						if(SubTitle != _unmodified_SubTitle)
							return true;
						if(Published != _unmodified_Published)
							return true;
						if(Author != _unmodified_Author)
							return true;
						if(ArticleImageData != _unmodified_ArticleImageData)
							return true;
						if(Excerpt != _unmodified_Excerpt)
							return true;
						if(Body != _unmodified_Body)
							return true;
						if(Locations != _unmodified_Locations)
							return true;
						if(Categories != _unmodified_Categories)
							return true;
						if(SortOrderNumber != _unmodified_SortOrderNumber)
							return true;
						if(IFrameSources != _unmodified_IFrameSources)
							return true;
						if(RawHtmlContent != _unmodified_RawHtmlContent)
							return true;
						{
							IInformationObject item = (IInformationObject) ImageData;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
						{
							IInformationObject item = (IInformationObject) ArticleImageData;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
						{
							IInformationObject item = (IInformationObject) Locations;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
						{
							IInformationObject item = (IInformationObject) Categories;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					if(ImageData != null) {
						if(ImageData.ID == replacingObject.ID)
							ImageData = (MediaContent) replacingObject;
						else {
							IInformationObject iObject = ImageData;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(ArticleImageData != null) {
						if(ArticleImageData.ID == replacingObject.ID)
							ArticleImageData = (MediaContent) replacingObject;
						else {
							IInformationObject iObject = ArticleImageData;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(Locations != null) {
						if(Locations.ID == replacingObject.ID)
							Locations = (AddressAndLocationCollection) replacingObject;
						else {
							IInformationObject iObject = Locations;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(Categories != null) {
						if(Categories.ID == replacingObject.ID)
							Categories = (CategoryCollection) replacingObject;
						else {
							IInformationObject iObject = Categories;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}


				private void CopyContentFrom(TextContent sourceObject)
				{
					ImageData = sourceObject.ImageData;
					Title = sourceObject.Title;
					OpenArticleTitle = sourceObject.OpenArticleTitle;
					SubTitle = sourceObject.SubTitle;
					Published = sourceObject.Published;
					Author = sourceObject.Author;
					ArticleImageData = sourceObject.ArticleImageData;
					Excerpt = sourceObject.Excerpt;
					Body = sourceObject.Body;
					Locations = sourceObject.Locations;
					Categories = sourceObject.Categories;
					SortOrderNumber = sourceObject.SortOrderNumber;
					IFrameSources = sourceObject.IFrameSources;
					RawHtmlContent = sourceObject.RawHtmlContent;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_Title = Title;
					_unmodified_OpenArticleTitle = OpenArticleTitle;
					_unmodified_SubTitle = SubTitle;
					_unmodified_Published = Published;
					_unmodified_Author = Author;
					_unmodified_Excerpt = Excerpt;
					_unmodified_Body = Body;
					_unmodified_SortOrderNumber = SortOrderNumber;
					_unmodified_IFrameSources = IFrameSources;
					_unmodified_RawHtmlContent = RawHtmlContent;
				
					_unmodified_ImageData = ImageData;
					if(ImageData != null)
						((IInformationObject) ImageData).SetInstanceTreeValuesAsUnmodified();

					_unmodified_ArticleImageData = ArticleImageData;
					if(ArticleImageData != null)
						((IInformationObject) ArticleImageData).SetInstanceTreeValuesAsUnmodified();

					_unmodified_Locations = Locations;
					if(Locations != null)
						((IInformationObject) Locations).SetInstanceTreeValuesAsUnmodified();

					_unmodified_Categories = Categories;
					if(Categories != null)
						((IInformationObject) Categories).SetInstanceTreeValuesAsUnmodified();

				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "Title":
							Title = value;
							break;
						case "OpenArticleTitle":
							OpenArticleTitle = value;
							break;
						case "SubTitle":
							SubTitle = value;
							break;
						case "Published":
							Published = DateTime.Parse(value);
							break;
						case "Author":
							Author = value;
							break;
						case "Excerpt":
							Excerpt = value;
							break;
						case "Body":
							Body = value;
							break;
						case "SortOrderNumber":
							SortOrderNumber = double.Parse(value);
							break;
						case "IFrameSources":
							IFrameSources = value;
							break;
						case "RawHtmlContent":
							RawHtmlContent = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public MediaContent ImageData { get; set; }
			private MediaContent _unmodified_ImageData;
			[DataMember] 
			public string Title { get; set; }
			private string _unmodified_Title;
			[DataMember] 
			public string OpenArticleTitle { get; set; }
			private string _unmodified_OpenArticleTitle;
			[DataMember] 
			public string SubTitle { get; set; }
			private string _unmodified_SubTitle;
			[DataMember] 
			public DateTime Published { get; set; }
			private DateTime _unmodified_Published;
			[DataMember] 
			public string Author { get; set; }
			private string _unmodified_Author;
			[DataMember] 
			public MediaContent ArticleImageData { get; set; }
			private MediaContent _unmodified_ArticleImageData;
			[DataMember] 
			public string Excerpt { get; set; }
			private string _unmodified_Excerpt;
			[DataMember] 
			public string Body { get; set; }
			private string _unmodified_Body;
			[DataMember] 
			public AddressAndLocationCollection Locations { get; set; }
			private AddressAndLocationCollection _unmodified_Locations;
			[DataMember] 
			public CategoryCollection Categories { get; set; }
			private CategoryCollection _unmodified_Categories;
			[DataMember] 
			public double SortOrderNumber { get; set; }
			private double _unmodified_SortOrderNumber;
			[DataMember] 
			public string IFrameSources { get; set; }
			private string _unmodified_IFrameSources;
			[DataMember] 
			public string RawHtmlContent { get; set; }
			private string _unmodified_RawHtmlContent;
			
			}
			[DataContract] 
			[Serializable]
			public partial class Map : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public Map()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "Map";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/Map/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(Map), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<Map>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: Map");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(Map), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/Map/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/Map/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((Map) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(Map));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static Map DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(Map));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (Map) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "Map", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "Map", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref Map customDemoObject);



				public static Map CreateDefault()
				{
					var result = new Map();
					return result;
				}
				/*
				public static Map CreateDemoDefault()
				{
					Map customDemo = null;
					Map.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new Map();
					result.Title = @"Map.Title";

				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(Title != _unmodified_Title)
							return true;
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
				}


				private void CopyContentFrom(Map sourceObject)
				{
					Title = sourceObject.Title;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_Title = Title;
				
				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "Title":
							Title = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string Title { get; set; }
			private string _unmodified_Title;
			
			}
			[DataContract] 
			[Serializable]
			public partial class MapCollection : IInformationObject , IInformationCollection
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public MapCollection()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "MapCollection";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/MapCollection/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(MapCollection), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<MapCollection>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: MapCollection");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(MapCollection), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/MapCollection/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/MapCollection/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((MapCollection) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(MapCollection));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static MapCollection DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(MapCollection));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (MapCollection) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "MapCollection", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "MapCollection", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref MapCollection customDemoObject);


				
				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.UpdateCollections(masterInstance);
					}
				}



				bool IInformationCollection.IsMasterCollection {
					get {
						return false;
					}
				}

				string IInformationCollection.GetMasterLocation()
				{
					throw new NotSupportedException("Master collection location only supported for master collections");
					
				}

				async Task<IInformationCollection> IInformationCollection.GetMasterInstanceAsync()
				{
					throw new NotSupportedException("Master collection instance only supported for master collections");
					
				}


				public string GetItemDirectory()
				{
					string dummyItemLocation = ObjectStorage.GetRelativeLocationFromID<Map>("dummy");
					string nonOwnerDirectoryLocation = StorageSupport.GetParentDirectoryTarget(dummyItemLocation);
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					string ownerDirectoryLocation = StorageSupport.GetOwnerContentLocation(owner, nonOwnerDirectoryLocation);
					return ownerDirectoryLocation;
				}

				public async Task RefreshContentAsync()
				{
				}




                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }

				
		
				public static MapCollection CreateDefault()
				{
					var result = new MapCollection();
					return result;
				}

				/*
				public static MapCollection CreateDemoDefault()
				{
					MapCollection customDemo = null;
					MapCollection.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new MapCollection();
					result.CollectionContent.Add(Map.CreateDemoDefault());
					//result.CollectionContent.Add(Map.CreateDemoDefault());
					//result.CollectionContent.Add(Map.CreateDemoDefault());
					return result;
				}
				*/

		
				[DataMember] public List<Map> CollectionContent = new List<Map>();
				private Map[] _unmodified_CollectionContent;

				[DataMember] public bool IsCollectionFiltered;
				private bool _unmodified_IsCollectionFiltered;
				
				[DataMember] public List<string> OrderFilterIDList = new List<string>();
				private string[] _unmodified_OrderFilterIDList;

				public string SelectedIDCommaSeparated
				{
					get
					{
						string[] sourceArray;
						if (OrderFilterIDList != null)
							sourceArray = OrderFilterIDList.ToArray();
						else
							sourceArray = CollectionContent.Select(item => item.ID).ToArray();
						return String.Join(",", sourceArray);
					}
					set 
					{
						if (value == null)
							return;
						string[] valueArray = value.Split(',');
						OrderFilterIDList = new List<string>();
						OrderFilterIDList.AddRange(valueArray);
						OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
					}
				}

				public Map[] GetIDSelectedArray()
				{
					if (IsCollectionFiltered == false || this.OrderFilterIDList == null)
						return CollectionContent.ToArray();
					return
						this.OrderFilterIDList.Select(id => CollectionContent.FirstOrDefault(item => item.ID == id)).Where(item => item != null).ToArray();
				}

				public void RefreshOrderAndFilterListFromContent()
                {
                    if (OrderFilterIDList == null)
                        return;
                    OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
                }

				public void ParsePropertyValue(string propertyName, string propertyValue)
				{
					switch(propertyName)
					{
						case "SelectedIDCommaSeparated":
							SelectedIDCommaSeparated = propertyValue;
							break;
						case "IsCollectionFiltered":
							IsCollectionFiltered = bool.Parse(propertyValue);
							break;
						default:
							throw new NotSupportedException("No ParsePropertyValue supported for property: " + propertyName);
					}
				}


				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					for(int i = 0; i < CollectionContent.Count; i++) // >
					{
						if(CollectionContent[i].ID == replacingObject.ID)
							CollectionContent[i] = (Map )replacingObject;
						else { // Cannot have circular reference, so can be in else branch
							IInformationObject iObject = CollectionContent[i];
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}

				
				bool IInformationObject.IsInstanceTreeModified {
					get {
						bool collectionModified = CollectionContent.SequenceEqual(_unmodified_CollectionContent) == false;
						if(collectionModified)
							return true;
						//if((OrderFilterIDList == null && _unmodified_OrderFilterIDList != null) || _unmodified_OrderFilterIDList
						if(IsCollectionFiltered != _unmodified_IsCollectionFiltered)
							return true;
						// For non-master content
						foreach(IInformationObject item in CollectionContent)
						{
							bool itemTreeModified = item.IsInstanceTreeModified;
							if(itemTreeModified)
								return true;
						}
							
						return false;
					}
				}
				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_CollectionContent = CollectionContent.ToArray();
					_unmodified_IsCollectionFiltered = IsCollectionFiltered;
					if(OrderFilterIDList == null)
						_unmodified_OrderFilterIDList = null;
					else
						_unmodified_OrderFilterIDList = OrderFilterIDList.ToArray();
					foreach(IInformationObject iObject in CollectionContent)
						iObject.SetInstanceTreeValuesAsUnmodified();
				}

				private void CopyContentFrom(MapCollection sourceObject)
				{
					CollectionContent = sourceObject.CollectionContent;
					_unmodified_CollectionContent = sourceObject._unmodified_CollectionContent;
				}
				
				private object FindFromObjectTree(string objectId)
				{
					foreach(var item in CollectionContent)
					{
						object result = item.FindObjectByID(objectId);
						if(result != null)
							return result;
					}
					return null;
				}

				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					foreach(IInformationObject iObject in CollectionContent)
						iObject.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
				}


				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						bool doAdd = true;
						if(filterOnFalse != null)
							doAdd = filterOnFalse(iObject);
						if(doAdd) {
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
				}


			
			}
			[DataContract] 
			[Serializable]
			public partial class MapResult : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public MapResult()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "MapResult";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/MapResult/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(MapResult), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<MapResult>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: MapResult");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(MapResult), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/MapResult/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/MapResult/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((MapResult) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(MapResult));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static MapResult DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(MapResult));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (MapResult) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "MapResult", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "MapResult", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref MapResult customDemoObject);



				public static MapResult CreateDefault()
				{
					var result = new MapResult();
					result.Location = Location.CreateDefault();
					return result;
				}
				/*
				public static MapResult CreateDemoDefault()
				{
					MapResult customDemo = null;
					MapResult.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new MapResult();
					result.Location = Location.CreateDemoDefault();
				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
					if(Location != null) {
						((IInformationObject) Location).UpdateCollections(masterInstance);
					}

				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					{ // Scoping block for variable name reusability
						IInformationObject item = Location;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					{
						var item = Location;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					{
						var item = (IInformationObject) Location;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(Location != _unmodified_Location)
							return true;
						{
							IInformationObject item = (IInformationObject) Location;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					if(Location != null) {
						if(Location.ID == replacingObject.ID)
							Location = (Location) replacingObject;
						else {
							IInformationObject iObject = Location;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}


				private void CopyContentFrom(MapResult sourceObject)
				{
					Location = sourceObject.Location;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
				
					_unmodified_Location = Location;
					if(Location != null)
						((IInformationObject) Location).SetInstanceTreeValuesAsUnmodified();

				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public Location Location { get; set; }
			private Location _unmodified_Location;
			
			}
			[DataContract] 
			[Serializable]
			public partial class MapResultCollection : IInformationObject , IInformationCollection
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public MapResultCollection()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "MapResultCollection";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/MapResultCollection/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(MapResultCollection), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<MapResultCollection>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: MapResultCollection");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(MapResultCollection), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/MapResultCollection/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/MapResultCollection/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((MapResultCollection) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(MapResultCollection));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static MapResultCollection DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(MapResultCollection));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (MapResultCollection) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "MapResultCollection", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "MapResultCollection", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref MapResultCollection customDemoObject);


				
				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.UpdateCollections(masterInstance);
					}
				}



				bool IInformationCollection.IsMasterCollection {
					get {
						return false;
					}
				}

				string IInformationCollection.GetMasterLocation()
				{
					throw new NotSupportedException("Master collection location only supported for master collections");
					
				}

				async Task<IInformationCollection> IInformationCollection.GetMasterInstanceAsync()
				{
					throw new NotSupportedException("Master collection instance only supported for master collections");
					
				}


				public string GetItemDirectory()
				{
					string dummyItemLocation = ObjectStorage.GetRelativeLocationFromID<MapResult>("dummy");
					string nonOwnerDirectoryLocation = StorageSupport.GetParentDirectoryTarget(dummyItemLocation);
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					string ownerDirectoryLocation = StorageSupport.GetOwnerContentLocation(owner, nonOwnerDirectoryLocation);
					return ownerDirectoryLocation;
				}

				public async Task RefreshContentAsync()
				{
				}




                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }

				
		
				public static MapResultCollection CreateDefault()
				{
					var result = new MapResultCollection();
					return result;
				}

				/*
				public static MapResultCollection CreateDemoDefault()
				{
					MapResultCollection customDemo = null;
					MapResultCollection.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new MapResultCollection();
					result.CollectionContent.Add(MapResult.CreateDemoDefault());
					//result.CollectionContent.Add(MapResult.CreateDemoDefault());
					//result.CollectionContent.Add(MapResult.CreateDemoDefault());
					return result;
				}
				*/

		
				[DataMember] public List<MapResult> CollectionContent = new List<MapResult>();
				private MapResult[] _unmodified_CollectionContent;

				[DataMember] public bool IsCollectionFiltered;
				private bool _unmodified_IsCollectionFiltered;
				
				[DataMember] public List<string> OrderFilterIDList = new List<string>();
				private string[] _unmodified_OrderFilterIDList;

				public string SelectedIDCommaSeparated
				{
					get
					{
						string[] sourceArray;
						if (OrderFilterIDList != null)
							sourceArray = OrderFilterIDList.ToArray();
						else
							sourceArray = CollectionContent.Select(item => item.ID).ToArray();
						return String.Join(",", sourceArray);
					}
					set 
					{
						if (value == null)
							return;
						string[] valueArray = value.Split(',');
						OrderFilterIDList = new List<string>();
						OrderFilterIDList.AddRange(valueArray);
						OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
					}
				}

				public MapResult[] GetIDSelectedArray()
				{
					if (IsCollectionFiltered == false || this.OrderFilterIDList == null)
						return CollectionContent.ToArray();
					return
						this.OrderFilterIDList.Select(id => CollectionContent.FirstOrDefault(item => item.ID == id)).Where(item => item != null).ToArray();
				}

				public void RefreshOrderAndFilterListFromContent()
                {
                    if (OrderFilterIDList == null)
                        return;
                    OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
                }

				public void ParsePropertyValue(string propertyName, string propertyValue)
				{
					switch(propertyName)
					{
						case "SelectedIDCommaSeparated":
							SelectedIDCommaSeparated = propertyValue;
							break;
						case "IsCollectionFiltered":
							IsCollectionFiltered = bool.Parse(propertyValue);
							break;
						default:
							throw new NotSupportedException("No ParsePropertyValue supported for property: " + propertyName);
					}
				}


				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					for(int i = 0; i < CollectionContent.Count; i++) // >
					{
						if(CollectionContent[i].ID == replacingObject.ID)
							CollectionContent[i] = (MapResult )replacingObject;
						else { // Cannot have circular reference, so can be in else branch
							IInformationObject iObject = CollectionContent[i];
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}

				
				bool IInformationObject.IsInstanceTreeModified {
					get {
						bool collectionModified = CollectionContent.SequenceEqual(_unmodified_CollectionContent) == false;
						if(collectionModified)
							return true;
						//if((OrderFilterIDList == null && _unmodified_OrderFilterIDList != null) || _unmodified_OrderFilterIDList
						if(IsCollectionFiltered != _unmodified_IsCollectionFiltered)
							return true;
						// For non-master content
						foreach(IInformationObject item in CollectionContent)
						{
							bool itemTreeModified = item.IsInstanceTreeModified;
							if(itemTreeModified)
								return true;
						}
							
						return false;
					}
				}
				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_CollectionContent = CollectionContent.ToArray();
					_unmodified_IsCollectionFiltered = IsCollectionFiltered;
					if(OrderFilterIDList == null)
						_unmodified_OrderFilterIDList = null;
					else
						_unmodified_OrderFilterIDList = OrderFilterIDList.ToArray();
					foreach(IInformationObject iObject in CollectionContent)
						iObject.SetInstanceTreeValuesAsUnmodified();
				}

				private void CopyContentFrom(MapResultCollection sourceObject)
				{
					CollectionContent = sourceObject.CollectionContent;
					_unmodified_CollectionContent = sourceObject._unmodified_CollectionContent;
				}
				
				private object FindFromObjectTree(string objectId)
				{
					foreach(var item in CollectionContent)
					{
						object result = item.FindObjectByID(objectId);
						if(result != null)
							return result;
					}
					return null;
				}

				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					foreach(IInformationObject iObject in CollectionContent)
						iObject.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
				}


				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						bool doAdd = true;
						if(filterOnFalse != null)
							doAdd = filterOnFalse(iObject);
						if(doAdd) {
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
				}


			
			}
			[DataContract] 
			[Serializable]
			public partial class MapResultsCollection : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public MapResultsCollection()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "MapResultsCollection";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/MapResultsCollection/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(MapResultsCollection), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<MapResultsCollection>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: MapResultsCollection");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(MapResultsCollection), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/MapResultsCollection/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/MapResultsCollection/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((MapResultsCollection) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(MapResultsCollection));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static MapResultsCollection DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(MapResultsCollection));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (MapResultsCollection) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "MapResultsCollection", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "MapResultsCollection", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref MapResultsCollection customDemoObject);



				public static MapResultsCollection CreateDefault()
				{
					var result = new MapResultsCollection();
					result.ResultByDate = MapResultCollection.CreateDefault();
					result.ResultByAuthor = MapResultCollection.CreateDefault();
					result.ResultByProximity = MapResultCollection.CreateDefault();
					return result;
				}
				/*
				public static MapResultsCollection CreateDemoDefault()
				{
					MapResultsCollection customDemo = null;
					MapResultsCollection.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new MapResultsCollection();
					result.ResultByDate = MapResultCollection.CreateDemoDefault();
					result.ResultByAuthor = MapResultCollection.CreateDemoDefault();
					result.ResultByProximity = MapResultCollection.CreateDemoDefault();
				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
					if(ResultByDate != null) {
						((IInformationObject) ResultByDate).UpdateCollections(masterInstance);
					}

					if(ResultByAuthor != null) {
						((IInformationObject) ResultByAuthor).UpdateCollections(masterInstance);
					}

					if(ResultByProximity != null) {
						((IInformationObject) ResultByProximity).UpdateCollections(masterInstance);
					}

				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					{ // Scoping block for variable name reusability
						IInformationObject item = ResultByDate;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					{ // Scoping block for variable name reusability
						IInformationObject item = ResultByAuthor;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					{ // Scoping block for variable name reusability
						IInformationObject item = ResultByProximity;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					{
						var item = ResultByDate;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = ResultByAuthor;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = ResultByProximity;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					{
						var item = (IInformationObject) ResultByDate;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) ResultByAuthor;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) ResultByProximity;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(ResultByDate != _unmodified_ResultByDate)
							return true;
						if(ResultByAuthor != _unmodified_ResultByAuthor)
							return true;
						if(ResultByProximity != _unmodified_ResultByProximity)
							return true;
						{
							IInformationObject item = (IInformationObject) ResultByDate;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
						{
							IInformationObject item = (IInformationObject) ResultByAuthor;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
						{
							IInformationObject item = (IInformationObject) ResultByProximity;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					if(ResultByDate != null) {
						if(ResultByDate.ID == replacingObject.ID)
							ResultByDate = (MapResultCollection) replacingObject;
						else {
							IInformationObject iObject = ResultByDate;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(ResultByAuthor != null) {
						if(ResultByAuthor.ID == replacingObject.ID)
							ResultByAuthor = (MapResultCollection) replacingObject;
						else {
							IInformationObject iObject = ResultByAuthor;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(ResultByProximity != null) {
						if(ResultByProximity.ID == replacingObject.ID)
							ResultByProximity = (MapResultCollection) replacingObject;
						else {
							IInformationObject iObject = ResultByProximity;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}


				private void CopyContentFrom(MapResultsCollection sourceObject)
				{
					ResultByDate = sourceObject.ResultByDate;
					ResultByAuthor = sourceObject.ResultByAuthor;
					ResultByProximity = sourceObject.ResultByProximity;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
				
					_unmodified_ResultByDate = ResultByDate;
					if(ResultByDate != null)
						((IInformationObject) ResultByDate).SetInstanceTreeValuesAsUnmodified();

					_unmodified_ResultByAuthor = ResultByAuthor;
					if(ResultByAuthor != null)
						((IInformationObject) ResultByAuthor).SetInstanceTreeValuesAsUnmodified();

					_unmodified_ResultByProximity = ResultByProximity;
					if(ResultByProximity != null)
						((IInformationObject) ResultByProximity).SetInstanceTreeValuesAsUnmodified();

				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public MapResultCollection ResultByDate { get; set; }
			private MapResultCollection _unmodified_ResultByDate;
			[DataMember] 
			public MapResultCollection ResultByAuthor { get; set; }
			private MapResultCollection _unmodified_ResultByAuthor;
			[DataMember] 
			public MapResultCollection ResultByProximity { get; set; }
			private MapResultCollection _unmodified_ResultByProximity;
			
			}
			[DataContract] 
			[Serializable]
			public partial class Video : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public Video()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "Video";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/Video/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(Video), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<Video>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: Video");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(Video), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/Video/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/Video/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((Video) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(Video));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static Video DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(Video));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (Video) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "Video", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "Video", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref Video customDemoObject);



				public static Video CreateDefault()
				{
					var result = new Video();
					result.VideoData = MediaContent.CreateDefault();
					return result;
				}
				/*
				public static Video CreateDemoDefault()
				{
					Video customDemo = null;
					Video.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new Video();
					result.VideoData = MediaContent.CreateDemoDefault();
					result.Title = @"Video.Title";

					result.Caption = @"Video.Caption";

				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
					if(VideoData != null) {
						((IInformationObject) VideoData).UpdateCollections(masterInstance);
					}

				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					{ // Scoping block for variable name reusability
						IInformationObject item = VideoData;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					{
						var item = VideoData;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					{
						var item = (IInformationObject) VideoData;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(VideoData != _unmodified_VideoData)
							return true;
						if(Title != _unmodified_Title)
							return true;
						if(Caption != _unmodified_Caption)
							return true;
						{
							IInformationObject item = (IInformationObject) VideoData;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					if(VideoData != null) {
						if(VideoData.ID == replacingObject.ID)
							VideoData = (MediaContent) replacingObject;
						else {
							IInformationObject iObject = VideoData;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}


				private void CopyContentFrom(Video sourceObject)
				{
					VideoData = sourceObject.VideoData;
					Title = sourceObject.Title;
					Caption = sourceObject.Caption;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_Title = Title;
					_unmodified_Caption = Caption;
				
					_unmodified_VideoData = VideoData;
					if(VideoData != null)
						((IInformationObject) VideoData).SetInstanceTreeValuesAsUnmodified();

				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "Title":
							Title = value;
							break;
						case "Caption":
							Caption = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public MediaContent VideoData { get; set; }
			private MediaContent _unmodified_VideoData;
			[DataMember] 
			public string Title { get; set; }
			private string _unmodified_Title;
			[DataMember] 
			public string Caption { get; set; }
			private string _unmodified_Caption;
			
			}
			[DataContract] 
			[Serializable]
			public partial class ImageCollection : IInformationObject , IInformationCollection
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public ImageCollection()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "ImageCollection";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/ImageCollection/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(ImageCollection), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<ImageCollection>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: ImageCollection");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(ImageCollection), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/ImageCollection/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/ImageCollection/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((ImageCollection) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(ImageCollection));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static ImageCollection DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(ImageCollection));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (ImageCollection) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "ImageCollection", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "ImageCollection", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref ImageCollection customDemoObject);


				
				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
				}



				bool IInformationCollection.IsMasterCollection {
					get {
						return true;
					}
				}

				string IInformationCollection.GetMasterLocation()
				{
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					return GetMasterCollectionLocation(owner);
					
				}

				async Task<IInformationCollection> IInformationCollection.GetMasterInstanceAsync()
				{
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					return await GetMasterCollectionInstanceAsync(owner);
					
				}


				public string GetItemDirectory()
				{
					string dummyItemLocation = ObjectStorage.GetRelativeLocationFromID<Image>("dummy");
					string nonOwnerDirectoryLocation = StorageSupport.GetParentDirectoryTarget(dummyItemLocation);
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					string ownerDirectoryLocation = StorageSupport.GetOwnerContentLocation(owner, nonOwnerDirectoryLocation);
					return ownerDirectoryLocation;
				}

				public async Task RefreshContentAsync()
				{
					// DirectoryToMaster
					string itemDirectory = GetItemDirectory();
					IInformationObject[] informationObjects = await StorageSupport.RetrieveInformationObjectsAsync(itemDirectory,
																								 typeof(Image));
                    Array.ForEach(informationObjects, io => io.MasterETag = io.ETag);
					CollectionContent.Clear();
					CollectionContent.AddRange(informationObjects.Select(obj => (Image) obj));
            
				}

				public static async Task<ImageCollection> GetMasterCollectionInstanceAsync(IContainerOwner owner)
				{
					return await ObjectStorage.RetrieveFromOwnerContentA<ImageCollection>(owner, "MasterCollection");
				}
				public static string GetMasterCollectionLocation(IContainerOwner owner)
				{
					return StorageSupport.GetOwnerContentLocation(owner, "AaltoGlobalImpact.OIP/ImageCollection/" + "MasterCollection");
				}



                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }

				
		
				public static ImageCollection CreateDefault()
				{
					var result = new ImageCollection();
					return result;
				}

				/*
				public static ImageCollection CreateDemoDefault()
				{
					ImageCollection customDemo = null;
					ImageCollection.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new ImageCollection();
					result.CollectionContent.Add(Image.CreateDemoDefault());
					//result.CollectionContent.Add(Image.CreateDemoDefault());
					//result.CollectionContent.Add(Image.CreateDemoDefault());
					return result;
				}
				*/

		
				[DataMember] public List<Image> CollectionContent = new List<Image>();
				private Image[] _unmodified_CollectionContent;

				[DataMember] public bool IsCollectionFiltered;
				private bool _unmodified_IsCollectionFiltered;
				
				[DataMember] public List<string> OrderFilterIDList = new List<string>();
				private string[] _unmodified_OrderFilterIDList;

				public string SelectedIDCommaSeparated
				{
					get
					{
						string[] sourceArray;
						if (OrderFilterIDList != null)
							sourceArray = OrderFilterIDList.ToArray();
						else
							sourceArray = CollectionContent.Select(item => item.ID).ToArray();
						return String.Join(",", sourceArray);
					}
					set 
					{
						if (value == null)
							return;
						string[] valueArray = value.Split(',');
						OrderFilterIDList = new List<string>();
						OrderFilterIDList.AddRange(valueArray);
						OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
					}
				}

				public Image[] GetIDSelectedArray()
				{
					if (IsCollectionFiltered == false || this.OrderFilterIDList == null)
						return CollectionContent.ToArray();
					return
						this.OrderFilterIDList.Select(id => CollectionContent.FirstOrDefault(item => item.ID == id)).Where(item => item != null).ToArray();
				}

				public void RefreshOrderAndFilterListFromContent()
                {
                    if (OrderFilterIDList == null)
                        return;
                    OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
                }

				public void ParsePropertyValue(string propertyName, string propertyValue)
				{
					switch(propertyName)
					{
						case "SelectedIDCommaSeparated":
							SelectedIDCommaSeparated = propertyValue;
							break;
						case "IsCollectionFiltered":
							IsCollectionFiltered = bool.Parse(propertyValue);
							break;
						default:
							throw new NotSupportedException("No ParsePropertyValue supported for property: " + propertyName);
					}
				}


				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					for(int i = 0; i < CollectionContent.Count; i++) // >
					{
						if(CollectionContent[i].ID == replacingObject.ID)
							CollectionContent[i] = (Image )replacingObject;
						else { // Cannot have circular reference, so can be in else branch
							IInformationObject iObject = CollectionContent[i];
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}

				
				bool IInformationObject.IsInstanceTreeModified {
					get {
						bool collectionModified = CollectionContent.SequenceEqual(_unmodified_CollectionContent) == false;
						if(collectionModified)
							return true;
						//if((OrderFilterIDList == null && _unmodified_OrderFilterIDList != null) || _unmodified_OrderFilterIDList
						if(IsCollectionFiltered != _unmodified_IsCollectionFiltered)
							return true;
						return false;
					}
				}
				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_CollectionContent = CollectionContent.ToArray();
					_unmodified_IsCollectionFiltered = IsCollectionFiltered;
					if(OrderFilterIDList == null)
						_unmodified_OrderFilterIDList = null;
					else
						_unmodified_OrderFilterIDList = OrderFilterIDList.ToArray();
					foreach(IInformationObject iObject in CollectionContent)
						iObject.SetInstanceTreeValuesAsUnmodified();
				}

				private void CopyContentFrom(ImageCollection sourceObject)
				{
					CollectionContent = sourceObject.CollectionContent;
					_unmodified_CollectionContent = sourceObject._unmodified_CollectionContent;
				}
				
				private object FindFromObjectTree(string objectId)
				{
					foreach(var item in CollectionContent)
					{
						object result = item.FindObjectByID(objectId);
						if(result != null)
							return result;
					}
					return null;
				}

				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					if(searchWithinCurrentMasterOnly == false) {
						foreach(IInformationObject iObject in CollectionContent)
							iObject.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
					}
				}


				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						bool doAdd = true;
						if(filterOnFalse != null)
							doAdd = filterOnFalse(iObject);
						if(doAdd) {
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
				}


			
			}
			[DataContract] 
			[Serializable]
			public partial class Image : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public Image()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "Image";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/Image/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(Image), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<Image>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: Image");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(Image), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/Image/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/Image/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return true;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((Image) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(Image));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static Image DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(Image));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (Image) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "Image", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "Image", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref Image customDemoObject);



				public static Image CreateDefault()
				{
					var result = new Image();
					result.ReferenceToInformation = ReferenceToInformation.CreateDefault();
					result.ImageData = MediaContent.CreateDefault();
					result.Locations = AddressAndLocationCollection.CreateDefault();
					result.Categories = CategoryCollection.CreateDefault();
					return result;
				}
				/*
				public static Image CreateDemoDefault()
				{
					Image customDemo = null;
					Image.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new Image();
					result.ReferenceToInformation = ReferenceToInformation.CreateDemoDefault();
					result.ImageData = MediaContent.CreateDemoDefault();
					result.Title = @"Image.Title";

					result.Caption = @"Image.Caption";

					result.Description = @"Image.Description
Image.Description
Image.Description
Image.Description
Image.Description
";

					result.Locations = AddressAndLocationCollection.CreateDemoDefault();
					result.Categories = CategoryCollection.CreateDemoDefault();
				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
					if(ImageData != null) {
						((IInformationObject) ImageData).UpdateCollections(masterInstance);
					}

					if(masterInstance is AddressAndLocationCollection) {
						AaltoGlobalImpact.OIP.CollectionUpdateImplementation.Update_Image_Locations(this, localCollection:Locations, masterCollection:(AddressAndLocationCollection) masterInstance);
					} else if(Locations != null) {
						((IInformationObject) Locations).UpdateCollections(masterInstance);
					}
					if(masterInstance is CategoryCollection) {
						AaltoGlobalImpact.OIP.CollectionUpdateImplementation.Update_Image_Categories(this, localCollection:Categories, masterCollection:(CategoryCollection) masterInstance);
					} else if(Categories != null) {
						((IInformationObject) Categories).UpdateCollections(masterInstance);
					}
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					{ // Scoping block for variable name reusability
						IInformationObject item = ImageData;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					{ // Scoping block for variable name reusability
						IInformationObject item = Locations;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					{ // Scoping block for variable name reusability
						IInformationObject item = Categories;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					if(searchWithinCurrentMasterOnly == false)
					{
						{
							IInformationObject item = ReferenceToInformation;
							if(item != null)
							{
								item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
							}
						}
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					{
						var item = ReferenceToInformation;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = ImageData;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = Locations;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = Categories;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					{
						var item = (IInformationObject) ReferenceToInformation;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) ImageData;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) Locations;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) Categories;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(ReferenceToInformation != _unmodified_ReferenceToInformation)
							return true;
						if(ImageData != _unmodified_ImageData)
							return true;
						if(Title != _unmodified_Title)
							return true;
						if(Caption != _unmodified_Caption)
							return true;
						if(Description != _unmodified_Description)
							return true;
						if(Locations != _unmodified_Locations)
							return true;
						if(Categories != _unmodified_Categories)
							return true;
						{
							IInformationObject item = (IInformationObject) ImageData;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
						{
							IInformationObject item = (IInformationObject) Locations;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
						{
							IInformationObject item = (IInformationObject) Categories;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					if(ReferenceToInformation != null) {
						if(ReferenceToInformation.ID == replacingObject.ID)
							ReferenceToInformation = (ReferenceToInformation) replacingObject;
						else {
							IInformationObject iObject = ReferenceToInformation;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(ImageData != null) {
						if(ImageData.ID == replacingObject.ID)
							ImageData = (MediaContent) replacingObject;
						else {
							IInformationObject iObject = ImageData;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(Locations != null) {
						if(Locations.ID == replacingObject.ID)
							Locations = (AddressAndLocationCollection) replacingObject;
						else {
							IInformationObject iObject = Locations;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(Categories != null) {
						if(Categories.ID == replacingObject.ID)
							Categories = (CategoryCollection) replacingObject;
						else {
							IInformationObject iObject = Categories;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}


				private void CopyContentFrom(Image sourceObject)
				{
					ReferenceToInformation = sourceObject.ReferenceToInformation;
					ImageData = sourceObject.ImageData;
					Title = sourceObject.Title;
					Caption = sourceObject.Caption;
					Description = sourceObject.Description;
					Locations = sourceObject.Locations;
					Categories = sourceObject.Categories;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_Title = Title;
					_unmodified_Caption = Caption;
					_unmodified_Description = Description;
				
					_unmodified_ReferenceToInformation = ReferenceToInformation;
					if(ReferenceToInformation != null)
						((IInformationObject) ReferenceToInformation).SetInstanceTreeValuesAsUnmodified();

					_unmodified_ImageData = ImageData;
					if(ImageData != null)
						((IInformationObject) ImageData).SetInstanceTreeValuesAsUnmodified();

					_unmodified_Locations = Locations;
					if(Locations != null)
						((IInformationObject) Locations).SetInstanceTreeValuesAsUnmodified();

					_unmodified_Categories = Categories;
					if(Categories != null)
						((IInformationObject) Categories).SetInstanceTreeValuesAsUnmodified();

				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "Title":
							Title = value;
							break;
						case "Caption":
							Caption = value;
							break;
						case "Description":
							Description = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public ReferenceToInformation ReferenceToInformation { get; set; }
			private ReferenceToInformation _unmodified_ReferenceToInformation;
			[DataMember] 
			public MediaContent ImageData { get; set; }
			private MediaContent _unmodified_ImageData;
			[DataMember] 
			public string Title { get; set; }
			private string _unmodified_Title;
			[DataMember] 
			public string Caption { get; set; }
			private string _unmodified_Caption;
			[DataMember] 
			public string Description { get; set; }
			private string _unmodified_Description;
			[DataMember] 
			public AddressAndLocationCollection Locations { get; set; }
			private AddressAndLocationCollection _unmodified_Locations;
			[DataMember] 
			public CategoryCollection Categories { get; set; }
			private CategoryCollection _unmodified_Categories;
			
			}
			[DataContract] 
			[Serializable]
			public partial class BinaryFileCollection : IInformationObject , IInformationCollection
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public BinaryFileCollection()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "BinaryFileCollection";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/BinaryFileCollection/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(BinaryFileCollection), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<BinaryFileCollection>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: BinaryFileCollection");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(BinaryFileCollection), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/BinaryFileCollection/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/BinaryFileCollection/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((BinaryFileCollection) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(BinaryFileCollection));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static BinaryFileCollection DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(BinaryFileCollection));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (BinaryFileCollection) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "BinaryFileCollection", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "BinaryFileCollection", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref BinaryFileCollection customDemoObject);


				
				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.UpdateCollections(masterInstance);
					}
				}



				bool IInformationCollection.IsMasterCollection {
					get {
						return true;
					}
				}

				string IInformationCollection.GetMasterLocation()
				{
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					return GetMasterCollectionLocation(owner);
					
				}

				async Task<IInformationCollection> IInformationCollection.GetMasterInstanceAsync()
				{
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					return await GetMasterCollectionInstanceAsync(owner);
					
				}


				public string GetItemDirectory()
				{
					string dummyItemLocation = ObjectStorage.GetRelativeLocationFromID<BinaryFile>("dummy");
					string nonOwnerDirectoryLocation = StorageSupport.GetParentDirectoryTarget(dummyItemLocation);
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					string ownerDirectoryLocation = StorageSupport.GetOwnerContentLocation(owner, nonOwnerDirectoryLocation);
					return ownerDirectoryLocation;
				}

				public async Task RefreshContentAsync()
				{
					// DirectoryToMaster
					string itemDirectory = GetItemDirectory();
					IInformationObject[] informationObjects = await StorageSupport.RetrieveInformationObjectsAsync(itemDirectory,
																								 typeof(BinaryFile));
                    Array.ForEach(informationObjects, io => io.MasterETag = io.ETag);
					CollectionContent.Clear();
					CollectionContent.AddRange(informationObjects.Select(obj => (BinaryFile) obj));
            
				}

				public static async Task<BinaryFileCollection> GetMasterCollectionInstanceAsync(IContainerOwner owner)
				{
					return await ObjectStorage.RetrieveFromOwnerContentA<BinaryFileCollection>(owner, "MasterCollection");
				}
				public static string GetMasterCollectionLocation(IContainerOwner owner)
				{
					return StorageSupport.GetOwnerContentLocation(owner, "AaltoGlobalImpact.OIP/BinaryFileCollection/" + "MasterCollection");
				}



                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }

				
		
				public static BinaryFileCollection CreateDefault()
				{
					var result = new BinaryFileCollection();
					return result;
				}

				/*
				public static BinaryFileCollection CreateDemoDefault()
				{
					BinaryFileCollection customDemo = null;
					BinaryFileCollection.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new BinaryFileCollection();
					result.CollectionContent.Add(BinaryFile.CreateDemoDefault());
					//result.CollectionContent.Add(BinaryFile.CreateDemoDefault());
					//result.CollectionContent.Add(BinaryFile.CreateDemoDefault());
					return result;
				}
				*/

		
				[DataMember] public List<BinaryFile> CollectionContent = new List<BinaryFile>();
				private BinaryFile[] _unmodified_CollectionContent;

				[DataMember] public bool IsCollectionFiltered;
				private bool _unmodified_IsCollectionFiltered;
				
				[DataMember] public List<string> OrderFilterIDList = new List<string>();
				private string[] _unmodified_OrderFilterIDList;

				public string SelectedIDCommaSeparated
				{
					get
					{
						string[] sourceArray;
						if (OrderFilterIDList != null)
							sourceArray = OrderFilterIDList.ToArray();
						else
							sourceArray = CollectionContent.Select(item => item.ID).ToArray();
						return String.Join(",", sourceArray);
					}
					set 
					{
						if (value == null)
							return;
						string[] valueArray = value.Split(',');
						OrderFilterIDList = new List<string>();
						OrderFilterIDList.AddRange(valueArray);
						OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
					}
				}

				public BinaryFile[] GetIDSelectedArray()
				{
					if (IsCollectionFiltered == false || this.OrderFilterIDList == null)
						return CollectionContent.ToArray();
					return
						this.OrderFilterIDList.Select(id => CollectionContent.FirstOrDefault(item => item.ID == id)).Where(item => item != null).ToArray();
				}

				public void RefreshOrderAndFilterListFromContent()
                {
                    if (OrderFilterIDList == null)
                        return;
                    OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
                }

				public void ParsePropertyValue(string propertyName, string propertyValue)
				{
					switch(propertyName)
					{
						case "SelectedIDCommaSeparated":
							SelectedIDCommaSeparated = propertyValue;
							break;
						case "IsCollectionFiltered":
							IsCollectionFiltered = bool.Parse(propertyValue);
							break;
						default:
							throw new NotSupportedException("No ParsePropertyValue supported for property: " + propertyName);
					}
				}


				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					for(int i = 0; i < CollectionContent.Count; i++) // >
					{
						if(CollectionContent[i].ID == replacingObject.ID)
							CollectionContent[i] = (BinaryFile )replacingObject;
						else { // Cannot have circular reference, so can be in else branch
							IInformationObject iObject = CollectionContent[i];
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}

				
				bool IInformationObject.IsInstanceTreeModified {
					get {
						bool collectionModified = CollectionContent.SequenceEqual(_unmodified_CollectionContent) == false;
						if(collectionModified)
							return true;
						//if((OrderFilterIDList == null && _unmodified_OrderFilterIDList != null) || _unmodified_OrderFilterIDList
						if(IsCollectionFiltered != _unmodified_IsCollectionFiltered)
							return true;
						// For non-master content
						foreach(IInformationObject item in CollectionContent)
						{
							bool itemTreeModified = item.IsInstanceTreeModified;
							if(itemTreeModified)
								return true;
						}
							
						return false;
					}
				}
				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_CollectionContent = CollectionContent.ToArray();
					_unmodified_IsCollectionFiltered = IsCollectionFiltered;
					if(OrderFilterIDList == null)
						_unmodified_OrderFilterIDList = null;
					else
						_unmodified_OrderFilterIDList = OrderFilterIDList.ToArray();
					foreach(IInformationObject iObject in CollectionContent)
						iObject.SetInstanceTreeValuesAsUnmodified();
				}

				private void CopyContentFrom(BinaryFileCollection sourceObject)
				{
					CollectionContent = sourceObject.CollectionContent;
					_unmodified_CollectionContent = sourceObject._unmodified_CollectionContent;
				}
				
				private object FindFromObjectTree(string objectId)
				{
					foreach(var item in CollectionContent)
					{
						object result = item.FindObjectByID(objectId);
						if(result != null)
							return result;
					}
					return null;
				}

				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					foreach(IInformationObject iObject in CollectionContent)
						iObject.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
				}


				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						bool doAdd = true;
						if(filterOnFalse != null)
							doAdd = filterOnFalse(iObject);
						if(doAdd) {
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
				}


			
			}
			[DataContract] 
			[Serializable]
			public partial class BinaryFile : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public BinaryFile()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "BinaryFile";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/BinaryFile/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(BinaryFile), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<BinaryFile>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: BinaryFile");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(BinaryFile), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/BinaryFile/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/BinaryFile/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((BinaryFile) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(BinaryFile));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static BinaryFile DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(BinaryFile));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (BinaryFile) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "BinaryFile", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "BinaryFile", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref BinaryFile customDemoObject);



				public static BinaryFile CreateDefault()
				{
					var result = new BinaryFile();
					result.Data = MediaContent.CreateDefault();
					result.Categories = CategoryCollection.CreateDefault();
					return result;
				}
				/*
				public static BinaryFile CreateDemoDefault()
				{
					BinaryFile customDemo = null;
					BinaryFile.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new BinaryFile();
					result.OriginalFileName = @"BinaryFile.OriginalFileName";

					result.Data = MediaContent.CreateDemoDefault();
					result.Title = @"BinaryFile.Title";

					result.Description = @"BinaryFile.Description
BinaryFile.Description
BinaryFile.Description
BinaryFile.Description
BinaryFile.Description
";

					result.Categories = CategoryCollection.CreateDemoDefault();
				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
					if(Data != null) {
						((IInformationObject) Data).UpdateCollections(masterInstance);
					}

					if(masterInstance is CategoryCollection) {
						AaltoGlobalImpact.OIP.CollectionUpdateImplementation.Update_BinaryFile_Categories(this, localCollection:Categories, masterCollection:(CategoryCollection) masterInstance);
					} else if(Categories != null) {
						((IInformationObject) Categories).UpdateCollections(masterInstance);
					}
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					{ // Scoping block for variable name reusability
						IInformationObject item = Data;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					{ // Scoping block for variable name reusability
						IInformationObject item = Categories;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					{
						var item = Data;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = Categories;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					{
						var item = (IInformationObject) Data;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) Categories;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(OriginalFileName != _unmodified_OriginalFileName)
							return true;
						if(Data != _unmodified_Data)
							return true;
						if(Title != _unmodified_Title)
							return true;
						if(Description != _unmodified_Description)
							return true;
						if(Categories != _unmodified_Categories)
							return true;
						{
							IInformationObject item = (IInformationObject) Data;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
						{
							IInformationObject item = (IInformationObject) Categories;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					if(Data != null) {
						if(Data.ID == replacingObject.ID)
							Data = (MediaContent) replacingObject;
						else {
							IInformationObject iObject = Data;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(Categories != null) {
						if(Categories.ID == replacingObject.ID)
							Categories = (CategoryCollection) replacingObject;
						else {
							IInformationObject iObject = Categories;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}


				private void CopyContentFrom(BinaryFile sourceObject)
				{
					OriginalFileName = sourceObject.OriginalFileName;
					Data = sourceObject.Data;
					Title = sourceObject.Title;
					Description = sourceObject.Description;
					Categories = sourceObject.Categories;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_OriginalFileName = OriginalFileName;
					_unmodified_Title = Title;
					_unmodified_Description = Description;
				
					_unmodified_Data = Data;
					if(Data != null)
						((IInformationObject) Data).SetInstanceTreeValuesAsUnmodified();

					_unmodified_Categories = Categories;
					if(Categories != null)
						((IInformationObject) Categories).SetInstanceTreeValuesAsUnmodified();

				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "OriginalFileName":
							OriginalFileName = value;
							break;
						case "Title":
							Title = value;
							break;
						case "Description":
							Description = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string OriginalFileName { get; set; }
			private string _unmodified_OriginalFileName;
			[DataMember] 
			public MediaContent Data { get; set; }
			private MediaContent _unmodified_Data;
			[DataMember] 
			public string Title { get; set; }
			private string _unmodified_Title;
			[DataMember] 
			public string Description { get; set; }
			private string _unmodified_Description;
			[DataMember] 
			public CategoryCollection Categories { get; set; }
			private CategoryCollection _unmodified_Categories;
			
			}
			[DataContract] 
			[Serializable]
			public partial class MediaContent : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public MediaContent()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "MediaContent";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/MediaContent/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(MediaContent), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<MediaContent>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: MediaContent");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(MediaContent), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/MediaContent/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/MediaContent/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((MediaContent) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(MediaContent));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static MediaContent DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(MediaContent));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (MediaContent) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "MediaContent", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "MediaContent", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref MediaContent customDemoObject);


				// Properties to map to handle the file: .
				// TODO: Handle object collections
				private object FindFromObjectTree(string objectId)
				{
					return null;
				}

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
				}


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
				}

				bool IInformationObject.IsInstanceTreeModified {
					get {
						// Currently is always false
						return false;
					}
				}
				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					// Reflected to IsModified above, no action right now
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					// Cannot replace self, doesn't contain subitems, nothing to do
				}

				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
				}

				private void CopyContentFrom(MediaContent sourceObject)
				{
					throw new NotImplementedException("Media masters are not currently supported");
				}


				public static MediaContent CreateDefault()
				{
					var result = new MediaContent();
					return result;
				}

				public static MediaContent CreateDemoDefault()
				{
					MediaContent customDemo = null;
					MediaContent.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new MediaContent();
					return result;
				}


			
			}
			[DataContract] 
			[Serializable]
			public partial class Longitude : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public Longitude()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "Longitude";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/Longitude/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(Longitude), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<Longitude>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: Longitude");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(Longitude), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/Longitude/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/Longitude/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((Longitude) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(Longitude));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static Longitude DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(Longitude));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (Longitude) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "Longitude", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "Longitude", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref Longitude customDemoObject);



				public static Longitude CreateDefault()
				{
					var result = new Longitude();
					return result;
				}
				/*
				public static Longitude CreateDemoDefault()
				{
					Longitude customDemo = null;
					Longitude.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new Longitude();
					result.TextValue = @"Longitude.TextValue";

				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(TextValue != _unmodified_TextValue)
							return true;
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
				}


				private void CopyContentFrom(Longitude sourceObject)
				{
					TextValue = sourceObject.TextValue;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_TextValue = TextValue;
				
				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "TextValue":
							TextValue = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string TextValue { get; set; }
			private string _unmodified_TextValue;
			
			}
			[DataContract] 
			[Serializable]
			public partial class Latitude : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public Latitude()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "Latitude";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/Latitude/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(Latitude), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<Latitude>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: Latitude");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(Latitude), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/Latitude/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/Latitude/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((Latitude) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(Latitude));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static Latitude DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(Latitude));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (Latitude) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "Latitude", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "Latitude", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref Latitude customDemoObject);



				public static Latitude CreateDefault()
				{
					var result = new Latitude();
					return result;
				}
				/*
				public static Latitude CreateDemoDefault()
				{
					Latitude customDemo = null;
					Latitude.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new Latitude();
					result.TextValue = @"Latitude.TextValue";

				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(TextValue != _unmodified_TextValue)
							return true;
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
				}


				private void CopyContentFrom(Latitude sourceObject)
				{
					TextValue = sourceObject.TextValue;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_TextValue = TextValue;
				
				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "TextValue":
							TextValue = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string TextValue { get; set; }
			private string _unmodified_TextValue;
			
			}
			[DataContract] 
			[Serializable]
			public partial class Location : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public Location()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "Location";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/Location/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(Location), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<Location>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: Location");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(Location), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/Location/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/Location/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((Location) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(Location));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static Location DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(Location));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (Location) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "Location", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "Location", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref Location customDemoObject);



				public static Location CreateDefault()
				{
					var result = new Location();
					result.Longitude = Longitude.CreateDefault();
					result.Latitude = Latitude.CreateDefault();
					return result;
				}
				/*
				public static Location CreateDemoDefault()
				{
					Location customDemo = null;
					Location.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new Location();
					result.LocationName = @"Location.LocationName";

					result.Longitude = Longitude.CreateDemoDefault();
					result.Latitude = Latitude.CreateDemoDefault();
				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
					if(Longitude != null) {
						((IInformationObject) Longitude).UpdateCollections(masterInstance);
					}

					if(Latitude != null) {
						((IInformationObject) Latitude).UpdateCollections(masterInstance);
					}

				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					{ // Scoping block for variable name reusability
						IInformationObject item = Longitude;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					{ // Scoping block for variable name reusability
						IInformationObject item = Latitude;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					{
						var item = Longitude;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = Latitude;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					{
						var item = (IInformationObject) Longitude;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) Latitude;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(LocationName != _unmodified_LocationName)
							return true;
						if(Longitude != _unmodified_Longitude)
							return true;
						if(Latitude != _unmodified_Latitude)
							return true;
						{
							IInformationObject item = (IInformationObject) Longitude;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
						{
							IInformationObject item = (IInformationObject) Latitude;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					if(Longitude != null) {
						if(Longitude.ID == replacingObject.ID)
							Longitude = (Longitude) replacingObject;
						else {
							IInformationObject iObject = Longitude;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(Latitude != null) {
						if(Latitude.ID == replacingObject.ID)
							Latitude = (Latitude) replacingObject;
						else {
							IInformationObject iObject = Latitude;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}


				private void CopyContentFrom(Location sourceObject)
				{
					LocationName = sourceObject.LocationName;
					Longitude = sourceObject.Longitude;
					Latitude = sourceObject.Latitude;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_LocationName = LocationName;
				
					_unmodified_Longitude = Longitude;
					if(Longitude != null)
						((IInformationObject) Longitude).SetInstanceTreeValuesAsUnmodified();

					_unmodified_Latitude = Latitude;
					if(Latitude != null)
						((IInformationObject) Latitude).SetInstanceTreeValuesAsUnmodified();

				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "LocationName":
							LocationName = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string LocationName { get; set; }
			private string _unmodified_LocationName;
			[DataMember] 
			public Longitude Longitude { get; set; }
			private Longitude _unmodified_Longitude;
			[DataMember] 
			public Latitude Latitude { get; set; }
			private Latitude _unmodified_Latitude;
			
			}
			[DataContract] 
			[Serializable]
			public partial class LocationCollection : IInformationObject , IInformationCollection
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public LocationCollection()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "LocationCollection";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/LocationCollection/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(LocationCollection), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<LocationCollection>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: LocationCollection");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(LocationCollection), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/LocationCollection/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/LocationCollection/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((LocationCollection) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(LocationCollection));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static LocationCollection DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(LocationCollection));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (LocationCollection) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "LocationCollection", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "LocationCollection", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref LocationCollection customDemoObject);


				
				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.UpdateCollections(masterInstance);
					}
				}



				bool IInformationCollection.IsMasterCollection {
					get {
						return false;
					}
				}

				string IInformationCollection.GetMasterLocation()
				{
					throw new NotSupportedException("Master collection location only supported for master collections");
					
				}

				async Task<IInformationCollection> IInformationCollection.GetMasterInstanceAsync()
				{
					throw new NotSupportedException("Master collection instance only supported for master collections");
					
				}


				public string GetItemDirectory()
				{
					string dummyItemLocation = ObjectStorage.GetRelativeLocationFromID<Location>("dummy");
					string nonOwnerDirectoryLocation = StorageSupport.GetParentDirectoryTarget(dummyItemLocation);
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					string ownerDirectoryLocation = StorageSupport.GetOwnerContentLocation(owner, nonOwnerDirectoryLocation);
					return ownerDirectoryLocation;
				}

				public async Task RefreshContentAsync()
				{
				}




                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }

				
		
				public static LocationCollection CreateDefault()
				{
					var result = new LocationCollection();
					return result;
				}

				/*
				public static LocationCollection CreateDemoDefault()
				{
					LocationCollection customDemo = null;
					LocationCollection.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new LocationCollection();
					result.CollectionContent.Add(Location.CreateDemoDefault());
					//result.CollectionContent.Add(Location.CreateDemoDefault());
					//result.CollectionContent.Add(Location.CreateDemoDefault());
					return result;
				}
				*/

		
				[DataMember] public List<Location> CollectionContent = new List<Location>();
				private Location[] _unmodified_CollectionContent;

				[DataMember] public bool IsCollectionFiltered;
				private bool _unmodified_IsCollectionFiltered;
				
				[DataMember] public List<string> OrderFilterIDList = new List<string>();
				private string[] _unmodified_OrderFilterIDList;

				public string SelectedIDCommaSeparated
				{
					get
					{
						string[] sourceArray;
						if (OrderFilterIDList != null)
							sourceArray = OrderFilterIDList.ToArray();
						else
							sourceArray = CollectionContent.Select(item => item.ID).ToArray();
						return String.Join(",", sourceArray);
					}
					set 
					{
						if (value == null)
							return;
						string[] valueArray = value.Split(',');
						OrderFilterIDList = new List<string>();
						OrderFilterIDList.AddRange(valueArray);
						OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
					}
				}

				public Location[] GetIDSelectedArray()
				{
					if (IsCollectionFiltered == false || this.OrderFilterIDList == null)
						return CollectionContent.ToArray();
					return
						this.OrderFilterIDList.Select(id => CollectionContent.FirstOrDefault(item => item.ID == id)).Where(item => item != null).ToArray();
				}

				public void RefreshOrderAndFilterListFromContent()
                {
                    if (OrderFilterIDList == null)
                        return;
                    OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
                }

				public void ParsePropertyValue(string propertyName, string propertyValue)
				{
					switch(propertyName)
					{
						case "SelectedIDCommaSeparated":
							SelectedIDCommaSeparated = propertyValue;
							break;
						case "IsCollectionFiltered":
							IsCollectionFiltered = bool.Parse(propertyValue);
							break;
						default:
							throw new NotSupportedException("No ParsePropertyValue supported for property: " + propertyName);
					}
				}


				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					for(int i = 0; i < CollectionContent.Count; i++) // >
					{
						if(CollectionContent[i].ID == replacingObject.ID)
							CollectionContent[i] = (Location )replacingObject;
						else { // Cannot have circular reference, so can be in else branch
							IInformationObject iObject = CollectionContent[i];
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}

				
				bool IInformationObject.IsInstanceTreeModified {
					get {
						bool collectionModified = CollectionContent.SequenceEqual(_unmodified_CollectionContent) == false;
						if(collectionModified)
							return true;
						//if((OrderFilterIDList == null && _unmodified_OrderFilterIDList != null) || _unmodified_OrderFilterIDList
						if(IsCollectionFiltered != _unmodified_IsCollectionFiltered)
							return true;
						// For non-master content
						foreach(IInformationObject item in CollectionContent)
						{
							bool itemTreeModified = item.IsInstanceTreeModified;
							if(itemTreeModified)
								return true;
						}
							
						return false;
					}
				}
				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_CollectionContent = CollectionContent.ToArray();
					_unmodified_IsCollectionFiltered = IsCollectionFiltered;
					if(OrderFilterIDList == null)
						_unmodified_OrderFilterIDList = null;
					else
						_unmodified_OrderFilterIDList = OrderFilterIDList.ToArray();
					foreach(IInformationObject iObject in CollectionContent)
						iObject.SetInstanceTreeValuesAsUnmodified();
				}

				private void CopyContentFrom(LocationCollection sourceObject)
				{
					CollectionContent = sourceObject.CollectionContent;
					_unmodified_CollectionContent = sourceObject._unmodified_CollectionContent;
				}
				
				private object FindFromObjectTree(string objectId)
				{
					foreach(var item in CollectionContent)
					{
						object result = item.FindObjectByID(objectId);
						if(result != null)
							return result;
					}
					return null;
				}

				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					foreach(IInformationObject iObject in CollectionContent)
						iObject.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
				}


				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						bool doAdd = true;
						if(filterOnFalse != null)
							doAdd = filterOnFalse(iObject);
						if(doAdd) {
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
				}


			
			}
			[DataContract] 
			[Serializable]
			public partial class Date : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public Date()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "Date";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/Date/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(Date), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<Date>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: Date");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(Date), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/Date/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/Date/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((Date) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(Date));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static Date DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(Date));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (Date) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "Date", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "Date", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref Date customDemoObject);



				public static Date CreateDefault()
				{
					var result = new Date();
					return result;
				}
				/*
				public static Date CreateDemoDefault()
				{
					Date customDemo = null;
					Date.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new Date();
				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(Day != _unmodified_Day)
							return true;
						if(Week != _unmodified_Week)
							return true;
						if(Month != _unmodified_Month)
							return true;
						if(Year != _unmodified_Year)
							return true;
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
				}


				private void CopyContentFrom(Date sourceObject)
				{
					Day = sourceObject.Day;
					Week = sourceObject.Week;
					Month = sourceObject.Month;
					Year = sourceObject.Year;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_Day = Day;
					_unmodified_Week = Week;
					_unmodified_Month = Month;
					_unmodified_Year = Year;
				
				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "Day":
							Day = DateTime.Parse(value);
							break;
						case "Week":
							Week = DateTime.Parse(value);
							break;
						case "Month":
							Month = DateTime.Parse(value);
							break;
						case "Year":
							Year = DateTime.Parse(value);
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public DateTime Day { get; set; }
			private DateTime _unmodified_Day;
			[DataMember] 
			public DateTime Week { get; set; }
			private DateTime _unmodified_Week;
			[DataMember] 
			public DateTime Month { get; set; }
			private DateTime _unmodified_Month;
			[DataMember] 
			public DateTime Year { get; set; }
			private DateTime _unmodified_Year;
			
			}
			[DataContract] 
			[Serializable]
			public partial class CategoryContainer : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public CategoryContainer()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "CategoryContainer";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/CategoryContainer/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(CategoryContainer), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<CategoryContainer>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: CategoryContainer");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(CategoryContainer), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/CategoryContainer/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/CategoryContainer/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((CategoryContainer) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(CategoryContainer));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static CategoryContainer DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(CategoryContainer));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (CategoryContainer) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "CategoryContainer", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "CategoryContainer", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref CategoryContainer customDemoObject);



				public static CategoryContainer CreateDefault()
				{
					var result = new CategoryContainer();
					result.Categories = CategoryCollection.CreateDefault();
					return result;
				}
				/*
				public static CategoryContainer CreateDemoDefault()
				{
					CategoryContainer customDemo = null;
					CategoryContainer.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new CategoryContainer();
					result.Categories = CategoryCollection.CreateDemoDefault();
				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
					if(masterInstance is CategoryCollection) {
						AaltoGlobalImpact.OIP.CollectionUpdateImplementation.Update_CategoryContainer_Categories(this, localCollection:Categories, masterCollection:(CategoryCollection) masterInstance);
					} else if(Categories != null) {
						((IInformationObject) Categories).UpdateCollections(masterInstance);
					}
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					{ // Scoping block for variable name reusability
						IInformationObject item = Categories;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					{
						var item = Categories;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					{
						var item = (IInformationObject) Categories;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(Categories != _unmodified_Categories)
							return true;
						{
							IInformationObject item = (IInformationObject) Categories;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					if(Categories != null) {
						if(Categories.ID == replacingObject.ID)
							Categories = (CategoryCollection) replacingObject;
						else {
							IInformationObject iObject = Categories;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}


				private void CopyContentFrom(CategoryContainer sourceObject)
				{
					Categories = sourceObject.Categories;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
				
					_unmodified_Categories = Categories;
					if(Categories != null)
						((IInformationObject) Categories).SetInstanceTreeValuesAsUnmodified();

				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public CategoryCollection Categories { get; set; }
			private CategoryCollection _unmodified_Categories;
			
			}
			[DataContract] 
			[Serializable]
			public partial class Category : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public Category()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "Category";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/Category/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(Category), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<Category>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: Category");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(Category), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/Category/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/Category/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return true;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((Category) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(Category));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static Category DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(Category));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (Category) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "Category", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "Category", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref Category customDemoObject);



				public static Category CreateDefault()
				{
					var result = new Category();
					result.ReferenceToInformation = ReferenceToInformation.CreateDefault();
					result.ImageData = MediaContent.CreateDefault();
					result.ParentCategory = Category.CreateDefault();
					return result;
				}
				/*
				public static Category CreateDemoDefault()
				{
					Category customDemo = null;
					Category.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new Category();
					result.ReferenceToInformation = ReferenceToInformation.CreateDemoDefault();
					result.CategoryName = @"Category.CategoryName";

					result.ImageData = MediaContent.CreateDemoDefault();
					result.Title = @"Category.Title";

					result.Excerpt = @"Category.Excerpt
Category.Excerpt
Category.Excerpt
Category.Excerpt
Category.Excerpt
";

					result.ParentCategory = Category.CreateDemoDefault();
					result.ParentCategoryID = @"Category.ParentCategoryID";

				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
					if(ImageData != null) {
						((IInformationObject) ImageData).UpdateCollections(masterInstance);
					}

				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					{ // Scoping block for variable name reusability
						IInformationObject item = ImageData;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					if(searchWithinCurrentMasterOnly == false)
					{
						{
							IInformationObject item = ReferenceToInformation;
							if(item != null)
							{
								item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
							}
						}
						{
							IInformationObject item = ParentCategory;
							if(item != null)
							{
								item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
							}
						}
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					{
						var item = ReferenceToInformation;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = ImageData;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					{
						var item = ParentCategory;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					{
						var item = (IInformationObject) ReferenceToInformation;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) ImageData;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
					{
						var item = (IInformationObject) ParentCategory;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(ReferenceToInformation != _unmodified_ReferenceToInformation)
							return true;
						if(CategoryName != _unmodified_CategoryName)
							return true;
						if(ImageData != _unmodified_ImageData)
							return true;
						if(Title != _unmodified_Title)
							return true;
						if(Excerpt != _unmodified_Excerpt)
							return true;
						if(ParentCategory != _unmodified_ParentCategory)
							return true;
						if(ParentCategoryID != _unmodified_ParentCategoryID)
							return true;
						{
							IInformationObject item = (IInformationObject) ImageData;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					if(ReferenceToInformation != null) {
						if(ReferenceToInformation.ID == replacingObject.ID)
							ReferenceToInformation = (ReferenceToInformation) replacingObject;
						else {
							IInformationObject iObject = ReferenceToInformation;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(ImageData != null) {
						if(ImageData.ID == replacingObject.ID)
							ImageData = (MediaContent) replacingObject;
						else {
							IInformationObject iObject = ImageData;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
					if(ParentCategory != null) {
						if(ParentCategory.ID == replacingObject.ID)
							ParentCategory = (Category) replacingObject;
						else {
							IInformationObject iObject = ParentCategory;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}


				private void CopyContentFrom(Category sourceObject)
				{
					ReferenceToInformation = sourceObject.ReferenceToInformation;
					CategoryName = sourceObject.CategoryName;
					ImageData = sourceObject.ImageData;
					Title = sourceObject.Title;
					Excerpt = sourceObject.Excerpt;
					ParentCategory = sourceObject.ParentCategory;
					ParentCategoryID = sourceObject.ParentCategoryID;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_CategoryName = CategoryName;
					_unmodified_Title = Title;
					_unmodified_Excerpt = Excerpt;
					_unmodified_ParentCategoryID = ParentCategoryID;
				
					_unmodified_ReferenceToInformation = ReferenceToInformation;
					if(ReferenceToInformation != null)
						((IInformationObject) ReferenceToInformation).SetInstanceTreeValuesAsUnmodified();

					_unmodified_ImageData = ImageData;
					if(ImageData != null)
						((IInformationObject) ImageData).SetInstanceTreeValuesAsUnmodified();

					_unmodified_ParentCategory = ParentCategory;
					if(ParentCategory != null)
						((IInformationObject) ParentCategory).SetInstanceTreeValuesAsUnmodified();

				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "CategoryName":
							CategoryName = value;
							break;
						case "Title":
							Title = value;
							break;
						case "Excerpt":
							Excerpt = value;
							break;
						case "ParentCategoryID":
							ParentCategoryID = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public ReferenceToInformation ReferenceToInformation { get; set; }
			private ReferenceToInformation _unmodified_ReferenceToInformation;
			[DataMember] 
			public string CategoryName { get; set; }
			private string _unmodified_CategoryName;
			[DataMember] 
			public MediaContent ImageData { get; set; }
			private MediaContent _unmodified_ImageData;
			[DataMember] 
			public string Title { get; set; }
			private string _unmodified_Title;
			[DataMember] 
			public string Excerpt { get; set; }
			private string _unmodified_Excerpt;
			[DataMember] 
			public Category ParentCategory { get; set; }
			private Category _unmodified_ParentCategory;
			[DataMember] 
			public string ParentCategoryID { get; set; }
			private string _unmodified_ParentCategoryID;
			
			}
			[DataContract] 
			[Serializable]
			public partial class CategoryCollection : IInformationObject , IInformationCollection
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public CategoryCollection()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "CategoryCollection";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/CategoryCollection/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(CategoryCollection), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<CategoryCollection>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: CategoryCollection");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(CategoryCollection), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/CategoryCollection/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/CategoryCollection/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((CategoryCollection) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(CategoryCollection));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static CategoryCollection DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(CategoryCollection));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (CategoryCollection) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "CategoryCollection", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "CategoryCollection", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref CategoryCollection customDemoObject);


				
				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
				}



				bool IInformationCollection.IsMasterCollection {
					get {
						return true;
					}
				}

				string IInformationCollection.GetMasterLocation()
				{
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					return GetMasterCollectionLocation(owner);
					
				}

				async Task<IInformationCollection> IInformationCollection.GetMasterInstanceAsync()
				{
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					return await GetMasterCollectionInstanceAsync(owner);
					
				}


				public string GetItemDirectory()
				{
					string dummyItemLocation = ObjectStorage.GetRelativeLocationFromID<Category>("dummy");
					string nonOwnerDirectoryLocation = StorageSupport.GetParentDirectoryTarget(dummyItemLocation);
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					string ownerDirectoryLocation = StorageSupport.GetOwnerContentLocation(owner, nonOwnerDirectoryLocation);
					return ownerDirectoryLocation;
				}

				public async Task RefreshContentAsync()
				{
					// DirectoryToMaster
					string itemDirectory = GetItemDirectory();
					IInformationObject[] informationObjects = await StorageSupport.RetrieveInformationObjectsAsync(itemDirectory,
																								 typeof(Category));
                    Array.ForEach(informationObjects, io => io.MasterETag = io.ETag);
					CollectionContent.Clear();
					CollectionContent.AddRange(informationObjects.Select(obj => (Category) obj));
            
				}

				public static async Task<CategoryCollection> GetMasterCollectionInstanceAsync(IContainerOwner owner)
				{
					return await ObjectStorage.RetrieveFromOwnerContentA<CategoryCollection>(owner, "MasterCollection");
				}
				public static string GetMasterCollectionLocation(IContainerOwner owner)
				{
					return StorageSupport.GetOwnerContentLocation(owner, "AaltoGlobalImpact.OIP/CategoryCollection/" + "MasterCollection");
				}



                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }

				
		
				public static CategoryCollection CreateDefault()
				{
					var result = new CategoryCollection();
					return result;
				}

				/*
				public static CategoryCollection CreateDemoDefault()
				{
					CategoryCollection customDemo = null;
					CategoryCollection.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new CategoryCollection();
					result.CollectionContent.Add(Category.CreateDemoDefault());
					//result.CollectionContent.Add(Category.CreateDemoDefault());
					//result.CollectionContent.Add(Category.CreateDemoDefault());
					return result;
				}
				*/

		
				[DataMember] public List<Category> CollectionContent = new List<Category>();
				private Category[] _unmodified_CollectionContent;

				[DataMember] public bool IsCollectionFiltered;
				private bool _unmodified_IsCollectionFiltered;
				
				[DataMember] public List<string> OrderFilterIDList = new List<string>();
				private string[] _unmodified_OrderFilterIDList;

				public string SelectedIDCommaSeparated
				{
					get
					{
						string[] sourceArray;
						if (OrderFilterIDList != null)
							sourceArray = OrderFilterIDList.ToArray();
						else
							sourceArray = CollectionContent.Select(item => item.ID).ToArray();
						return String.Join(",", sourceArray);
					}
					set 
					{
						if (value == null)
							return;
						string[] valueArray = value.Split(',');
						OrderFilterIDList = new List<string>();
						OrderFilterIDList.AddRange(valueArray);
						OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
					}
				}

				public Category[] GetIDSelectedArray()
				{
					if (IsCollectionFiltered == false || this.OrderFilterIDList == null)
						return CollectionContent.ToArray();
					return
						this.OrderFilterIDList.Select(id => CollectionContent.FirstOrDefault(item => item.ID == id)).Where(item => item != null).ToArray();
				}

				public void RefreshOrderAndFilterListFromContent()
                {
                    if (OrderFilterIDList == null)
                        return;
                    OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
                }

				public void ParsePropertyValue(string propertyName, string propertyValue)
				{
					switch(propertyName)
					{
						case "SelectedIDCommaSeparated":
							SelectedIDCommaSeparated = propertyValue;
							break;
						case "IsCollectionFiltered":
							IsCollectionFiltered = bool.Parse(propertyValue);
							break;
						default:
							throw new NotSupportedException("No ParsePropertyValue supported for property: " + propertyName);
					}
				}


				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					for(int i = 0; i < CollectionContent.Count; i++) // >
					{
						if(CollectionContent[i].ID == replacingObject.ID)
							CollectionContent[i] = (Category )replacingObject;
						else { // Cannot have circular reference, so can be in else branch
							IInformationObject iObject = CollectionContent[i];
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}

				
				bool IInformationObject.IsInstanceTreeModified {
					get {
						bool collectionModified = CollectionContent.SequenceEqual(_unmodified_CollectionContent) == false;
						if(collectionModified)
							return true;
						//if((OrderFilterIDList == null && _unmodified_OrderFilterIDList != null) || _unmodified_OrderFilterIDList
						if(IsCollectionFiltered != _unmodified_IsCollectionFiltered)
							return true;
						return false;
					}
				}
				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_CollectionContent = CollectionContent.ToArray();
					_unmodified_IsCollectionFiltered = IsCollectionFiltered;
					if(OrderFilterIDList == null)
						_unmodified_OrderFilterIDList = null;
					else
						_unmodified_OrderFilterIDList = OrderFilterIDList.ToArray();
					foreach(IInformationObject iObject in CollectionContent)
						iObject.SetInstanceTreeValuesAsUnmodified();
				}

				private void CopyContentFrom(CategoryCollection sourceObject)
				{
					CollectionContent = sourceObject.CollectionContent;
					_unmodified_CollectionContent = sourceObject._unmodified_CollectionContent;
				}
				
				private object FindFromObjectTree(string objectId)
				{
					foreach(var item in CollectionContent)
					{
						object result = item.FindObjectByID(objectId);
						if(result != null)
							return result;
					}
					return null;
				}

				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					if(searchWithinCurrentMasterOnly == false) {
						foreach(IInformationObject iObject in CollectionContent)
							iObject.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
					}
				}


				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						bool doAdd = true;
						if(filterOnFalse != null)
							doAdd = filterOnFalse(iObject);
						if(doAdd) {
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
				}


			
			}
			[DataContract] 
			[Serializable]
			public partial class UpdateWebContentOperation : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public UpdateWebContentOperation()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "UpdateWebContentOperation";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/UpdateWebContentOperation/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(UpdateWebContentOperation), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<UpdateWebContentOperation>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: UpdateWebContentOperation");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(UpdateWebContentOperation), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/UpdateWebContentOperation/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/UpdateWebContentOperation/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((UpdateWebContentOperation) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(UpdateWebContentOperation));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static UpdateWebContentOperation DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(UpdateWebContentOperation));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (UpdateWebContentOperation) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "UpdateWebContentOperation", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "UpdateWebContentOperation", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref UpdateWebContentOperation customDemoObject);



				public static UpdateWebContentOperation CreateDefault()
				{
					var result = new UpdateWebContentOperation();
					result.Handlers = UpdateWebContentHandlerCollection.CreateDefault();
					return result;
				}
				/*
				public static UpdateWebContentOperation CreateDemoDefault()
				{
					UpdateWebContentOperation customDemo = null;
					UpdateWebContentOperation.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new UpdateWebContentOperation();
					result.SourceContainerName = @"UpdateWebContentOperation.SourceContainerName";

					result.SourcePathRoot = @"UpdateWebContentOperation.SourcePathRoot";

					result.TargetContainerName = @"UpdateWebContentOperation.TargetContainerName";

					result.TargetPathRoot = @"UpdateWebContentOperation.TargetPathRoot";

					result.Handlers = UpdateWebContentHandlerCollection.CreateDemoDefault();
				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
					if(Handlers != null) {
						((IInformationObject) Handlers).UpdateCollections(masterInstance);
					}

				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					{ // Scoping block for variable name reusability
						IInformationObject item = Handlers;
						if(item != null)
						{
							item.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
						}
					} // Scoping block end

					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					{
						var item = Handlers;
						if(item != null)
						{
							object result = item.FindObjectByID(objectId);
							if(result != null)
								return result;
						}
					}
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					{
						var item = (IInformationObject) Handlers;
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(SourceContainerName != _unmodified_SourceContainerName)
							return true;
						if(SourcePathRoot != _unmodified_SourcePathRoot)
							return true;
						if(TargetContainerName != _unmodified_TargetContainerName)
							return true;
						if(TargetPathRoot != _unmodified_TargetPathRoot)
							return true;
						if(RenderWhileSync != _unmodified_RenderWhileSync)
							return true;
						if(Handlers != _unmodified_Handlers)
							return true;
						{
							IInformationObject item = (IInformationObject) Handlers;
							if(item != null) 
							{
								bool isItemTreeModified = item.IsInstanceTreeModified;
								if(isItemTreeModified)
									return true;
							}
						}
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					if(Handlers != null) {
						if(Handlers.ID == replacingObject.ID)
							Handlers = (UpdateWebContentHandlerCollection) replacingObject;
						else {
							IInformationObject iObject = Handlers;
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}


				private void CopyContentFrom(UpdateWebContentOperation sourceObject)
				{
					SourceContainerName = sourceObject.SourceContainerName;
					SourcePathRoot = sourceObject.SourcePathRoot;
					TargetContainerName = sourceObject.TargetContainerName;
					TargetPathRoot = sourceObject.TargetPathRoot;
					RenderWhileSync = sourceObject.RenderWhileSync;
					Handlers = sourceObject.Handlers;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_SourceContainerName = SourceContainerName;
					_unmodified_SourcePathRoot = SourcePathRoot;
					_unmodified_TargetContainerName = TargetContainerName;
					_unmodified_TargetPathRoot = TargetPathRoot;
					_unmodified_RenderWhileSync = RenderWhileSync;
				
					_unmodified_Handlers = Handlers;
					if(Handlers != null)
						((IInformationObject) Handlers).SetInstanceTreeValuesAsUnmodified();

				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "SourceContainerName":
							SourceContainerName = value;
							break;
						case "SourcePathRoot":
							SourcePathRoot = value;
							break;
						case "TargetContainerName":
							TargetContainerName = value;
							break;
						case "TargetPathRoot":
							TargetPathRoot = value;
							break;
						case "RenderWhileSync":
							RenderWhileSync = bool.Parse(value);
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string SourceContainerName { get; set; }
			private string _unmodified_SourceContainerName;
			[DataMember] 
			public string SourcePathRoot { get; set; }
			private string _unmodified_SourcePathRoot;
			[DataMember] 
			public string TargetContainerName { get; set; }
			private string _unmodified_TargetContainerName;
			[DataMember] 
			public string TargetPathRoot { get; set; }
			private string _unmodified_TargetPathRoot;
			[DataMember] 
			public bool RenderWhileSync { get; set; }
			private bool _unmodified_RenderWhileSync;
			[DataMember] 
			public UpdateWebContentHandlerCollection Handlers { get; set; }
			private UpdateWebContentHandlerCollection _unmodified_Handlers;
			
			}
			[DataContract] 
			[Serializable]
			public partial class UpdateWebContentHandlerItem : IInformationObject 
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public UpdateWebContentHandlerItem()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "UpdateWebContentHandlerItem";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/UpdateWebContentHandlerItem/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(UpdateWebContentHandlerItem), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<UpdateWebContentHandlerItem>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: UpdateWebContentHandlerItem");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(UpdateWebContentHandlerItem), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/UpdateWebContentHandlerItem/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/UpdateWebContentHandlerItem/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((UpdateWebContentHandlerItem) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(UpdateWebContentHandlerItem));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static UpdateWebContentHandlerItem DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(UpdateWebContentHandlerItem));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (UpdateWebContentHandlerItem) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "UpdateWebContentHandlerItem", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "UpdateWebContentHandlerItem", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref UpdateWebContentHandlerItem customDemoObject);



				public static UpdateWebContentHandlerItem CreateDefault()
				{
					var result = new UpdateWebContentHandlerItem();
					return result;
				}
				/*
				public static UpdateWebContentHandlerItem CreateDemoDefault()
				{
					UpdateWebContentHandlerItem customDemo = null;
					UpdateWebContentHandlerItem.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new UpdateWebContentHandlerItem();
					result.InformationTypeName = @"UpdateWebContentHandlerItem.InformationTypeName";

					result.OptionName = @"UpdateWebContentHandlerItem.OptionName";

				
					return result;
				}
				*/

				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					//Type collType = masterInstance.GetType();
					//string typeName = collType.Name;
				}

                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }


				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					if(searchWithinCurrentMasterOnly == false)
					{
					}					
				}

				private object FindFromObjectTree(string objectId)
				{
					return null;
				}
				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						if(filterOnFalse == null || filterOnFalse(iObject)) 
						{
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}

				}

				bool IInformationObject.IsInstanceTreeModified {
					get { 

						if(InformationTypeName != _unmodified_InformationTypeName)
							return true;
						if(OptionName != _unmodified_OptionName)
							return true;
				
						return false;
					}
				}

				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
				}


				private void CopyContentFrom(UpdateWebContentHandlerItem sourceObject)
				{
					InformationTypeName = sourceObject.InformationTypeName;
					OptionName = sourceObject.OptionName;
				}
				


				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_InformationTypeName = InformationTypeName;
					_unmodified_OptionName = OptionName;
				
				
				}


				public void ParsePropertyValue(string propertyName, string value)
				{
					switch (propertyName)
					{
						case "InformationTypeName":
							InformationTypeName = value;
							break;
						case "OptionName":
							OptionName = value;
							break;
						default:
							throw new InvalidDataException("Primitive parseable data type property not found: " + propertyName);
					}
	        }
			[DataMember] 
			public string InformationTypeName { get; set; }
			private string _unmodified_InformationTypeName;
			[DataMember] 
			public string OptionName { get; set; }
			private string _unmodified_OptionName;
			
			}
			[DataContract] 
			[Serializable]
			public partial class UpdateWebContentHandlerCollection : IInformationObject , IInformationCollection
			{
		        public static StorageSerializationType ClassStorageSerializationType { 
					get {
						return StorageSerializationType.XML;
					}
				}

				public UpdateWebContentHandlerCollection()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.OwnerID = StorageSupport.ActiveOwnerID;
				    this.SemanticDomainName = "AaltoGlobalImpact.OIP";
				    this.Name = "UpdateWebContentHandlerCollection";
					UpdateRelativeLocationFromID();
				}

				public static async Task<IInformationObject[]> RetrieveCollectionFromOwnerContentAsync(IContainerOwner owner)
				{
					//string contentTypeName = ""; // SemanticDomainName + "." + Name
					string contentTypeName = "AaltoGlobalImpact.OIP/UpdateWebContentHandlerCollection/";
					List<IInformationObject> informationObjects = new List<IInformationObject>();
                    var storageService = CoreServices.GetCurrent<IStorageService>();
					var blobListing = await storageService.GetBlobItemsA(owner, contentTypeName);
					foreach(var blob in blobListing)
					{
						if (blob.GetBlobInformationType() != StorageSupport.InformationType_InformationObjectValue)
							continue;
						IInformationObject informationObject = await StorageSupport.RetrieveInformationA(blob.Name, typeof(UpdateWebContentHandlerCollection), null, owner);
					    informationObject.MasterETag = informationObject.ETag;
						informationObjects.Add(informationObject);
					}
					return informationObjects.ToArray();
				}

				public void UpdateRelativeLocationFromID()
				{
					RelativeLocation = ObjectStorage.GetRelativeLocationFromID<UpdateWebContentHandlerCollection>(ID);
				}

				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated = false;
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster == false)
						throw new NotSupportedException("Cannot retrieve master for non-master type: UpdateWebContentHandlerCollection");
					initiated = false;
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					var master = await StorageSupport.RetrieveInformationA(RelativeLocation, typeof(UpdateWebContentHandlerCollection), null, owner);
					if(master == null && initiateIfMissing)
					{
						await StorageSupport.StoreInformationAsync(this, owner);
						master = this;
						initiated = true;
					}
					return master;
				}

				/*
				async Task<IInformationObject> IInformationObject.RetrieveMasterAsync(bool initiateIfMissing)
				{
					bool initiated;
					IInformationObject iObject = this;
					return await iObject.RetrieveMasterAsync(initiateIfMissing, out initiated);
				}*/

				public void SetLocationAsOwnerContent(IContainerOwner containerOwner, string contentName)
                {
                    // RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "Content/AaltoGlobalImpact.OIP/UpdateWebContentHandlerCollection/" + contentName);
                    RelativeLocation = StorageSupport.GetOwnerContentLocation(containerOwner, "AaltoGlobalImpact.OIP/UpdateWebContentHandlerCollection/" + contentName);
                }

				partial void DoPostStoringExecute(IContainerOwner owner, ref Task task);

				public async Task PostStoringExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostStoringExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}

				partial void DoPostDeleteExecute(IContainerOwner owner, ref Task task);

				public async Task PostDeleteExecute(IContainerOwner owner)
				{
					Task postTask = null;
					DoPostDeleteExecute(owner, ref postTask);
					if(postTask != null)
						await postTask;
				}


				bool IInformationObject.IsIndependentMaster { 
					get {
						return false;
					}
				}


			    public void SetValuesToObjects(NameValueCollection nameValueCollection)
			    {
                    foreach(string key in nameValueCollection.AllKeys)
                    {
                        if (key.StartsWith("Root"))
                            continue;
                        int indexOfUnderscore = key.IndexOf("_");
						if (indexOfUnderscore < 0) // >
                            continue;
                        string objectID = key.Substring(0, indexOfUnderscore);
                        object targetObject = FindObjectByID(objectID);
                        if (targetObject == null)
                            continue;
                        string propertyName = key.Substring(indexOfUnderscore + 1);
                        string propertyValue = nameValueCollection[key];
						throw new NotSupportedException("Fix dynamic call");
                        //dynamic dyn = targetObject;
                        //dyn.ParsePropertyValue(propertyName, propertyValue);
                    }
			    }

			    public object FindObjectByID(string objectId)
			    {
                    if (objectId == ID)
                        return this;
			        return FindFromObjectTree(objectId);
			    }

				void IInformationObject.UpdateMasterValueTreeFromOtherInstance(IInformationObject sourceMaster)
				{
					if (sourceMaster == null)
						throw new ArgumentNullException("sourceMaster");
					if (GetType() != sourceMaster.GetType())
						throw new InvalidDataException("Type mismatch in UpdateMasterValueTree");
					IInformationObject iObject = this;
					if(iObject.IsIndependentMaster == false)
						throw new InvalidDataException("UpdateMasterValueTree called on non-master type");
					if(ID != sourceMaster.ID)
						throw new InvalidDataException("UpdateMasterValueTree is supported only on masters with same ID");
					CopyContentFrom((UpdateWebContentHandlerCollection) sourceMaster);
				}


				Dictionary<string, List<IInformationObject>> IInformationObject.CollectMasterObjects(Predicate<IInformationObject> filterOnFalse)
				{
					Dictionary<string, List<IInformationObject>> result = new Dictionary<string, List<IInformationObject>>();
					IInformationObject iObject = (IInformationObject) this;
					iObject.CollectMasterObjectsFromTree(result, filterOnFalse);
					return result;
				}

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(UpdateWebContentHandlerCollection));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static UpdateWebContentHandlerCollection DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(UpdateWebContentHandlerCollection));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (UpdateWebContentHandlerCollection) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember] 
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] 
                public string Name { get; set; }

                [DataMember] 
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }

				public void SetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					RelativeLocation = GetRelativeLocationAsMetadataTo(masterRelativeLocation);
				}

				public static string GetRelativeLocationAsMetadataTo(string masterRelativeLocation)
				{
					return Path.Combine("AaltoGlobalImpact.OIP", "UpdateWebContentHandlerCollection", masterRelativeLocation + ".metadata").Replace("\\", "/"); 
				}

				public void SetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
				{
				    RelativeLocation = GetLocationRelativeToContentRoot(referenceLocation, sourceName);
				}

                public string GetLocationRelativeToContentRoot(string referenceLocation, string sourceName)
                {
                    string relativeLocation;
                    if (String.IsNullOrEmpty(sourceName))
                        sourceName = "default";
                    string contentRootLocation = StorageSupport.GetContentRootLocation(referenceLocation);
                    relativeLocation = Path.Combine(contentRootLocation, "AaltoGlobalImpact.OIP", "UpdateWebContentHandlerCollection", sourceName).Replace("\\", "/");
                    return relativeLocation;
                }

				static partial void CreateCustomDemo(ref UpdateWebContentHandlerCollection customDemoObject);


				
				void IInformationObject.UpdateCollections(IInformationCollection masterInstance)
				{
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.UpdateCollections(masterInstance);
					}
				}



				bool IInformationCollection.IsMasterCollection {
					get {
						return false;
					}
				}

				string IInformationCollection.GetMasterLocation()
				{
					throw new NotSupportedException("Master collection location only supported for master collections");
					
				}

				async Task<IInformationCollection> IInformationCollection.GetMasterInstanceAsync()
				{
					throw new NotSupportedException("Master collection instance only supported for master collections");
					
				}


				public string GetItemDirectory()
				{
					string dummyItemLocation = ObjectStorage.GetRelativeLocationFromID<UpdateWebContentHandlerItem>("dummy");
					string nonOwnerDirectoryLocation = StorageSupport.GetParentDirectoryTarget(dummyItemLocation);
					var owner = VirtualOwner.FigureOwner(RelativeLocation);
					string ownerDirectoryLocation = StorageSupport.GetOwnerContentLocation(owner, nonOwnerDirectoryLocation);
					return ownerDirectoryLocation;
				}

				public async Task RefreshContentAsync()
				{
				}




                public async Task SetMediaContent(IContainerOwner containerOwner, string contentObjectID, object mediaContent)
                {
                    IInformationObject targetObject = (IInformationObject) FindObjectByID(contentObjectID);
                    if (targetObject == null)
                        return;
					if(targetObject == this)
						throw new InvalidDataException("SetMediaContent referring to self (not media container)");
                    await targetObject.SetMediaContent(containerOwner, contentObjectID, mediaContent);
                }

				
		
				public static UpdateWebContentHandlerCollection CreateDefault()
				{
					var result = new UpdateWebContentHandlerCollection();
					return result;
				}

				/*
				public static UpdateWebContentHandlerCollection CreateDemoDefault()
				{
					UpdateWebContentHandlerCollection customDemo = null;
					UpdateWebContentHandlerCollection.CreateCustomDemo(ref customDemo);
					if(customDemo != null)
						return customDemo;
					var result = new UpdateWebContentHandlerCollection();
					result.CollectionContent.Add(UpdateWebContentHandlerItem.CreateDemoDefault());
					//result.CollectionContent.Add(UpdateWebContentHandlerItem.CreateDemoDefault());
					//result.CollectionContent.Add(UpdateWebContentHandlerItem.CreateDemoDefault());
					return result;
				}
				*/

		
				[DataMember] public List<UpdateWebContentHandlerItem> CollectionContent = new List<UpdateWebContentHandlerItem>();
				private UpdateWebContentHandlerItem[] _unmodified_CollectionContent;

				[DataMember] public bool IsCollectionFiltered;
				private bool _unmodified_IsCollectionFiltered;
				
				[DataMember] public List<string> OrderFilterIDList = new List<string>();
				private string[] _unmodified_OrderFilterIDList;

				public string SelectedIDCommaSeparated
				{
					get
					{
						string[] sourceArray;
						if (OrderFilterIDList != null)
							sourceArray = OrderFilterIDList.ToArray();
						else
							sourceArray = CollectionContent.Select(item => item.ID).ToArray();
						return String.Join(",", sourceArray);
					}
					set 
					{
						if (value == null)
							return;
						string[] valueArray = value.Split(',');
						OrderFilterIDList = new List<string>();
						OrderFilterIDList.AddRange(valueArray);
						OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
					}
				}

				public UpdateWebContentHandlerItem[] GetIDSelectedArray()
				{
					if (IsCollectionFiltered == false || this.OrderFilterIDList == null)
						return CollectionContent.ToArray();
					return
						this.OrderFilterIDList.Select(id => CollectionContent.FirstOrDefault(item => item.ID == id)).Where(item => item != null).ToArray();
				}

				public void RefreshOrderAndFilterListFromContent()
                {
                    if (OrderFilterIDList == null)
                        return;
                    OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
                }

				public void ParsePropertyValue(string propertyName, string propertyValue)
				{
					switch(propertyName)
					{
						case "SelectedIDCommaSeparated":
							SelectedIDCommaSeparated = propertyValue;
							break;
						case "IsCollectionFiltered":
							IsCollectionFiltered = bool.Parse(propertyValue);
							break;
						default:
							throw new NotSupportedException("No ParsePropertyValue supported for property: " + propertyName);
					}
				}


				void IInformationObject.ReplaceObjectInTree(IInformationObject replacingObject)
				{
					for(int i = 0; i < CollectionContent.Count; i++) // >
					{
						if(CollectionContent[i].ID == replacingObject.ID)
							CollectionContent[i] = (UpdateWebContentHandlerItem )replacingObject;
						else { // Cannot have circular reference, so can be in else branch
							IInformationObject iObject = CollectionContent[i];
							iObject.ReplaceObjectInTree(replacingObject);
						}
					}
				}

				
				bool IInformationObject.IsInstanceTreeModified {
					get {
						bool collectionModified = CollectionContent.SequenceEqual(_unmodified_CollectionContent) == false;
						if(collectionModified)
							return true;
						//if((OrderFilterIDList == null && _unmodified_OrderFilterIDList != null) || _unmodified_OrderFilterIDList
						if(IsCollectionFiltered != _unmodified_IsCollectionFiltered)
							return true;
						// For non-master content
						foreach(IInformationObject item in CollectionContent)
						{
							bool itemTreeModified = item.IsInstanceTreeModified;
							if(itemTreeModified)
								return true;
						}
							
						return false;
					}
				}
				void IInformationObject.SetInstanceTreeValuesAsUnmodified()
				{
					_unmodified_CollectionContent = CollectionContent.ToArray();
					_unmodified_IsCollectionFiltered = IsCollectionFiltered;
					if(OrderFilterIDList == null)
						_unmodified_OrderFilterIDList = null;
					else
						_unmodified_OrderFilterIDList = OrderFilterIDList.ToArray();
					foreach(IInformationObject iObject in CollectionContent)
						iObject.SetInstanceTreeValuesAsUnmodified();
				}

				private void CopyContentFrom(UpdateWebContentHandlerCollection sourceObject)
				{
					CollectionContent = sourceObject.CollectionContent;
					_unmodified_CollectionContent = sourceObject._unmodified_CollectionContent;
				}
				
				private object FindFromObjectTree(string objectId)
				{
					foreach(var item in CollectionContent)
					{
						object result = item.FindObjectByID(objectId);
						if(result != null)
							return result;
					}
					return null;
				}

				void IInformationObject.FindObjectsFromTree(List<IInformationObject> result, Predicate<IInformationObject> filterOnFalse, bool searchWithinCurrentMasterOnly)
				{
					if(filterOnFalse(this))
						result.Add(this);
					foreach(IInformationObject iObject in CollectionContent)
						iObject.FindObjectsFromTree(result, filterOnFalse, searchWithinCurrentMasterOnly);
				}


				void IInformationObject.CollectMasterObjectsFromTree(Dictionary<string, List<IInformationObject>> result, Predicate<IInformationObject> filterOnFalse)
				{
					IInformationObject iObject = (IInformationObject) this;
					if(iObject.IsIndependentMaster)
					{
						bool doAdd = true;
						if(filterOnFalse != null)
							doAdd = filterOnFalse(iObject);
						if(doAdd) {
							string key = iObject.ID;
							List<IInformationObject> existingValue;
							bool keyFound = result.TryGetValue(key, out existingValue);
							if(keyFound == false) {
								existingValue = new List<IInformationObject>();
								result.Add(key, existingValue);
							}
							existingValue.Add(iObject);
						}
					}
					foreach(IInformationObject item in CollectionContent)
					{
						if(item != null)
							item.CollectMasterObjectsFromTree(result, filterOnFalse);
					}
				}


			
			}
 } 