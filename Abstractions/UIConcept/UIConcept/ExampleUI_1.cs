//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.261
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UIConcept {
    using System;
    using System.IO;
    using System.Xml;
    using System.Xml.Serialization;
    using System.Diagnostics;
    using System.Linq;
    using System.Xml.Linq;
    using System.Collections;
    using System.Collections.Generic;
    
    
    public partial class ExampleUI_1 : ExampleUI_1Base {
        
        private global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost hostValue;
        
        
        #line 23 "C:\work\abs\TMPDemo\Abstractions\UIConcept\UIConcept\ExampleUI_1.tt"
 
	void SetCurrentAbstraction(object abs)
	{
		CurrentAbstraction = ( CaloomBaseType ) abs;
	}
	
	
	CaloomBaseType CurrentAbstraction;
	
	void GenerateRoot()
	{
		GenerateAbstraction(CurrentAbstraction);
	}
	
	void GenerateAbstraction(CaloomBaseType abstraction)
	{
		

        #line default
        #line hidden
        
        
        #line 41 "C:\work\abs\TMPDemo\Abstractions\UIConcept\UIConcept\ExampleUI_1.tt"
this.Write("<html>\r\n<div>Services count: ");

        #line default
        #line hidden
        
        
        #line 42 "C:\work\abs\TMPDemo\Abstractions\UIConcept\UIConcept\ExampleUI_1.tt"
this.Write(this.ToStringHelper.ToStringWithCulture( abstraction.Services.Length ));

        #line default
        #line hidden
        
        
        #line 42 "C:\work\abs\TMPDemo\Abstractions\UIConcept\UIConcept\ExampleUI_1.tt"
this.Write("</div>\r\n");

        #line default
        #line hidden
        
        
        #line 43 "C:\work\abs\TMPDemo\Abstractions\UIConcept\UIConcept\ExampleUI_1.tt"

		foreach(ServiceType service in abstraction.Services)
			GenerateService(service);

        #line default
        #line hidden
        
        
        #line 47 "C:\work\abs\TMPDemo\Abstractions\UIConcept\UIConcept\ExampleUI_1.tt"
this.Write("</html>\r\n");

        #line default
        #line hidden
        
        
        #line 48 "C:\work\abs\TMPDemo\Abstractions\UIConcept\UIConcept\ExampleUI_1.tt"

	}
	
	void GenerateService(ServiceType service)
	{

        #line default
        #line hidden
        
        
        #line 54 "C:\work\abs\TMPDemo\Abstractions\UIConcept\UIConcept\ExampleUI_1.tt"
this.Write("<div id=\"serviceBegin");

        #line default
        #line hidden
        
        
        #line 54 "C:\work\abs\TMPDemo\Abstractions\UIConcept\UIConcept\ExampleUI_1.tt"
this.Write(this.ToStringHelper.ToStringWithCulture( service.name ));

        #line default
        #line hidden
        
        
        #line 54 "C:\work\abs\TMPDemo\Abstractions\UIConcept\UIConcept\ExampleUI_1.tt"
this.Write("\">Service ");

        #line default
        #line hidden
        
        
        #line 54 "C:\work\abs\TMPDemo\Abstractions\UIConcept\UIConcept\ExampleUI_1.tt"
this.Write(this.ToStringHelper.ToStringWithCulture( service.name ));

        #line default
        #line hidden
        
        
        #line 54 "C:\work\abs\TMPDemo\Abstractions\UIConcept\UIConcept\ExampleUI_1.tt"
this.Write(" starts here</div>\r\n");

        #line default
        #line hidden
        
        
        #line 55 "C:\work\abs\TMPDemo\Abstractions\UIConcept\UIConcept\ExampleUI_1.tt"
 GenerateWhat(service.What);
 	// GenerateWhere(service.Where); 
	// GenerateWhen(service.When); 
	// GenerateWhom(service.Whom); 
	// GenerateWorth(service.Worth); 

        #line default
        #line hidden
        
        
        #line 61 "C:\work\abs\TMPDemo\Abstractions\UIConcept\UIConcept\ExampleUI_1.tt"
this.Write("\r\n<div id=\"serviceEnd");

        #line default
        #line hidden
        
        
        #line 62 "C:\work\abs\TMPDemo\Abstractions\UIConcept\UIConcept\ExampleUI_1.tt"
this.Write(this.ToStringHelper.ToStringWithCulture( service.name ));

        #line default
        #line hidden
        
        
        #line 62 "C:\work\abs\TMPDemo\Abstractions\UIConcept\UIConcept\ExampleUI_1.tt"
this.Write("\">Service ");

        #line default
        #line hidden
        
        
        #line 62 "C:\work\abs\TMPDemo\Abstractions\UIConcept\UIConcept\ExampleUI_1.tt"
this.Write(this.ToStringHelper.ToStringWithCulture( service.name ));

        #line default
        #line hidden
        
        
        #line 62 "C:\work\abs\TMPDemo\Abstractions\UIConcept\UIConcept\ExampleUI_1.tt"
this.Write(" ends here</div>\r\n\t\t\r\n");

        #line default
        #line hidden
        
        
        #line 64 "C:\work\abs\TMPDemo\Abstractions\UIConcept\UIConcept\ExampleUI_1.tt"
		
	}
	
	void GenerateWhat(WhatType what)
	{

        #line default
        #line hidden
        
        
        #line 70 "C:\work\abs\TMPDemo\Abstractions\UIConcept\UIConcept\ExampleUI_1.tt"
this.Write("Whaat?? MDx\r\n\r\nDescription: ");

        #line default
        #line hidden
        
        
        #line 72 "C:\work\abs\TMPDemo\Abstractions\UIConcept\UIConcept\ExampleUI_1.tt"
this.Write(this.ToStringHelper.ToStringWithCulture( what.Description.Value ));

        #line default
        #line hidden
        
        
        #line 72 "C:\work\abs\TMPDemo\Abstractions\UIConcept\UIConcept\ExampleUI_1.tt"
this.Write("\r\n");

        #line default
        #line hidden
        
        
        #line 73 "C:\work\abs\TMPDemo\Abstractions\UIConcept\UIConcept\ExampleUI_1.tt"

	}

        #line default
        #line hidden
        
        
        #line 1 "C:\work\abs\TMPDemo\Abstractions\UIConcept\UIConcept\..\..\abscommon\CommonInclude\Common\AbstractionOptions_namespace.ttinclude"

public class AbstractionOptions { 
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5448
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



// 
// This source code was auto-generated by xsd, Version=2.0.50727.3038.
// 


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.3038")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/AbstractionOptions.xsd")]
[System.Xml.Serialization.XmlRootAttribute("AbstractionOptions", Namespace="http://tempuri.org/AbstractionOptions.xsd", IsNullable=false)]
public partial class AbstractionOptionsType {
    
    private GeneralType generalField;
    
    /// <remarks/>
    public GeneralType General {
        get {
            return this.generalField;
        }
        set {
            this.generalField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.3038")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/AbstractionOptions.xsd")]
public partial class GeneralType {
    
    private GeneralTypeShareLevel shareLevelField;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public GeneralTypeShareLevel shareLevel {
        get {
            return this.shareLevelField;
        }
        set {
            this.shareLevelField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.3038")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://tempuri.org/AbstractionOptions.xsd")]
public enum GeneralTypeShareLevel {
    
    /// <remarks/>
    Local,
    
    /// <remarks/>
    Shared,
    
    /// <remarks/>
    Modular,
}
} 
        #line default
        #line hidden
        
        
        #line 2 "C:\work\abs\TMPDemo\Abstractions\UIConcept\UIConcept\..\..\abscommon\CommonInclude\Common\CommonCodeblocks.ttinclude"
 
	enum AbstractionShareLevel
	{
		Local,
		Shared,
		Modular,
	}
	
	bool IsLocal
	{
		get {
			return ShareLevel == AbstractionOptions.GeneralTypeShareLevel.Local;
		}
	}
	
	AbstractionOptions.AbstractionOptionsType CurrentOptions;
	AbstractionOptions.GeneralTypeShareLevel ShareLevel {
		get {
			return CurrentOptions.General.shareLevel;
		}
	}
	
	void TransformGenerator<AbstractionType>(Action rootLevelGenerator, string sharedSingleFileExtension)
	{
		// Abstraction(s) that are supposed to be shared must be shared by default.
		// This is simply because any change to "shared" makes it modified compared to the shared version.
		// Thus making abstraction "local" allows also making the changes that make it behave like "local".
		// To make the abstraction "local" make following changes:
		// 1. Modify the output - directive right on top of the file (2nd line) from "?" to ".designer.cs"
		// 2. Set the AbstractionShareLevel below to Shared 
		// 3. After the changes, the abstraction starts to generate its output right below the template:
		// - Change the .cs file properties so that it doesn't compile in the abstraction-project
		// - Link the output .cs file to appropriate projects (to replace the links from AbstractionContent/Out directory)
		// 4. If necessary, copy over and alter the include-files specified for common includes
		
		// ShareLevel = AbstractionShareLevel.Shared;
		
		string templateDirectoryPath = Path.GetDirectoryName(Host.TemplateFile);
		DirectoryInfo dirInfo = new DirectoryInfo(templateDirectoryPath);
		dirInfo = dirInfo.Parent;
		string optionsFile = Path.Combine(dirInfo.FullName, "Options.xml");
		CurrentOptions = LoadXml<AbstractionOptions.AbstractionOptionsType>(optionsFile);

		if(ShareLevel != AbstractionOptions.GeneralTypeShareLevel.Modular)
		{
			string directoryName = GetContentDirectoryFromTemplateFullPath(Host.TemplateFile, IsLocal == false);
			string[] xmlFileNames = Directory.GetFiles(directoryName, "*.xml");
			
			foreach(string xmlFileName in xmlFileNames)
			{
				AbstractionType current = LoadXml<AbstractionType>(xmlFileName);
				SetCurrentAbstraction(current);
				rootLevelGenerator();
			}
		} 
		else
		{
			rootLevelGenerator();
		}
		
		if(ShareLevel == AbstractionOptions.GeneralTypeShareLevel.Shared)
		{
			WriteContentToSingleOutput(Host.TemplateFile, sharedSingleFileExtension);
		}
	}
	
	
	string GetContentDirectoryFromTemplateFullPath(string templateFullPath, bool isShared)
	{
		string templateDirectoryName = Path.GetDirectoryName(templateFullPath);
		string contentDir =  isShared ? @"In\Content_v1_0" : "Content_v1_0";
		string directoryName = Path.Combine(templateDirectoryName, contentDir);
		if(isShared) {
			System.IO.DirectoryInfo absRootDirInfo = new System.IO.DirectoryInfo(templateDirectoryName);
			absRootDirInfo = absRootDirInfo.Parent;
			string abstractionName = absRootDirInfo.Name;
			directoryName = directoryName.Replace(abstractionName, "AbstractionContent");
		}
		return directoryName;
	}
	
	void WriteContentToSingleOutput(string templateFullPath, string extension)
	{
		string templateDirectoryName = Path.GetDirectoryName(templateFullPath);
		string contentDir = "Out";
		string directoryName = Path.Combine(templateDirectoryName, contentDir);
		string contentFileName = System.IO.Path.GetFileNameWithoutExtension(templateFullPath) + extension;
		System.IO.DirectoryInfo absRootDirInfo = new System.IO.DirectoryInfo(templateDirectoryName);
		absRootDirInfo = absRootDirInfo.Parent;
		string abstractionName = absRootDirInfo.Name;
		directoryName = directoryName.Replace(abstractionName, "AbstractionContent");
		string contentFullName = Path.Combine(directoryName, contentFileName);
		string contentData = this.GenerationEnvironment.ToString();
		this.GenerationEnvironment.Clear();
		File.WriteAllText(contentFullName, contentData);
	}

	T LoadXml<T>(string xmlFileName) {
		using(FileStream fStream = File.OpenRead(xmlFileName)) {
			XmlSerializer serializer = new XmlSerializer(typeof(T));
			T result = (T) serializer.Deserialize(fStream);
			fStream.Close();
			return result;
		}
	}

	void BeginNamespace(string namespaceName) {
		
        #line default
        #line hidden
        
        
        #line 110 "C:\work\abs\TMPDemo\Abstractions\UIConcept\UIConcept\..\..\abscommon\CommonInclude\Common\CommonCodeblocks.ttinclude"
this.Write("namespace ");

        #line default
        #line hidden
        
        
        #line 110 "C:\work\abs\TMPDemo\Abstractions\UIConcept\UIConcept\..\..\abscommon\CommonInclude\Common\CommonCodeblocks.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture( namespaceName ));

        #line default
        #line hidden
        
        
        #line 110 "C:\work\abs\TMPDemo\Abstractions\UIConcept\UIConcept\..\..\abscommon\CommonInclude\Common\CommonCodeblocks.ttinclude"
this.Write(" { \r\n\t\t");

        #line default
        #line hidden
        
        
        #line 111 "C:\work\abs\TMPDemo\Abstractions\UIConcept\UIConcept\..\..\abscommon\CommonInclude\Common\CommonCodeblocks.ttinclude"
 
	}

	void EndBlock() {
		
        #line default
        #line hidden
        
        
        #line 116 "C:\work\abs\TMPDemo\Abstractions\UIConcept\UIConcept\..\..\abscommon\CommonInclude\Common\CommonCodeblocks.ttinclude"
this.Write(" } ");

        #line default
        #line hidden
        
        
        #line 116 "C:\work\abs\TMPDemo\Abstractions\UIConcept\UIConcept\..\..\abscommon\CommonInclude\Common\CommonCodeblocks.ttinclude"

	}

		
	static string RemoveScands(string sourceString) {
		return sourceString.Replace('ä', 'a').Replace('Ä', 'A').Replace('å', 'a').Replace('Å', 'A').Replace('ö', 'o').Replace('Ö', 'O');
	}
	
	public class GenerationItem
	{
		public string FileName;
		public string Content;
	}
	

        #line default
        #line hidden
        
        
        #line 1 "C:\work\abs\TMPDemo\Abstractions\UIConcept\UIConcept\CaloomBase.ttinclude"

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5448
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



// 
// This source code was auto-generated by xsd, Version=2.0.50727.3038.
// 


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.3038")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlRootAttribute("CaloomBase", Namespace="", IsNullable=false)]
public partial class CaloomBaseType {
    
    private ServiceType[] servicesField;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlArrayItemAttribute("Service", IsNullable=false)]
    public ServiceType[] Services {
        get {
            return this.servicesField;
        }
        set {
            this.servicesField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.3038")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ServiceType {
    
    private WhatType whatField;
    
    private object whereField;
    
    private object whenField;
    
    private object whomField;
    
    private object worthField;
    
    private string nameField;
    
    /// <remarks/>
    public WhatType What {
        get {
            return this.whatField;
        }
        set {
            this.whatField = value;
        }
    }
    
    /// <remarks/>
    public object Where {
        get {
            return this.whereField;
        }
        set {
            this.whereField = value;
        }
    }
    
    /// <remarks/>
    public object When {
        get {
            return this.whenField;
        }
        set {
            this.whenField = value;
        }
    }
    
    /// <remarks/>
    public object Whom {
        get {
            return this.whomField;
        }
        set {
            this.whomField = value;
        }
    }
    
    /// <remarks/>
    public object Worth {
        get {
            return this.worthField;
        }
        set {
            this.worthField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public string name {
        get {
            return this.nameField;
        }
        set {
            this.nameField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.3038")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class WhatType {
    
    private DescriptionType descriptionField;
    
    private HowType howField;
    
    private ImagesType imagesField;
    
    private InfoType infoField;
    
    private KeywordsType keywordsField;
    
    /// <remarks/>
    public DescriptionType Description {
        get {
            return this.descriptionField;
        }
        set {
            this.descriptionField = value;
        }
    }
    
    /// <remarks/>
    public HowType How {
        get {
            return this.howField;
        }
        set {
            this.howField = value;
        }
    }
    
    /// <remarks/>
    public ImagesType Images {
        get {
            return this.imagesField;
        }
        set {
            this.imagesField = value;
        }
    }
    
    /// <remarks/>
    public InfoType Info {
        get {
            return this.infoField;
        }
        set {
            this.infoField = value;
        }
    }
    
    /// <remarks/>
    public KeywordsType Keywords {
        get {
            return this.keywordsField;
        }
        set {
            this.keywordsField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.3038")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class DescriptionType {
    
    private bool activeInInfoField;
    
    private bool activeInSearchField;
    
    private string valueField;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public bool activeInInfo {
        get {
            return this.activeInInfoField;
        }
        set {
            this.activeInInfoField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public bool activeInSearch {
        get {
            return this.activeInSearchField;
        }
        set {
            this.activeInSearchField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTextAttribute()]
    public string Value {
        get {
            return this.valueField;
        }
        set {
            this.valueField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.3038")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class KeywordsType {
    
    private string[] keywordField;
    
    private bool activeInInfoField;
    
    private bool activeInSearchField;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute("Keyword")]
    public string[] Keyword {
        get {
            return this.keywordField;
        }
        set {
            this.keywordField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public bool activeInInfo {
        get {
            return this.activeInInfoField;
        }
        set {
            this.activeInInfoField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public bool activeInSearch {
        get {
            return this.activeInSearchField;
        }
        set {
            this.activeInSearchField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.3038")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class InfoType {
    
    private bool activeInInfoField;
    
    private bool activeInSearchField;
    
    private string valueField;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public bool activeInInfo {
        get {
            return this.activeInInfoField;
        }
        set {
            this.activeInInfoField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public bool activeInSearch {
        get {
            return this.activeInSearchField;
        }
        set {
            this.activeInSearchField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTextAttribute()]
    public string Value {
        get {
            return this.valueField;
        }
        set {
            this.valueField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.3038")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ImagesType {
    
    private string[] imageField;
    
    private bool activeInInfoField;
    
    private bool activeInSearchField;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute("Image")]
    public string[] Image {
        get {
            return this.imageField;
        }
        set {
            this.imageField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public bool activeInInfo {
        get {
            return this.activeInInfoField;
        }
        set {
            this.activeInInfoField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public bool activeInSearch {
        get {
            return this.activeInSearchField;
        }
        set {
            this.activeInSearchField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.3038")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class HowType {
    
    private string freeField;
    
    private string otherField;
    
    private string sellField;
    
    /// <remarks/>
    public string Free {
        get {
            return this.freeField;
        }
        set {
            this.freeField = value;
        }
    }
    
    /// <remarks/>
    public string Other {
        get {
            return this.otherField;
        }
        set {
            this.otherField = value;
        }
    }
    
    /// <remarks/>
    public string Sell {
        get {
            return this.sellField;
        }
        set {
            this.sellField = value;
        }
    }
}

        #line default
        #line hidden
        
        
        public global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost Host {
            get {
                return this.hostValue;
            }
            set {
                this.hostValue = value;
            }
        }
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 16 "C:\work\abs\TMPDemo\Abstractions\UIConcept\UIConcept\ExampleUI_1.tt"
            this.Write(" \r\n");
            
            #line default
            #line hidden
            
            #line 19 "C:\work\abs\TMPDemo\Abstractions\UIConcept\UIConcept\ExampleUI_1.tt"
   
	// Set abstraction specific type and single file specific extension
	TransformGenerator< CaloomBaseType >(GenerateRoot, ".html");	

            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        protected virtual void Initialize() {
        }
    }
    
    public class ExampleUI_1Base {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((this.formatProvider == null)) {
                        throw new global::System.ArgumentNullException("formatProvider");
                    }
                    this.formatProvider = value;
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
