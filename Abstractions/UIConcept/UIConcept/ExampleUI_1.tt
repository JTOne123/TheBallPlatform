<#@ template debug="false" hostSpecific="true" language="C#" #>
<#@ output extension=".html" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="Microsoft.CSharp.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Serialization" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ include file="..\..\abscommon\CommonInclude\Common\CommonCodeblocks.ttinclude" #>
<#@ include file="CaloomBase.ttinclude" #>
<#@ include file="CommonTemplates.ttinclude" #>
<#   
	// Set abstraction specific type and single file specific extension
	TransformGenerator< CaloomBaseType >(GenerateRoot, ".html");	
#>
<#+ 
	void SetCurrentAbstraction(object abs)
	{
		CurrentAbstraction = ( CaloomBaseType ) abs;
	}
	
	
	CaloomBaseType CurrentAbstraction;
	
	void GenerateRoot()
	{
		//GenerateAbstraction(CurrentAbstraction);
	}
	
	void GenerateAbstraction(CaloomBaseType abstraction)
	{
		
#>
<html>
<div>Services count: <#= abstraction.Services.Length #></div>
<#+
		foreach(ServiceType service in abstraction.Services)
			GenerateService(service);
#>
</html>
<#+
	}
	
	void GenerateService(ServiceType service)
	{
#>
<div id="serviceBegin<#= service.name #>">Service <#= service.name #> starts here</div>
<#+ GenerateWhat(service.What);
 	GenerateWhere(service.Where); 
	GenerateWhen(service.When); 
	GenerateWhom(service.Whom); 
	GenerateWorth(service.Worth); 
#>

<div id="serviceEnd<#= service.name #>">Service <#= service.name #> ends here</div>
		
<#+		
	}
	
#>